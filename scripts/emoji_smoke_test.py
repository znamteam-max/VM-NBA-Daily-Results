#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º workflow. –î–µ–ª–∞–µ—Ç —Ç—Ä–∏ –≤–µ—â–∏:
1) –ü–∞—Ä—Å–∏—Ç TEAM_EMOJI_JSON -> {ABBR: custom_emoji_id}
2) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ ID —á–µ—Ä–µ–∑ getCustomEmojiStickers
3) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π:
   ‚Ä¢ "VALID": —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ (–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ, –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞) –ª–æ–≥–æ —á–µ—Ä–µ–∑ <tg-emoji>
   ‚Ä¢ "UNKNOWN": —Å–ø–∏—Å–æ–∫ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä/ID, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
"""

import os, json, re, sys, textwrap, urllib.request, urllib.error

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT  = os.getenv("TELEGRAM_CHAT_ID", "").strip()
SET_NAME_FILTER = (os.getenv("TEAM_EMOJI_SET_NAME") or "").strip()  # –Ω–∞–ø—Ä. "got_ball_team"
RAW_JSON = os.getenv("TEAM_EMOJI_JSON", "").strip()

if not (TOKEN and CHAT and RAW_JSON):
    print("Missing envs: need TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, TEAM_EMOJI_JSON", file=sys.stderr)
    sys.exit(1)

def tg_call(method: str, payload: dict) -> dict:
    req = urllib.request.Request(
        f"https://api.telegram.org/bot{TOKEN}/{method}",
        data=json.dumps(payload).encode("utf-8"),
        headers={"Content-Type": "application/json"},
    )
    try:
        with urllib.request.urlopen(req, timeout=30) as r:
            return json.loads(r.read().decode("utf-8"))
    except urllib.error.HTTPError as e:
        body = e.read().decode("utf-8", "ignore")
        print(f"[HTTPError] {method} {e.code} {e.reason}: {body}", file=sys.stderr)
        raise

def send_html(html: str):
    payload = {
        "chat_id": CHAT,
        "text": html,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    res = tg_call("sendMessage", payload)
    ok = res.get("ok")
    if not ok:
        print("sendMessage failed:", res, file=sys.stderr)

# 1) –ü–∞—Ä—Å–∏–º JSON —Å–µ–∫—Ä–µ—Ç–∞
try:
    mapping = json.loads(RAW_JSON)
except Exception as e:
    print("TEAM_EMOJI_JSON parse error:", e, file=sys.stderr)
    sys.exit(1)

# 2) –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ ID
abbr_to_id = {}
ids = []
for abbr, val in mapping.items():
    v = str(val).strip()
    m = re.fullmatch(r"(?:id:)?(\d{10,})", v)
    if not m:
        print(f"[WARN] value for {abbr} is not a numeric custom_emoji_id: {v}", file=sys.stderr)
        continue
    cid = m.group(1)
    abbr_to_id[abbr] = cid
    ids.append(cid)

# –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ ID, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä
ids_unique = list(dict.fromkeys(ids))
if not ids_unique:
    print("No numeric custom_emoji_ids found in secret", file=sys.stderr)
    sys.exit(1)

# 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ ID —Ä–∞–∑–æ–º
resp = tg_call("getCustomEmojiStickers", {"custom_emoji_ids": ids_unique})
if not resp.get("ok"):
    print("getCustomEmojiStickers failed:", resp, file=sys.stderr)
    sys.exit(1)

stickers = resp.get("result") or []
id_to_sticker = {st.get("custom_emoji_id"): st for st in stickers}

recognized = {}
unknown = {}   # abbr -> id (–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã)

for abbr, cid in sorted(abbr_to_id.items()):
    st = id_to_sticker.get(cid)
    if not st:
        unknown[abbr] = cid
        continue
    # –§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ –Ω–∞–±–æ—Ä–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if SET_NAME_FILTER:
        if st.get("set_name") != SET_NAME_FILTER:
            # –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –∑–∞–¥–∞–Ω, –∞ set_name –Ω–µ —Å–æ–≤–ø–∞–ª ‚Äî —Å—á–∏—Ç–∞–µ–º ¬´unknown –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏¬ª,
            # –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∫ "wrong set"
            unknown[abbr] = f"{cid} (set={st.get('set_name')})"
            continue
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è –≤ —Ç–∏–ø–µ
    if st.get("type") not in (None, "custom_emoji", "regular"):
        # –í –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Bot API –ø–æ–ª–µ type –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–ª—è –∫–∞—Å—Ç–æ–º —ç–º–æ–¥–∑–∏.
        pass
    recognized[abbr] = cid

print(f"[INFO] Recognized {len(recognized)} of {len(abbr_to_id)} (IDs unique: {len(ids_unique)})")
if unknown:
    print("[INFO] Unknown/filtered IDs:")
    for a, cid in unknown.items():
        print(f"  {a}: {cid}")

# 4) –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤
# –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: "ATL: <tg-emoji emoji-id="...">X</tg-emoji>"
lines = []
for abbr in sorted(recognized.keys()):
    cid = recognized[abbr]
    lines.append(f"{abbr}: <tg-emoji emoji-id=\"{cid}\">üèÄ</tg-emoji>")

if not lines:
    send_html("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö ID (–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ).")
    sys.exit(0)

# –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
blocks = []
cur = []
cur_len = 0
for line in lines:
    # —É—á—Ç—ë–º –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
    add_len = len(line) + 1
    if cur_len + add_len > 3500 and cur:
        blocks.append("\n".join(cur))
        cur = []
        cur_len = 0
    cur.append(line)
    cur_len += add_len
if cur:
    blocks.append("\n".join(cur))

# 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´–≤–∞–ª–∏–¥–Ω—ã–µ¬ª (—Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ) –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–ø–∏—Å–æ–∫ ¬´–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö¬ª
send_html(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ (valid {len(recognized)}/{len(abbr_to_id)}):")
for b in blocks:
    send_html(b)

if unknown:
    # –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–º; —Å–∞–º–∏ ¬´–±–∏—Ç—ã–µ¬ª —ç–º–æ–¥–∑–∏ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ–º
    # —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ–≥—Ä–æ–º–Ω—ã–º ‚Äî –æ–±—Ä–µ–∂–µ–º –¥–æ 30 —Å—Ç—Ä–æ–∫
    unk_lines = [f"{a}: {cid}" for a,cid in sorted(unknown.items())]
    preview = "\n".join(unk_lines[:30])
    if len(unk_lines) > 30:
        preview += f"\n‚Ä¶ –∏ –µ—â—ë {len(unk_lines)-30}"
    send_html("‚ö†Ô∏è –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ –Ω–∞–±–æ—Ä—É:\n" + "<pre>" + preview + "</pre>")
