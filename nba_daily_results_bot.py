#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (RU) ‚Äî Sports.ru primary, ESPN cross-check

–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
  ‚Ä¢ –ù–∞–¥—ë–∂–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä –∫–æ–º–∞–Ω–¥: og:title ‚Üí <title> ‚Üí –∑–∞–≥–æ–ª–æ–≤–∫–∏ ¬´‚Ä¶ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤¬ª ‚Üí —Ä–µ–∑–µ—Ä–≤.
  ‚Ä¢ –ñ—ë—Å—Ç–∫–∞—è –∫–∞–Ω–æ–Ω–∏–∑–∞—Ü–∏—è –∫ 30 –∫–ª—É–±–∞–º –ù–ë–ê; –µ—Å–ª–∏ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–æ–≤–ø–∞–ª–∏ ‚Äî –º–∞—Ç—á –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.
  ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ç—Ä–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–ª–æ–∫–µ –º–∞—Ç—á–∞.
  ‚Ä¢ ESPN cross-check (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä –∫–æ–º–∞–Ω–¥ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å.

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –∏ —Å–ø–µ—Ü-–ø—Ä–∞–≤–∏–ª–∞ (–î—ë–º–∏–Ω/–ì–æ–ª–¥–∏–Ω, (–û–¢), –∑–Ω–∞—á–∏–º—ã–µ —Å—Ç–∞—Ç—ã, ¬´üî•¬ª) ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
"""

import os, sys, re, json, time
from datetime import date, datetime, timedelta
from zoneinfo import ZoneInfo

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup

# ---------- ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()
TEAM_EMOJI_JSON = os.getenv("TEAM_EMOJI_JSON", "").strip()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

# ---------- HTTP ----------
def make_session():
    s = requests.Session()
    r = Retry(total=6, connect=6, read=6, backoff_factor=0.6,
              status_forcelist=[429,500,502,503,504],
              allowed_methods=["GET","POST"])
    s.mount("https://", HTTPAdapter(max_retries=r))
    s.headers.update({
        "User-Agent": "NBA-DailyResultsBot/2.4 (Sports.ru + ESPN cross-check, dedupe)",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.6",
    })
    return s
S = make_session()

def log(*a): print(*a, file=sys.stderr)

# ---------- DATE / RU ----------
RU_MONTHS = {
    1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
    7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è",
}
def ru_date(d: date) -> str: return f"{d.day} {RU_MONTHS[d.month]}"
def ru_plural(n: int, forms: tuple[str,str,str]) -> str:
    n = abs(int(n)) % 100; n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

def pick_report_date() -> date:
    now = datetime.now(ZoneInfo("Europe/London"))
    base = now.date()
    if now.hour < 11:  # —É—Ç—Ä–µ–Ω–Ω–∏–π –≤—ã–ø—É—Å–∫ -> –≤—á–µ—Ä–∞—à–Ω–∏–π –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å
        base = base - timedelta(days=1)
    return base
def pick_candidate_days():
    d = pick_report_date()
    return [d, d - timedelta(days=1), d - timedelta(days=2)]

# ---------- TEAMS / EMOJI ----------
TEAM_RU_TO_ABBR = {
    "–ê—Ç–ª–∞–Ω—Ç–∞":"ATL","–ë–æ—Å—Ç–æ–Ω":"BOS","–ë—Ä—É–∫–ª–∏–Ω":"BKN","–®–∞—Ä–ª–æ—Ç—Ç":"CHA","–ß–∏–∫–∞–≥–æ":"CHI",
    "–ö–ª–∏–≤–ª–µ–Ω–¥":"CLE","–î–∞–ª–ª–∞—Å":"DAL","–î–µ–Ω–≤–µ—Ä":"DEN","–î–µ—Ç—Ä–æ–π—Ç":"DET","–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç":"GSW",
    "–•—å—é—Å—Ç–æ–Ω":"HOU","–ò–Ω–¥–∏–∞–Ω–∞":"IND","–ö–ª–∏–ø–ø–µ—Ä—Å":"LAC","–õ–µ–π–∫–µ—Ä—Å":"LAL","–ú–µ–º—Ñ–∏—Å":"MEM",
    "–ú–∞–π–∞–º–∏":"MIA","–ú–∏–ª—É–æ–∫–∏":"MIL","–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞":"MIN","–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω":"NOP","–ù—å—é-–ô–æ—Ä–∫":"NYK",
    "–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏":"OKC","–û—Ä–ª–∞–Ω–¥–æ":"ORL","–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è":"PHI","–§–∏–Ω–∏–∫—Å":"PHX","–ü–æ—Ä—Ç–ª–µ–Ω–¥":"POR",
    "–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ":"SAC","–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ":"SAS","–¢–æ—Ä–æ–Ω—Ç–æ":"TOR","–Æ—Ç–∞":"UTA","–í–∞—à–∏–Ω–≥—Ç–æ–Ω":"WAS",
}
ABBR_TO_TEAM_RU = {v:k for k,v in TEAM_RU_TO_ABBR.items()}
TEAM_EMOJI_FALLBACK = {
    "ATL":"ü¶Ö","BOS":"‚òòÔ∏è","BKN":"üï∏Ô∏è","CHA":"üêù","CHI":"üêÇ","CLE":"üõ°Ô∏è","DAL":"üêé","DEN":"‚õèÔ∏è","DET":"üîß",
    "GSW":"üó°Ô∏è","HOU":"üöÄ","IND":"üí´","LAC":"‚úÇÔ∏è","LAL":"‚≠ê","MEM":"üêª","MIA":"üî•","MIL":"ü¶å","MIN":"üê∫",
    "NOP":"ü™∂","NYK":"üóΩ","OKC":"‚ö°","ORL":"‚ú®","PHI":"üîî","PHX":"‚òÄÔ∏è","POR":"üß≠","SAC":"üëë","SAS":"ü™ô",
    "TOR":"ü¶ñ","UTA":"üé∑","WAS":"üßô",
}
def load_team_emoji_map():
    if TEAM_EMOJI_JSON:
        try:
            m = json.loads(TEAM_EMOJI_JSON)
            if isinstance(m, dict):
                return {k.upper(): str(v) for k, v in m.items()}
        except Exception:
            pass
    return TEAM_EMOJI_FALLBACK
TEAM_EMOJI = load_team_emoji_map()
def team_emoji_by_abbr(abbr: str) -> str:
    return TEAM_EMOJI.get((abbr or "").upper(), "üèÄ")

# ---------- ESPN CROSS-CHECK ----------
ESPN_SB = "https://site.web.api.espn.com/apis/v2/sports/basketball/nba/scoreboard?dates={yyyy}{mm}{dd}"
def fetch_espn_pairs(d: date) -> set[frozenset]:
    url = ESPN_SB.format(yyyy=d.year, mm=str(d.month).zfill(2), dd=str(d.day).zfill(2))
    try:
        r = S.get(url, timeout=25)
        if r.status_code != 200:
            return set()
        j = r.json()
    except Exception:
        return set()
    pairs = set()
    for ev in j.get("events") or []:
        completed = bool(((ev.get("status") or {}).get("type") or {}).get("completed", False))
        if not completed:
            continue
        comp = (ev.get("competitions") or [None])[0] or {}
        comps = comp.get("competitors") or []
        if len(comps) != 2: 
            continue
        abbrs = []
        for c in comps:
            team = c.get("team") or {}
            abbr = (team.get("abbreviation") or "").upper()
            if abbr == "GS": abbr = "GSW"
            abbrs.append(abbr)
        if len(abbrs) == 2 and all(abbrs):
            pairs.add(frozenset(abbrs))
    return pairs

# ---------- UTILS ----------
def unique_preserve(seq):
    seen=set(); out=[]
    for x in seq:
        if x in seen: 
            continue
        seen.add(x); out.append(x)
    return out

def clean_team_label(s: str) -> str:
    s = (s or "").strip()
    # —Å—Ä–µ–∑–∞–µ–º —Ö–≤–æ—Å—Ç—ã –ø–æ—Å–ª–µ –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    s = re.split(r"‚Äî|\-|/|\|", s, maxsplit=1)[0].strip()
    # —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏/—Å–∫–æ–±–∫–∏/–ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
    s = s.replace("¬´","").replace("¬ª","").replace("‚Äú","").replace("‚Äù","").replace('"',"")
    s = re.sub(r"\(.*?\)", "", s).strip()
    s = re.sub(r"\s{2,}", " ", s)
    return s

def canonical_ru_team(raw: str) -> str | None:
    if not raw: return None
    txt = clean_team_label(raw)
    # 1) —Ç–æ—á–Ω–æ–µ
    if txt in TEAM_RU_TO_ABBR:
        return txt
    # 2) –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
    for key in TEAM_RU_TO_ABBR.keys():
        if txt.startswith(key):
            return key
    # 3) –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é (–ø–æ–ª–Ω–æ–µ —Ä—É—Å. –∏–º—è ¬´‚Ä¶ –ù–∏–∫—Å¬ª, ¬´‚Ä¶ –£–æ—Ä—Ä–∏–æ—Ä–∑¬ª –∏ —Ç.–¥.)
    for key in TEAM_RU_TO_ABBR.keys():
        if key in txt:
            return key
    return None

# ---------- FETCH / DAY ----------
def day_url(d: date) -> str:
    return f"https://www.sports.ru/stat/basketball/center/end/{d:%Y/%m/%d}.html"

def get_html(url: str):
    r = S.get(url, timeout=25)
    if r.status_code != 200: return None
    return BeautifulSoup(r.text, "lxml")

def collect_day_match_links(d: date) -> list[str]:
    soup = get_html(day_url(d))
    if not soup: return []
    links = []
    for a in soup.find_all("a", href=True):
        href = a["href"]; txt = a.get_text(" ", strip=True)
        if not href.startswith("/basketball/match/"): 
            continue
        if re.search(r"\d+\s:\s\d+", txt):
            full = "https://www.sports.ru" + href if href.startswith("/") else href
            links.append(full)
    return unique_preserve(links)

# ---------- PARSE MATCH ----------
def _extract_teams_via_meta(soup: BeautifulSoup) -> tuple[str|None,str|None]:
    # 1) og:title
    mt = soup.find("meta", attrs={"property":"og:title"})
    if mt and mt.get("content"):
        title = mt["content"]
    else:
        # 2) <title>
        title = (soup.title.string if soup.title and soup.title.string else "")
    if not title:
        return (None, None)
    # –∂–¥—ë–º ¬´–ö–æ–º–∞–Ω–¥–∞ A ‚Äî –ö–æ–º–∞–Ω–¥–∞ B ‚Ä¶¬ª
    parts = [p.strip() for p in title.split("‚Äî")]
    if len(parts) >= 2:
        a = canonical_ru_team(parts[0])
        b = canonical_ru_team(parts[1])
        return (a, b)
    return (None, None)

def _extract_teams_via_stat_headers(soup: BeautifulSoup) -> list[str]:
    found = []
    for tag in soup.find_all(["h3","h4"]):
        t = tag.get_text(" ", strip=True)
        if "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤" in t.lower():
            # –±–µ—Ä—ë–º –∫–ª—é—á –≤ –Ω–∞—á–∞–ª–µ
            t0 = t.split(".")[0].strip()
            k = canonical_ru_team(t0)
            if k:
                found.append(k)
    return unique_preserve(found)

def parse_match(url: str) -> dict | None:
    soup = get_html(url)
    if not soup: return None
    page_text = soup.get_text(" ", strip=True)

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç
    m_score = re.search(r"(\d+)\s:\s(\d+)", page_text)
    if not m_score: 
        return None
    scoreA, scoreB = int(m_score.group(1)), int(m_score.group(2))

    # –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ –º–∞—Ç—á
    low = page_text.lower()
    finished = ("–∑–∞–≤–µ—Ä—à–µ–Ω" in low) or ("–∑–∞–≤–µ—Ä—à—ë–Ω" in low) or ("–º–∞—Ç—á –∑–∞–≤–µ—Ä—à" in low)

    # –æ–≤–µ—Ä—Ç–∞–π–º—ã ‚Äî –ø–∞—Ä—ã –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—á—ë—Ç–∞
    tail = page_text[m_score.end(): m_score.end()+240]
    pairs = re.findall(r"\d+\s:\s\d+", tail)
    ot = max(len(pairs) - 4, 0) if pairs else 0

    # --- –∫–æ–º–∞–Ω–¥—ã –Ω–∞–¥—ë–∂–Ω–æ ---
    teamA = teamB = None

    # A) og:title / <title>
    a1, b1 = _extract_teams_via_meta(soup)
    if a1 and b1:
        teamA, teamB = a1, b1

    # B) –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç—Ç–∞–±–ª–∏—Ü (–±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Ä–∞–∑–Ω—ã–µ)
    if not (teamA and teamB) or teamA == teamB:
        headers = _extract_teams_via_stat_headers(soup)
        if len(headers) >= 2:
            if not teamA: teamA = headers[0]
            if not teamB or teamB == teamA:
                # –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—É—é –æ—Ç–ª–∏—á–Ω—É—é –æ—Ç teamA
                teamB = next((x for x in headers[1:] if x != teamA), teamB)

    # C) —Ä–µ–∑–µ—Ä–≤ ‚Äî –ø–µ—Ä–≤—ã–µ –¥–≤–∞ h2/h1
    if not (teamA and teamB) or teamA == teamB:
        h2s = [h.get_text(" ", strip=True) for h in soup.find_all(["h2","h1"])]
        candidates = []
        for t in h2s:
            t = t.strip()
            if not t or t in {"–û–Ω–ª–∞–π–Ω","–í–∏–¥–µ–æ"}: 
                continue
            k = canonical_ru_team(t)
            if k:
                candidates.append(k)
        candidates = unique_preserve(candidates)
        if len(candidates) >= 2:
            teamA, teamB = candidates[0], candidates[1]

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not (teamA and teamB): 
        return None
    if teamA == teamB:
        return None  # –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç ¬´–ë—Ä—É–∫–ª–∏–Ω ‚Äî –ë—Ä—É–∫–ª–∏–Ω¬ª –∏ —Ç.–ø.

    abbrA = TEAM_RU_TO_ABBR.get(teamA,"")
    abbrB = TEAM_RU_TO_ABBR.get(teamB,"")
    if not abbrA or not abbrB:
        return None

    # --- —Ç–∞–±–ª–∏—Ü—ã ¬´‚Ä¶ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤¬ª ---
    def take_team_rows(team_ru_key: str) -> list[dict]:
        rows: list[dict] = []
        key_low = team_ru_key.lower()
        # –Ω–∞–π–¥—ë–º –±–ª–∏–∂–∞–π—à—É—é –∫ –∫–ª—é—á—É —Ç–∞–±–ª–∏—Ü—É
        hdr = None
        for tag in soup.find_all(["h3","h4"]):
            text = tag.get_text(" ", strip=True)
            lowtxt = text.lower()
            if "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤" in lowtxt and key_low in lowtxt.split(".")[0]:
                hdr = tag; break
        if not hdr:
            return rows
        table = hdr.find_next("table")
        if not table: return rows

        for tr in table.find_all("tr"):
            tds = [td.get_text(" ", strip=True) for td in tr.find_all(["td","th"])]
            if not tds: 
                continue
            # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            if any(x.lower().startswith("–∏–≥—Ä–æ–∫") for x in tds):
                continue
            # –∏–º—è –≤ –ø–µ—Ä–≤—ã—Ö 2‚Äì3 —è—á–µ–π–∫–∞—Ö
            name_idx = None
            for i, cell in enumerate(tds[:3]):
                if re.search(r"[^\d/:% ]", cell):
                    name_idx = i; break
            if name_idx is None:
                continue
            name = tds[name_idx]
            nums = tds[name_idx+1:]
            if len(nums) < 14:
                continue

            def as_int(x: str) -> int:
                try: return int(x)
                except:
                    try: return int(float(x))
                    except: return 0

            pts = as_int(nums[0])
            reb = as_int(nums[7])
            ast = as_int(nums[8])
            stl = as_int(nums[10])
            blk = as_int(nums[12])

            rows.append({"name": name, "pts": pts, "reb": reb, "ast": ast, "stl": stl, "blk": blk})
        return rows

    rowsA = take_team_rows(teamA)
    rowsB = take_team_rows(teamB)

    return {
        "teamA": {"name": teamA, "abbr": abbrA, "emoji": team_emoji_by_abbr(abbrA), "score": scoreA},
        "teamB": {"name": teamB, "abbr": abbrB, "emoji": team_emoji_by_abbr(abbrB), "score": scoreB},
        "finished": finished,
        "ot": ot,
        "players": {teamA: rowsA, teamB: rowsB},
        "url": url,
    }

# ---------- PICK / FORMAT ----------
def initials_ru(full_name: str) -> str:
    parts = [p for p in re.split(r"\s+", (full_name or "").strip()) if p]
    if not parts: return full_name or ""
    if len(parts) == 1: return parts[0]
    first = parts[0]
    suffixes = {"–º–ª.","—Å—Ç."}
    if parts[-1].lower() in suffixes and len(parts) >= 3:
        last = parts[-2] + " " + parts[-1]
    else:
        last = parts[-1]
    return f"{first[0]}. {last}"

def hot_mark(p: dict) -> str:
    if (p["pts"] >= 35) or (p["reb"] >= 15) or (p["ast"] >= 12) or (p["stl"] >= 5) or (p["blk"] >= 5):
        return " üî•"
    return ""

def format_player_line_regular(p: dict, bold=False) -> str:
    name = initials_ru(p["name"])
    if bold: name = f"<b>{name}</b>"
    parts = [f"{p['pts']} {ru_plural(p['pts'], ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"]
    if p["reb"] >= 5: parts.append(f"{p['reb']} {ru_plural(p['reb'], ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}")
    if p["ast"] >= 5: parts.append(f"{p['ast']} {ru_plural(p['ast'], ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}")
    if p["stl"] >= 4: parts.append(f"{p['stl']} {ru_plural(p['stl'], ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}")
    if p["blk"] >= 4: parts.append(f"{p['blk']} {ru_plural(p['blk'], ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}")
    return f"{name}: " + ", ".join(parts) + hot_mark(p)

def format_player_line_special_detail(p: dict, bold=True) -> str:
    # –î—ë–º–∏–Ω / –ì–æ–ª–¥–∏–Ω ‚Äî –º–∏–Ω–∏–º—É–º 3 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
    name = initials_ru(p["name"])
    if bold: name = f"<b>{name}</b>"
    stats = [
        ("–æ—á–∫–∏", p["pts"], p["pts"]),
        ("–ø–æ–¥–±–æ—Ä", p["reb"], p["reb"]),
        ("–ø–µ—Ä–µ–¥–∞—á–∞", p["ast"], p["ast"]),
        ("–ø–µ—Ä–µ—Ö–≤–∞—Ç", p["stl"], p["stl"]),
        ("–±–ª–æ–∫-—à–æ—Ç", p["blk"], p["blk"]),
    ]
    stats = [(lab, val, raw) for (lab, val, raw) in stats if raw and raw > 0]
    stats.sort(key=lambda x: x[2], reverse=True)
    chosen = stats[:3] if len(stats) >= 3 else stats

    parts = []
    for lab, val, raw in chosen:
        if lab == "–æ—á–∫–∏":
            parts.append(f"{val} {ru_plural(val, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}")
        elif lab == "–ø–æ–¥–±–æ—Ä":
            parts.append(f"{val} {ru_plural(val, ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}")
        elif lab == "–ø–µ—Ä–µ–¥–∞—á–∞":
            parts.append(f"{val} {ru_plural(val, ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}")
        elif lab == "–ø–µ—Ä–µ—Ö–≤–∞—Ç":
            parts.append(f"{val} {ru_plural(val, ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}")
        elif lab == "–±–ª–æ–∫-—à–æ—Ç":
            parts.append(f"{val} {ru_plural(val, ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}")
    return f"{name}: " + ", ".join(parts) + hot_mark(p)

def _score_key(p: dict):
    return (p["pts"], p["reb"] + p["ast"], p["stl"] + p["blk"])

def _is_double_double(p: dict) -> bool:
    cats = [p["pts"], p["reb"], p["ast"], p["stl"], p["blk"]]
    return sum(v >= 10 for v in cats) >= 2

def second_player_condition(p: dict) -> bool:
    return (p["pts"] >= 20) or _is_double_double(p) or (p["stl"] >= 6) or (p["blk"] >= 6)

def pick_players_for_team(team_ru: str, abbr: str, rows: list[dict]) -> list[tuple[dict,bool,bool]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ (player, bold, special_detail).
      ‚Ä¢ –≤—Å–µ–≥–¥–∞ —Ç–æ–ø-—Å–∫–æ—Ä–µ—Ä;
      ‚Ä¢ —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫ (–î—ë–º–∏–Ω –¥–ª—è BKN, –ì–æ–ª–¥–∏–Ω –¥–ª—è MIA) ‚Äî –≤–∫–ª—é—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∂–∏—Ä–Ω—ã–º –∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π;
      ‚Ä¢ –≤—Ç–æ—Ä–æ–π –ø–æ —É—Å–ª–æ–≤–∏—é (–æ—á–∫–∏ ‚â•20 –ò–õ–ò –¥–∞–±–ª-–¥–∞–±–ª –ò–õ–ò STL ‚â•6 –ò–õ–ò BLK ‚â•6).
    """
    if not rows: return []
    rows = sorted(rows, key=_score_key, reverse=True)
    out: list[tuple[dict,bool,bool]] = []

    # 1) —Ç–æ–ø
    top = rows[0]

    # 2) —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫
    special_key = "–¥—ë–º–∏–Ω" if abbr == "BKN" else ("–≥–æ–ª–¥–∏–Ω" if abbr == "MIA" else None)
    special = None
    if special_key:
        for p in rows:
            if special_key in (p["name"] or "").lower():
                special = p; break

    if special and special["name"] == top["name"]:
        out.append((special, True, True))
    elif special:
        out.append((top, False, False))
        out.append((special, True, True))
    else:
        out.append((top, False, False))

    # 3) –¥–æ–ø–æ–ª–Ω–∏–º –ø–æ —É—Å–ª–æ–≤–∏—é (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç –¥–≤—É—Ö)
    if len(out) < 2:
        for p in rows[1:]:
            if p["name"] == top["name"]:
                continue
            if second_player_condition(p):
                out.append((p, False, False))
                break

    # –º–∞–∫—Å–∏–º—É–º –¥–≤–∞
    return out[:2]

# ---------- BUILD MESSAGE ----------
SEP = "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì"

def build_post() -> str:
    chosen_day = None
    games = []

    # 1) —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–Ω—ã–π –¥–µ–Ω—å —Å–æ Sports.ru
    for d in pick_candidate_days():
        links = collect_day_match_links(d)
        day_games = []
        for u in links:
            info = parse_match(u)
            if not info: 
                continue
            if not info["finished"]:
                continue
            # –æ—Ç–±—Ä–æ—Å–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –ø—É—Å—Ç—ã–µ/–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            if not info["teamA"]["abbr"] or not info["teamB"]["abbr"]:
                continue
            if info["teamA"]["abbr"] == info["teamB"]["abbr"]:
                continue
            day_games.append(info)
        if day_games:
            chosen_day = d
            games = day_games
            break

    if not chosen_day:
        chosen_day = pick_report_date()

    # 2) –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ç—á–µ–π –ø–æ ESPN (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    espn_pairs = fetch_espn_pairs(chosen_day)
    if espn_pairs:
        games = [g for g in games if frozenset({g["teamA"]["abbr"], g["teamB"]["abbr"]}) in espn_pairs]

    title = f"–ù–ë–ê ‚Ä¢ {ru_date(chosen_day)} ‚Ä¢ {len(games)} {ru_plural(len(games), ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n"
    title += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n"
    title += SEP + "\n\n"

    if not games:
        return title.rstrip()

    blocks = []
    for i, g in enumerate(games, 1):
        A, B = g["teamA"], g["teamB"]
        ot_str = "" if g["ot"] == 0 else (" (–û–¢)" if g["ot"] == 1 else f" ({g['ot']} –û–¢)")
        head = f"{A['emoji']} {A['name']}: {A['score']}\n{B['emoji']} {B['name']}: {B['score']}{ot_str}\n"

        lines = []
        rowsA = g["players"].get(A["name"], [])
        rowsB = g["players"].get(B["name"], [])

        for p, bold, special_detail in pick_players_for_team(A["name"], A["abbr"], rowsA):
            lines.append(
                format_player_line_special_detail(p, bold=True) if special_detail
                else format_player_line_regular(p, bold)
            )
        if lines: lines.append("")
        for p, bold, special_detail in pick_players_for_team(B["name"], B["abbr"], rowsB):
            lines.append(
                format_player_line_special_detail(p, bold=True) if special_detail
                else format_player_line_regular(p, bold)
            )

        # —É–¥–∞–ª–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Ç—Ä–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        lines = unique_preserve([ln for ln in lines if ln.strip()])

        blocks.append(head + ("\n".join(lines) if lines else ""))
        if i < len(games):
            blocks.append("\n" + SEP + "\n")

    return (title + "\n".join(blocks)).strip()

# ---------- TELEGRAM ----------
def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    resp = S.post(url, json={
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }, timeout=25)
    if resp.status_code != 200:
        raise RuntimeError(f"Telegram error {resp.status_code}: {resp.text}")

# ---------- MAIN ----------
if __name__ == "__main__":
    try:
        text = build_post()
        tg_send(text)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
