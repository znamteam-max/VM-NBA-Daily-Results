#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (RU)

‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Ç—á–µ–π/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ESPN (public)
  - Scoreboard: https://site.web.api.espn.com/apis/v2/sports/basketball/nba/scoreboard?dates=YYYYMMDD
  - Boxscore : https://site.web.api.espn.com/apis/v2/sports/basketball/nba/boxscore?event={eventId}

‚Ä¢ –ò–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ (—Ñ–∞–º–∏–ª–∏—è –ø–æ-—Ä—É—Å—Å–∫–∏):
  1) –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ sports.ru/basketball/person|player/{slug}/ -> –∑–∞–≥–æ–ª–æ–≤–æ–∫ -> –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ;
  2) –ø–æ–∏—Å–∫ –Ω–∞ sports.ru;
  3) —Å–ª–æ–≤–∞—Ä—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π;
  4) —Ñ–æ–ª–ª–±—ç–∫: –ª–∞—Ç–∏–Ω–∏—Ü–∞.
  –ö—ç—à: ru_map_nba.json (id –∏–≥—Ä–æ–∫–∞ ESPN -> "–§–∞–º–∏–ª–∏—è"), –æ—á–µ—Ä–µ–¥—å: ru_pending_nba.json

‚Ä¢ –§–æ—Ä–º–∞—Ç:
  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: –ù–ë–ê ‚Ä¢ {–¥–∞—Ç–∞} ‚Ä¢ {N –º–∞—Ç—á–µ–π}
  - –ü–æ –º–∞—Ç—á—É: 2 —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—á—ë—Ç–æ–º, —É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∂–∏—Ä–Ω—ã–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, —Ä—è–¥–æ–º —ç–º–æ–¥–∑–∏-–ª–æ–≥–æ—Ç–∏–ø;
  - –î–∞–ª–µ–µ 1‚Äì3 –∏–≥—Ä–æ–∫–∞ —É –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ø –ø–æ –æ—á–∫–∞–º):
      –æ—á–∫–∏ ‚Äî –≤—Å–µ–≥–¥–∞; –ø–æ–¥–±–æ—Ä—ã ‚â•5; –ø–µ—Ä–µ–¥–∞—á–∏ ‚â•5; –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã ‚â•4; –±–ª–æ–∫-—à–æ—Ç—ã ‚â•4.
"""

import os, sys, re, json, time, unicodedata
from datetime import date, datetime, timedelta
from zoneinfo import ZoneInfo
from urllib.parse import quote_plus

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup

# ---------- ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# ---------- ESPN ----------
ESPN_BASE = "https://site.web.api.espn.com/apis/v2/sports/basketball/nba"

# ---------- SPORTS.RU ----------
SPORTS_RU = "https://www.sports.ru"
SRU_PERSON = SPORTS_RU + "/basketball/person/"
SRU_PLAYER = SPORTS_RU + "/basketball/player/"
SRU_SEARCH = SPORTS_RU + "/search/?q="

# ---------- CACHE FILES ----------
RU_MAP_PATH     = "ru_map_nba.json"      # { athleteId(str): "–§–∞–º–∏–ª–∏—è" }
RU_PENDING_PATH = "ru_pending_nba.json"  # [{id, first, last}]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∫—ç—à–∞ (–ù–ï –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –≤ –∫–æ–¥–µ ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
RU_MAP: dict[str, str] = {}
RU_PENDING: list[dict] = []
_session_pending_ids: set[str] = set()

# ---------- RUSSIAN DATE ----------
RU_MONTHS = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è",
}

def ru_date(d: date) -> str:
    return f"{d.day} {RU_MONTHS[d.month]}"

def ru_plural(n: int, forms: tuple[str, str, str]) -> str:
    # –æ—á–∫–æ/–æ—á–∫–∞/–æ—á–∫–æ–≤
    n = abs(int(n)) % 100
    n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

# ---------- HTTP ----------
def make_session():
    s = requests.Session()
    r = Retry(total=6, connect=6, read=6, backoff_factor=0.6,
              status_forcelist=[429,500,502,503,504],
              allowed_methods=["GET","POST"])
    s.mount("https://", HTTPAdapter(max_retries=r))
    s.headers.update({
        "User-Agent": "NBA-DailyResultsBot/1.1 (+espn; sports.ru resolver)",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.6",
    })
    return s

S = make_session()

def _get_json(url: str) -> dict:
    r = S.get(url, timeout=25)
    if r.status_code != 200:
        return {}
    try:
        return r.json()
    except Exception:
        return {}

def log(*a): print(*a, file=sys.stderr)

# ---------- PICK DATE ----------
def pick_report_date() -> date:
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ –í–æ—Å—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –°–®–ê, –∫–∞–∫ –ø–æ –ù–ë–ê
    now_et = datetime.now(ZoneInfo("America/New_York"))
    return (now_et.date() - timedelta(days=1)) if now_et.hour < 8 else now_et.date()

# ---------- TEAM NAMES / EMOJIS ----------
TEAM_RU = {
    "ATL": ("–ê—Ç–ª–∞–Ω—Ç–∞", "ü¶Ö"),
    "BOS": ("–ë–æ—Å—Ç–æ–Ω", "‚òòÔ∏è"),
    "BKN": ("–ë—Ä—É–∫–ª–∏–Ω", "üï∏Ô∏è"),
    "CHA": ("–®–∞—Ä–ª–æ—Ç—Ç", "üêù"),
    "CHI": ("–ß–∏–∫–∞–≥–æ", "üêÇ"),
    "CLE": ("–ö–ª–∏–≤–ª–µ–Ω–¥", "üõ°Ô∏è"),
    "DAL": ("–î–∞–ª–ª–∞—Å", "üêé"),
    "DEN": ("–î–µ–Ω–≤–µ—Ä", "‚õèÔ∏è"),
    "DET": ("–î–µ—Ç—Ä–æ–π—Ç", "üîß"),
    "GSW": ("–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç", "üó°Ô∏è"),
    "HOU": ("–•—å—é—Å—Ç–æ–Ω", "üöÄ"),
    "IND": ("–ò–Ω–¥–∏–∞–Ω–∞", "üí´"),
    "LAC": ("–ö–ª–∏–ø–ø–µ—Ä—Å", "‚úÇÔ∏è"),
    "LAL": ("–õ–µ–π–∫–µ—Ä—Å", "‚≠ê"),
    "MEM": ("–ú–µ–º—Ñ–∏—Å", "üêª"),
    "MIA": ("–ú–∞–π–∞–º–∏", "üî•"),
    "MIL": ("–ú–∏–ª—É–æ–∫–∏", "ü¶å"),
    "MIN": ("–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞", "üê∫"),
    "NOP": ("–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω", "ü™∂"),
    "NYK": ("–ù—å—é-–ô–æ—Ä–∫", "üóΩ"),
    "OKC": ("–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏", "‚ö°"),
    "ORL": ("–û—Ä–ª–∞–Ω–¥–æ", "‚ú®"),
    "PHI": ("–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è", "üîî"),
    "PHX": ("–§–∏–Ω–∏–∫—Å", "‚òÄÔ∏è"),
    "POR": ("–ü–æ—Ä—Ç–ª–µ–Ω–¥", "üß≠"),
    "SAC": ("–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ", "üëë"),
    "SAS": ("–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ", "ü™ô"),
    "TOR": ("–¢–æ—Ä–æ–Ω—Ç–æ", "ü¶ñ"),
    "UTA": ("–Æ—Ç–∞", "üé∑"),
    "WAS": ("–í–∞—à–∏–Ω–≥—Ç–æ–Ω", "üßô"),
}

def team_ru_and_emoji(abbr: str) -> tuple[str,str]:
    abbr = (abbr or "").upper()
    if abbr in TEAM_RU:
        return TEAM_RU[abbr]
    return (abbr, "üèÄ")

# ---------- CACHE I/O ----------
def _load_json(path: str, default):
    if not os.path.exists(path):
        return default
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def _save_json(path: str, data):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(tmp, path)

# ---------- RU NAME RESOLVER (SURNAME ONLY) ----------
def _slugify(first: str, last: str) -> str:
    base = f"{first} {last}".strip()
    base = unicodedata.normalize("NFKD", base)
    base = "".join(ch for ch in base if not unicodedata.combining(ch))
    base = base.lower()
    base = re.sub(r"[^a-z0-9]+", "-", base).strip("-")
    return base

def _sportsru_try_profile(first: str, last: str) -> str | None:
    slug = _slugify(first, last)
    for root in (SRU_PERSON, SRU_PLAYER):
        url = root + slug + "/"
        r = S.get(url, timeout=15)
        if r.status_code == 200 and ("/basketball/person/" in r.url or "/basketball/player/" in r.url):
            return url
    return None

def _sportsru_from_profile(url: str) -> str | None:
    try:
        r = S.get(url, timeout=20)
        if r.status_code != 200:
            return None
        soup = BeautifulSoup(r.text, "html.parser")
        h = soup.find(["h1","h2"])
        if not h: return None
        full = " ".join(h.get_text(" ", strip=True).split())
        parts = [p for p in re.split(r"\s+", full) if p]
        if len(parts) >= 2:
            # —Ñ–∞–º–∏–ª–∏—è ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ¬´–ê–ª–µ–∫—Å–∞–Ω–¥–µ—Ä-–£–æ–∫–µ—Ä¬ª, —Ç.–∫. –¥–µ—Ñ–∏—Å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è)
            return parts[-1]
    except Exception:
        return None
    return None

def _sportsru_search(first: str, last: str) -> str | None:
    try:
        q = quote_plus(f"{first} {last}".strip())
        r = S.get(SRU_SEARCH + q, timeout=20)
        if r.status_code != 200: return None
        soup = BeautifulSoup(r.text, "html.parser")
        a = soup.select_one('a[href*="/basketball/person/"]') or soup.select_one('a[href*="/basketball/player/"]')
        if not a or not a.get("href"): return None
        href = a["href"]
        if href.startswith("/"): href = SPORTS_RU + href
        return _sportsru_from_profile(href)
    except Exception:
        return None

# –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (—Ñ–∞–º–∏–ª–∏—è -> —Ä—É—Å—Å–∫–∞—è —Ñ–∞–º–∏–ª–∏—è)
EXCEPT_LAST = {
    "Ingram":"–ò–Ω–≥—Ä—ç–º","Barrett":"–ë–∞—Ä—Ä–µ—Ç—Ç","Antetokounmpo":"–ê–¥–µ—Ç–æ–∫—É–º–±–æ","Anthony":"–≠–Ω—Ç–æ–Ω–∏",
    "Wagner":"–í–∞–≥–Ω–µ—Ä","Bane":"–ë—ç–π–Ω","Young":"–Ø–Ω–≥","Alexander-Walker":"–ê–ª–µ–∫—Å–∞–Ω–¥–µ—Ä-–£–æ–∫–µ—Ä",
    "Brunson":"–ë—Ä–∞–Ω—Å–æ–Ω","Towns":"–¢–∞—É–Ω—Å","Brown":"–ë—Ä–∞—É–Ω","Hauser":"–•–∞—É–∑–µ—Ä","Thomas":"–¢–æ–º–∞—Å",
    "Porter":"–ü–æ—Ä—Ç–µ—Ä","Mitchell":"–ú–∏—Ç—á–µ–ª–ª","Allen":"–ê–ª–ª–µ–Ω","Durant":"–î—é—Ä—ç–Ω—Ç","Sengun":"–®–µ–Ω–≥—é–Ω",
    "Cunningham":"–ö–∞–Ω–Ω–∏–Ω–≥–µ–º","Thompson":"–¢–æ–º–ø—Å–æ–Ω","Jackson Jr.":"–î–∂–µ–∫—Å–æ–Ω-–º–ª–∞–¥—à–∏–π","Jackson":"–î–∂–µ–∫—Å–æ–Ω",
    "Adebayor":"–ê–¥–µ–±–∞–π–æ","Adebayo":"–ê–¥–µ–±–∞–π–æ","Jovic":"–ô–æ–≤–∏—á","Williamson":"–£–∏–ª—å—è–º—Å–æ–Ω","Murphy":"–ú–µ—Ä—Ñ–∏",
    "Wembanyama":"–í–µ–º–±–∞–Ω—å—è–º–∞","Vassell":"–í–∞—Å—Å–µ–ª–ª","Davis":"–î—ç–≤–∏—Å","Flagg":"–§–ª—ç–≥–≥","George":"–î–∂–æ—Ä–¥–∂",
    "Johnson":"–î–∂–æ–Ω—Å–æ–Ω","Doncic":"–î–æ–Ω—á–∏—á","Donƒçiƒá":"–î–æ–Ω—á–∏—á","Reaves":"–†–∏–≤–∑","Edwards":"–≠–¥–≤–∞—Ä–¥—Å",
    "Randle":"–†—ç–Ω–¥–ª","Avdija":"–ê–≤–¥–∏—è","Grant":"–ì—Ä–∞–Ω—Ç","Curry":"–ö–∞—Ä—Ä–∏","Kuminga":"–ö—É–º–∏–Ω–≥–∞",
    "LaVine":"–õ–∞–≤–∏–Ω","Monk":"–ú–æ–Ω–∫","Markkanen":"–ú–∞—Ä–∫–∫–∞–Ω–µ–Ω","Harden":"–•–∞—Ä–¥–µ–Ω","Leonard":"–õ–µ–æ–Ω–∞—Ä–¥",
    "Brooks":"–ë—Ä—É–∫—Å","Booker":"–ë—É–∫–µ—Ä","Allen Jr.":"–ê–ª–ª–µ–Ω",
    "Jokic":"–ô–æ–∫–∏—á","Embiid":"–≠–º–±–∏–∏–¥","Tatum":"–¢—ç–π—Ç—É–º","Lillard":"–õ–∏–ª–ª–∞—Ä–¥","Morant":"–ú–æ—Ä–∞–Ω—Ç",
    "Irving":"–ò—Ä–≤–∏–Ω–≥","James":"–î–∂–µ–π–º—Å","Westbrook":"–£—ç—Å—Ç–±—Ä—É–∫","Paul":"–ü–æ–ª","Butler":"–ë–∞—Ç–ª–µ—Ä",
    "DeRozan":"–î–µ—Ä–æ–∑–∞–Ω","Siakam":"–°–∏–∞–∫–∞–º","VanVleet":"–í–∞–Ω–≤–ª–∏—Ç","Holiday":"–•–æ–ª–∏–¥—ç–π","Middleton":"–ú–∏–¥–¥–ª—Ç–æ–Ω",
    "Lopez":"–õ–æ–ø–µ—Å","Gobert":"–ì–æ–±–µ—Ä","Porzingis":"–ü–æ—Ä–∑–∏–Ω–≥–∏—Å","Gilgeous-Alexander":"–ì–∏–ª–¥–∂–µ—Å-–ê–ª–µ–∫—Å–∞–Ω–¥–µ—Ä",
}

def _queue_pending(pid: str, first: str, last: str):
    if not pid or pid in _session_pending_ids:
        return
    if pid in RU_MAP:
        return
    for it in RU_PENDING:
        if it.get("id") == pid:
            return
    RU_PENDING.append({"id": pid, "first": first, "last": last})
    _session_pending_ids.add(pid)

def resolve_ru_surname(first: str, last: str, athlete_id: str) -> str:
    # 0) –∫—ç—à –ø–æ id
    if athlete_id and athlete_id in RU_MAP:
        return RU_MAP[athlete_id]

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º last (—Å —É—á—ë—Ç–æ–º Jr./III)
    last_clean = last.strip()
    if last_clean in {"Jr.","Jr", "III", "II"}:
        last_clean = f"{first.strip()} {last_clean}"

    # 1) sports.ru (slug)
    url = _sportsru_try_profile(first, last)
    if url:
        ru = _sportsru_from_profile(url)
        if ru:
            return ru

    # 2) sports.ru (–ø–æ–∏—Å–∫)
    ru = _sportsru_search(first, last)
    if ru:
        return ru

    # 3) –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if last_clean in EXCEPT_LAST:
        return EXCEPT_LAST[last_clean]
    if last in EXCEPT_LAST:
        return EXCEPT_LAST[last]

    # 4) –ª–∞—Ç–∏–Ω–∏—Ü–∞ (–≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ)
    if athlete_id:
        _queue_pending(athlete_id, first, last)
    return last or first  # –≤—Ä–µ–º–µ–Ω–Ω–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞

# ---------- ESPN HELPERS ----------
def fetch_scoreboard(day: date) -> list[dict]:
    dates = day.strftime("%Y%m%d")
    j = _get_json(f"{ESPN_BASE}/scoreboard?dates={dates}")
    events = j.get("events") or []
    out = []
    for ev in events:
        try:
            st = ev.get("status", {}).get("type", {}).get("completed", False)
            if not st:
                continue  # —Ñ–∏–Ω–∞–ª—ã
            comp = (ev.get("competitions") or [])[0]
            competitors = comp.get("competitors") or []
            game = {"eventId": ev.get("id"), "competitors": []}
            for c in competitors:
                team = c.get("team") or {}
                abbr = team.get("abbreviation")
                # ESPN –∏–Ω–æ–≥–¥–∞ –æ—Ç–¥–∞—ë—Ç "GS" –≤–º–µ—Å—Ç–æ "GSW" (—Ä–µ–¥–∫–æ) ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä
                if abbr == "GS": abbr = "GSW"
                score = int(float(c.get("score", 0)))
                win = c.get("winner", False)
                rec = ""
                for recobj in c.get("records") or []:
                    if recobj.get("type") == "total" and recobj.get("summary"):
                        rec = recobj["summary"]  # "2-0"
                game["competitors"].append({
                    "abbr": abbr,
                    "score": score,
                    "winner": bool(win),
                    "record": rec or "",
                    "teamId": str(team.get("id") or ""),
                })
            if len(game["competitors"]) == 2:
                out.append(game)
        except Exception as e:
            log("[scoreboard parse] skip:", e)
    return out

def fetch_boxscore(event_id: str) -> dict:
    j = _get_json(f"{ESPN_BASE}/boxscore?event={event_id}")
    return j or {}

def parse_players_from_box(box: dict) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å teamId -> —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:
    [{"id","first","last","pts","reb","ast","stl","blk"}]
    """
    out = {}
    for t in (box.get("players") or []):
        team = t.get("team") or {}
        tid = str(team.get("id") or "")
        arr = []
        for grp in (t.get("statistics") or []):
            # grp["athletes"] —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–ª—è–º–∏ stats + athlete
            for a in (grp.get("athletes") or []):
                ath = a.get("athlete") or {}
                pid = str(ath.get("id") or "")
                name = ath.get("displayName") or ""
                # —Ä–∞–∑–±–æ—Ä –∏–º–µ–Ω–∏
                parts = [p for p in re.split(r"\s+", name.strip()) if p]
                first = parts[0] if parts else ""
                last = " ".join(parts[1:]) if len(parts) > 1 else parts[0] if parts else ""

                # –±–∞–∑–æ–≤—ã–µ —á–∏—Å–ª–∞
                stats_map = {}
                for k, v in (a.get("stats") or {}).items():
                    stats_map[k.lower()] = v
                for k, v in (ath.get("stats") or {}).items():
                    stats_map.setdefault(k.lower(), v)

                def iget(*keys, default=0):
                    for k in keys:
                        if k in stats_map:
                            try:
                                return int(stats_map[k])
                            except Exception:
                                try:
                                    return int(float(stats_map[k]))
                                except Exception:
                                    pass
                    return default

                pts = iget("points","pts")
                reb = iget("rebounds","reb","totreb","reboundstotal")
                ast = iget("assists","ast")
                stl = iget("steals","stl")
                blk = iget("blocks","blk")

                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö, –∫—Ç–æ –≤–æ–æ–±—â–µ –Ω–µ –∏–≥—Ä–∞–ª (—É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –æ—á–∫–æ–≤/–º–∏–Ω—É—Ç)
                if all(v in (None, 0) for v in [pts, reb, ast, stl, blk]):
                    continue

                arr.append({
                    "id": pid, "first": first, "last": last,
                    "pts": int(pts or 0), "reb": int(reb or 0),
                    "ast": int(ast or 0), "stl": int(stl or 0), "blk": int(blk or 0),
                })
        # –°–≤–µ–¥—ë–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º—ã –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º)
        merged = {}
        for p in arr:
            if p["id"] not in merged:
                merged[p["id"]] = p
            else:
                m = merged[p["id"]]
                for k in ("pts","reb","ast","stl","blk"):
                    m[k] = max(m[k], p[k])
        out[tid] = list(merged.values())
    return out

# ---------- PLAYER LINE BUILD ----------
def fmt_stat_line_ru(p: dict, ru_surname: str) -> str:
    pts, reb, ast, stl, blk = p["pts"], p["reb"], p["ast"], p["stl"], p["blk"]
    parts = [f"{ru_surname}: {pts} {ru_plural(pts, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"]
    if reb >= 5:
        parts.append(f"{reb} {ru_plural(reb, ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}")
    if ast >= 5:
        parts.append(f"{ast} {ru_plural(ast, ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}")
    if stl >= 4:
        parts.append(f"{stl} {ru_plural(stl, ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}")
    if blk >= 4:
        parts.append(f"{blk} {ru_plural(blk, ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}")
    return ", ".join(parts)

# ---------- GAME BLOCK ----------
def build_game_block(game: dict) -> str:
    comp = game["competitors"]
    if len(comp) != 2:
        return ""
    a, b = comp[0], comp[1]
    # —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º —ç–º–æ–¥–∑–∏/–Ω–∞–∑–≤–∞–Ω–∏–µ
    name_a, emo_a = team_ru_and_emoji(a["abbr"])
    name_b, emo_b = team_ru_and_emoji(b["abbr"])

    def score_line(cname, cemo, score, record, is_winner):
        s = f"<b>{score}</b>" if is_winner else f"{score}"
        rec = f" ({record})" if record else ""
        return f"{cemo} {cname}: {s}{rec}"

    head = score_line(name_a, emo_a, a["score"], a["record"], a["winner"]) + "\n" + \
           score_line(name_b, emo_b, b["score"], b["record"], b["winner"]) + "\n\n"

    # –∏–≥—Ä–æ–∫–∏
    box = fetch_boxscore(game["eventId"])
    players_by_team = parse_players_from_box(box)

    body_lines = []

    # –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã: –±–µ—Ä—ë–º –¢–û–ü-3 –ø–æ –æ—á–∫–∞–º
    def team_players_lines(team_obj):
        tid = team_obj["teamId"]
        plist = players_by_team.get(tid, [])
        plist.sort(key=lambda x: (x["pts"], x["reb"], x["ast"]), reverse=True)
        top = plist[:3]
        lines = []
        for p in top:
            ru_surname = resolve_ru_surname(p["first"], p["last"], p["id"])
            line = fmt_stat_line_ru(p, ru_surname)
            lines.append(line)
        return lines

    body_lines += team_players_lines(a)
    if body_lines: body_lines.append("")  # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
    body_lines += team_players_lines(b)

    return head + "\n".join([l for l in body_lines if l.strip()])

# ---------- POST ----------
def build_post(day: date) -> str:
    games = fetch_scoreboard(day)
    title = f"–ù–ë–ê ‚Ä¢ {ru_date(day)} ‚Ä¢ {len(games)} {ru_plural(len(games), ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n"
    title += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n"
    title += "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n\n"

    blocks = []
    for i, g in enumerate(games, 1):
        try:
            blk = build_game_block(g)
            if blk.strip():
                blocks.append(blk)
            else:
                blocks.append("‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ç—á—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            log("[game block error]", e)
            blocks.append("‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ç—á—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        if i < len(games):
            blocks.append("‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì")

    return (title + "\n".join(blocks)).strip()

# ---------- TELEGRAM ----------
def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

    MAX = 3500
    t = text
    parts = []
    while t:
        if len(t) <= MAX:
            parts.append(t); break
        cut = t.rfind("\n\n", 0, MAX)
        if cut == -1: cut = MAX
        parts.append(t[:cut]); t = t[cut:].lstrip()

    for part in parts:
        resp = S.post(url, json={
            "chat_id": CHAT_ID,
            "text": part,
            "parse_mode": "HTML",
            "disable_web_page_preview": True,
        }, timeout=25)
        if resp.status_code != 200:
            raise RuntimeError(f"Telegram error {resp.status_code}: {resp.text}")
        time.sleep(0.3)

# ---------- MAIN ----------
if __name__ == "__main__":
    try:
        # –∑–∞–≥—Ä—É–∑–∏–º –∫—ç—à–∏ –ë–ï–ó –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        loaded_map = _load_json(RU_MAP_PATH, {})
        loaded_pending = _load_json(RU_PENDING_PATH, [])

        RU_MAP.clear()
        RU_MAP.update(loaded_map)

        RU_PENDING.clear()
        RU_PENDING.extend(loaded_pending)

        day = pick_report_date()
        text = build_post(day)
        tg_send(text)

        # —Å–æ—Ö—Ä–∞–Ω–∏–º –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ)
        _save_json(RU_PENDING_PATH, RU_PENDING)
        _save_json(RU_MAP_PATH, RU_MAP)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
