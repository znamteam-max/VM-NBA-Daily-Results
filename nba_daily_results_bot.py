#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (RU) ‚Äî Sports.ru only

‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: Sports.ru
  - –î–µ–Ω—å:   https://www.sports.ru/stat/basketball/center/end/YYYY/MM/DD.html
  - –ú–∞—Ç—á:   https://www.sports.ru/basketball/match/<slug>/
  - –í –º–∞—Ç—á–µ –ø–∞—Ä—Å–∏–º:
      * –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (—Ä—É—Å)
      * —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç + –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ç–≤–µ—Ä—Ç–µ–π/–û–¢ ‚Üí –ø–æ–º–µ—Ç–∫–∞ (–û–¢/N –û–¢)
      * 2 —Ç–∞–±–ª–∏—Ü—ã ¬´<–ö–æ–º–∞–Ω–¥–∞>. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤¬ª ‚Üí —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∏ –û/–ü–ë/–ê–ü/–ü–•/–ë–®

‚Ä¢ –í—ã–≤–æ–¥:
  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: –ù–ë–ê ‚Ä¢ {–¥–∞—Ç–∞} ‚Ä¢ {N –º–∞—Ç—á–µ–π}
  - –ë–ª–æ–∫ –Ω–∞ –º–∞—Ç—á:
      <—ç–º–æ–¥–∑–∏> <–ö–æ–º–∞–Ω–¥–∞ A>: <—Å—á—ë—Ç A> [ (N –û–¢) ]
      <—ç–º–æ–¥–∑–∏> <–ö–æ–º–∞–Ω–¥–∞ B>: <—Å—á—ë—Ç B>
      <–∏–≥—Ä–æ–∫–∏ A, 1‚Äì2 —Å—Ç—Ä–æ–∫–∏>
      <–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞>
      <–∏–≥—Ä–æ–∫–∏ B, 1‚Äì2 —Å—Ç—Ä–æ–∫–∏>
  - –ò–≥—Ä–æ–∫–∏: –º–∏–Ω–∏–º—É–º 1 (—Ç–æ–ø –ø–æ –æ—á–∫–∞–º), –º–∞–∫—Å–∏–º—É–º 2 (–µ—Å–ª–∏ ¬´–≤—ã–¥–∞—é—â–∏–π—Å—è¬ª):
        –≤—ã–¥–∞—é—â–∏–π—Å—è: –æ—á–∫–∏ ‚â• 30 –ò–õ–ò –ø–æ–¥–±–æ—Ä—ã ‚â• 12 –ò–õ–ò –ø–µ—Ä–µ–¥–∞—á–∏ ‚â• 10 –ò–õ–ò –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã ‚â• 4 –ò–õ–ò –±–ª–æ–∫-—à–æ—Ç—ã ‚â• 4
      * –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ ¬´—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ¬ª:
          –ø–æ–¥–±–æ—Ä—ã ‚â• 5, –ø–µ—Ä–µ–¥–∞—á–∏ ‚â• 5, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã ‚â• 4, –±–ª–æ–∫-—à–æ—Ç—ã ‚â• 4
      * ¬´–û–≥–æ–Ω—ë–∫¬ª üî• —Å—Ç–∞–≤–∏–º, –µ—Å–ª–∏ –æ—á–∫–∏ ‚â• 35 –∏–ª–∏ –ø–æ–¥–±–æ—Ä—ã ‚â• 15 –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á–∏ ‚â• 12 –∏–ª–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã ‚â• 5 –∏–ª–∏ –±–ª–æ–∫-—à–æ—Ç—ã ‚â• 5
      * –ò–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–ò. –§–∞–º–∏–ª–∏—è¬ª (—Ä—É—Å—Å–∫–∞—è —Ñ–∞–º–∏–ª–∏—è —Å Sports.ru).
      * –°–ø–µ—Ü-–ø—Ä–∞–≤–∏–ª–æ: —É ¬´–ë—Ä—É–∫–ª–∏–Ω¬ª (BKN) –≤–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å —Ñ–∞–º–∏–ª–∏–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π ¬´–î—ë–º–∏–Ω¬ª (–∂–∏—Ä–Ω—ã–º), —É ¬´–ú–∞–π–∞–º–∏¬ª (MIA) ‚Äî ¬´–ì–æ–ª–¥–∏–Ω¬ª.

‚Ä¢ –ö–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏:
  - –ï—Å–ª–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ TELEGRAM –¥–æ–±–∞–≤–ª–µ–Ω –ø–∞–∫ got_ball_team, –ø–æ–ª–æ–∂–∏—Ç–µ JSON –≤ TEAM_EMOJI_JSON: {"BOS":"üü©‚Ä¶", ...}
  - –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç-—ç–º–æ–¥–∑–∏.

‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
"""

import os, sys, re, json, time, unicodedata
from datetime import date, datetime, timedelta
from zoneinfo import ZoneInfo

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup

# ---------- ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: JSON —Å –∫–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏ –ø–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞–º –ù–ë–ê (–∏–∑ –≤–∞—à–µ–≥–æ –ø–∞–∫–∞)
_TEAM_EMOJI_JSON = os.getenv("TEAM_EMOJI_JSON", "").strip()

# ---------- HTTP ----------
def make_session():
    s = requests.Session()
    r = Retry(total=6, connect=6, read=6, backoff_factor=0.6,
              status_forcelist=[429,500,502,503,504],
              allowed_methods=["GET","POST"])
    s.mount("https://", HTTPAdapter(max_retries=r))
    s.headers.update({
        "User-Agent": "NBA-DailyResultsBot/2.0 (Sports.ru-only)",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.6",
    })
    return s

S = make_session()

# ---------- DATE / RU ----------
RU_MONTHS = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è",
}
def ru_date(d: date) -> str:
    return f"{d.day} {RU_MONTHS[d.month]}"

def ru_plural(n: int, forms: tuple[str, str, str]) -> str:
    n = abs(int(n)) % 100; n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

def pick_report_date() -> date:
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –≤ –õ–æ–Ω–¥–æ–Ω–µ —É–∂–µ —É—Ç—Ä–æ
    now = datetime.now(ZoneInfo("Europe/London"))
    base = now.date()
    if now.hour < 11:  # –¥–æ –ø–æ–ª—É–¥–Ω—è –±–µ—Ä—ë–º –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        base = base - timedelta(days=1)
    return base

def pick_candidate_days() -> list[date]:
    base = pick_report_date()
    return [base, base - timedelta(days=1), base - timedelta(days=2)]

# ---------- TEAMS / EMOJI ----------
TEAM_RU_TO_ABBR = {
    "–ê—Ç–ª–∞–Ω—Ç–∞":"ATL","–ë–æ—Å—Ç–æ–Ω":"BOS","–ë—Ä—É–∫–ª–∏–Ω":"BKN","–®–∞—Ä–ª–æ—Ç—Ç":"CHA","–ß–∏–∫–∞–≥–æ":"CHI",
    "–ö–ª–∏–≤–ª–µ–Ω–¥":"CLE","–î–∞–ª–ª–∞—Å":"DAL","–î–µ–Ω–≤–µ—Ä":"DEN","–î–µ—Ç—Ä–æ–π—Ç":"DET","–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç":"GSW",
    "–•—å—é—Å—Ç–æ–Ω":"HOU","–ò–Ω–¥–∏–∞–Ω–∞":"IND","–ö–ª–∏–ø–ø–µ—Ä—Å":"LAC","–õ–µ–π–∫–µ—Ä—Å":"LAL","–ú–µ–º—Ñ–∏—Å":"MEM",
    "–ú–∞–π–∞–º–∏":"MIA","–ú–∏–ª—É–æ–∫–∏":"MIL","–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞":"MIN","–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω":"NOP","–ù—å—é-–ô–æ—Ä–∫":"NYK",
    "–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏":"OKC","–û—Ä–ª–∞–Ω–¥–æ":"ORL","–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è":"PHI","–§–∏–Ω–∏–∫—Å":"PHX","–ü–æ—Ä—Ç–ª–µ–Ω–¥":"POR",
    "–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ":"SAC","–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ":"SAS","–¢–æ—Ä–æ–Ω—Ç–æ":"TOR","–Æ—Ç–∞":"UTA","–í–∞—à–∏–Ω–≥—Ç–æ–Ω":"WAS",
}
# –î–µ—Ñ–æ–ª—Ç-—ç–º–æ–¥–∑–∏ (–µ—Å–ª–∏ TEAM_EMOJI_JSON –Ω–µ –∑–∞–¥–∞–Ω)
TEAM_EMOJI_FALLBACK = {
    "ATL":"ü¶Ö","BOS":"‚òòÔ∏è","BKN":"üï∏Ô∏è","CHA":"üêù","CHI":"üêÇ","CLE":"üõ°Ô∏è","DAL":"üêé","DEN":"‚õèÔ∏è","DET":"üîß",
    "GSW":"üó°Ô∏è","HOU":"üöÄ","IND":"üí´","LAC":"‚úÇÔ∏è","LAL":"‚≠ê","MEM":"üêª","MIA":"üî•","MIL":"ü¶å","MIN":"üê∫",
    "NOP":"ü™∂","NYK":"üóΩ","OKC":"‚ö°","ORL":"‚ú®","PHI":"üîî","PHX":"‚òÄÔ∏è","POR":"üß≠","SAC":"üëë","SAS":"ü™ô",
    "TOR":"ü¶ñ","UTA":"üé∑","WAS":"üßô",
}

def load_team_emoji_map() -> dict[str,str]:
    if _TEAM_EMOJI_JSON:
        try:
            m = json.loads(_TEAM_EMOJI_JSON)
            if isinstance(m, dict):
                return {k.upper(): str(v) for k, v in m.items()}
        except Exception:
            pass
    return TEAM_EMOJI_FALLBACK

TEAM_EMOJI = load_team_emoji_map()

def team_emoji_by_ru(team_ru: str) -> str:
    abbr = TEAM_RU_TO_ABBR.get((team_ru or "").strip(), "")
    return TEAM_EMOJI.get(abbr, "üèÄ")

# ---------- FETCH UTILS ----------
def get_html(url: str) -> BeautifulSoup | None:
    r = S.get(url, timeout=25)
    if r.status_code != 200:
        return None
    return BeautifulSoup(r.text, "lxml")

def day_url(d: date) -> str:
    return f"https://www.sports.ru/stat/basketball/center/end/{d:%Y/%m/%d}.html"

def collect_day_match_links(d: date) -> list[str]:
    """
    –°–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–Ω—è —Å–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –º–∞—Ç—á–∏ (–≤–∫–ª—é—á–∞—è –Ω–µ –ù–ë–ê), –∑–∞—Ç–µ–º
    —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞—Ç—á–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º ¬´–ù–ë–ê¬ª –∏ ¬´–∑–∞–≤–µ—Ä—à–µ–Ω¬ª.
    –ë–µ—Ä—ë–º –∏–º–µ–Ω–Ω–æ —Å—Å—ã–ª–∫–∏ —Å–æ —Å—á—ë—Ç–æ–º ‚Äî —ç—Ç–æ —É—Å—Ç–æ–π—á–∏–≤—ã–π —Å–ø–æ—Å–æ–±.
    """
    soup = get_html(day_url(d))
    if not soup: return []
    links = []
    for a in soup.find_all("a", href=True):
        href = a["href"]
        txt = a.get_text(" ", strip=True)
        if not href.startswith("/basketball/match/"):
            continue
        # —É "—Å—Å—ã–ª–∫–∞-—Å—á—ë—Ç" —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "NNN : NNN"
        if re.search(r"\d+\s:\s\d+", txt):
            full = "https://www.sports.ru" + href if href.startswith("/") else href
            links.append(full)
    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    seen = set(); out = []
    for u in links:
        if u not in seen:
            seen.add(u); out.append(u)
    return out

# ---------- PARSE MATCH ----------
def parse_match(url: str) -> dict | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    {
      "url": ...,
      "tour": "–ù–ë–ê",
      "finished": True/False,
      "teamA": {"name":"–ò–Ω–¥–∏–∞–Ω–∞","abbr":"IND","emoji":"...","score":135},
      "teamB": {"name":"–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏","abbr":"OKC","emoji":"...","score":141},
      "ot": 0|1|2|...,
      "players": {
          "–ò–Ω–¥–∏–∞–Ω–∞": [ {name, pts, reb, ast, stl, blk}, ... ],
          "–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏": [...]
      }
    }
    """
    soup = get_html(url)
    if not soup: return None

    page_text = soup.get_text(" ", strip=True)

    # —Ç—É—Ä–Ω–∏—Ä
    tour = None
    # –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–æ —Ö–ª–µ–±–Ω—ã–º –∫—Ä–æ—à–∫–∞–º/—Ç–µ–≥–∞–º
    for a in soup.find_all("a"):
        t = (a.get_text(" ", strip=True) or "").strip()
        if t == "–ù–ë–ê":
            tour = t
            break

    # –∫–æ–º–∞–Ω–¥—ã (–∑–∞–≥–æ–ª–æ–≤–∫–∏ "## <–ö–æ–º–∞–Ω–¥–∞>")
    h2s = [h.get_text(" ", strip=True) for h in soup.find_all(["h2","h1"])]
    team_names = [t for t in h2s if t and t not in {"–û–Ω–ª–∞–π–Ω", "–í–∏–¥–µ–æ"} and len(t) <= 40]
    # –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—ã—á–Ω–æ –ø–æ–¥—Ä—è–¥: "<–ö–æ–º–∞–Ω–¥–∞ A>", "<–ö–æ–º–∞–Ω–¥–∞ B>"
    teamA = team_names[0] if len(team_names) >= 2 else None
    # –ò–Ω–æ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ h2 ‚Äî –Ω–µ —Ç–æ, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –±–ª–æ–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏
    # –Ω–æ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ:
    teamB = team_names[1] if len(team_names) >= 2 else None

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç
    m_score = re.search(r"(\d+)\s:\s(\d+)", page_text)
    if not (teamA and teamB and m_score):
        return None

    scoreA = int(m_score.group(1))
    scoreB = int(m_score.group(2))

    # –ø–æ—Å–ª–µ–º–∞—Ç—á–µ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    finished = "–∑–∞–≤–µ—Ä—à–µ–Ω" in page_text.lower()

    # –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª-–≤–∞ –æ–≤–µ—Ä—Ç–∞–π–º–æ–≤: –∏—â–µ–º –ø–∞—Ä—ã "NN : NN" —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞
    after = page_text[m_score.end(): m_score.end()+200]
    pairs = re.findall(r"\d+\s:\s\d+", after)
    ot = max(len(pairs) - 4, 0) if pairs else 0

    # –ø–∞—Ä—Å–∏–º 2 —Ç–∞–±–ª–∏—Ü—ã ¬´<–ö–æ–º–∞–Ω–¥–∞>. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤¬ª
    players_by_team: dict[str, list[dict]] = {}

    for h3 in soup.find_all(["h3","h4"]):
        title = h3.get_text(" ", strip=True).lower()
        if "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤" not in title:
            continue
        # –∏–º—è –∫–æ–º–∞–Ω–¥—ã ‚Äî –¥–æ —Ç–æ—á–∫–∏
        raw = h3.get_text(" ", strip=True)
        team_name = raw.split(".")[0].strip()

        table = h3.find_next("table")
        if not table:
            continue
        rows = []
        for tr in table.find_all("tr"):
            tds = [td.get_text(" ", strip=True) for td in tr.find_all(["td","th"])]
            if not tds or "–ò–≥—Ä–æ–∫" in tds[0]:
                continue
            # –≤—ã—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ
            tds = [x for x in tds if x]
            # –∏—â–µ–º —è—á–µ–π–∫—É —Å –∏–º–µ–Ω–µ–º (–ø–µ—Ä–≤–∞—è ¬´–Ω–µ —á–∏—Å—Ç–æ —á–∏—Å–ª–æ–≤–∞—è¬ª –∏ –±–µ–∑ ¬´/¬ª)
            name_idx = None
            for i, cell in enumerate(tds[:3]):  # –∏–º—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–≤—ã—Ö —è—á–µ–π–∫–∞—Ö
                if re.search(r"[^\d/:% ]", cell):  # —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã/–∫–∏—Ä–∏–ª–ª–∏—Ü—É
                    name_idx = i
                    break
            if name_idx is None:
                continue
            name = tds[name_idx]

            nums = tds[name_idx+1:]
            # –æ–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 14 —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏
            if len(nums) < 14:
                continue

            def as_int(x: str) -> int:
                try:
                    # ¬´6/11¬ª, ¬´45:07¬ª –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–∞–¥–∞—Ç—å
                    return int(x)
                except Exception:
                    try:
                        return int(float(x))
                    except Exception:
                        return 0

            pts = as_int(nums[0])
            reb = as_int(nums[7])
            ast = as_int(nums[8])
            stl = as_int(nums[10])
            blk = as_int(nums[12])

            rows.append({
                "name": name, "pts": pts, "reb": reb, "ast": ast, "stl": stl, "blk": blk
            })

        if rows:
            players_by_team[team_name] = rows

    def abbr_of(team_ru: str) -> str:
        return TEAM_RU_TO_ABBR.get(team_ru, "")

    return {
        "url": url,
        "tour": tour,
        "finished": finished,
        "teamA": {"name": teamA, "abbr": abbr_of(teamA), "emoji": team_emoji_by_ru(teamA), "score": scoreA},
        "teamB": {"name": teamB, "abbr": abbr_of(teamB), "emoji": team_emoji_by_ru(teamB), "score": scoreB},
        "ot": ot,
        "players": players_by_team
    }

# ---------- PICK PLAYERS / FORMAT ----------
def initials_ru(full_name: str) -> str:
    # ¬´–ò–º—è –§–∞–º–∏–ª–∏—è [–º–ª./—Å—Ç.]¬ª ‚Üí ¬´–ò. –§–∞–º–∏–ª–∏—è[ –º–ª.]¬ª
    parts = [p for p in re.split(r"\s+", (full_name or "").strip()) if p]
    if len(parts) == 0:
        return full_name or ""
    if len(parts) == 1:
        return parts[0]
    first = parts[0]
    # –§–∞–º–∏–ª–∏—è ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ; –µ—Å–ª–∏ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ¬´–º–ª.¬ª/¬´—Å—Ç.¬ª, –±–µ—Ä—ë–º –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    suffixes = {"–º–ª.", "—Å—Ç."}
    if parts[-1].lower() in suffixes and len(parts) >= 3:
        surname = parts[-2] + " " + parts[-1]
    else:
        surname = parts[-1]
    initial = (first[0] + ".") if first else ""
    return f"{initial} {surname}"

def is_standout(p: dict) -> bool:
    return (p["pts"] >= 30) or (p["reb"] >= 12) or (p["ast"] >= 10) or (p["stl"] >= 4) or (p["blk"] >= 4)

def hot_mark(p: dict) -> str:
    if (p["pts"] >= 35) or (p["reb"] >= 15) or (p["ast"] >= 12) or (p["stl"] >= 5) or (p["blk"] >= 5):
        return " üî•"
    return ""

def format_line_for_player(p: dict, bold: bool=False) -> str:
    # –ü–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ ¬´–∑–Ω–∞—á–∏–º—ã–µ¬ª —Å—Ç–∞—Ç–ø—É–Ω–∫—Ç—ã
    pts = p["pts"]
    parts = [f"{pts} {ru_plural(pts, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"]
    if p["reb"] >= 5:
        parts.append(f"{p['reb']} {ru_plural(p['reb'], ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}")
    if p["ast"] >= 5:
        parts.append(f"{p['ast']} {ru_plural(p['ast'], ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}")
    if p["stl"] >= 4:
        parts.append(f"{p['stl']} {ru_plural(p['stl'], ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}")
    if p["blk"] >= 4:
        parts.append(f"{p['blk']} {ru_plural(p['blk'], ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}")

    name = initials_ru(p["name"])
    if bold:
        name = f"<b>{name}</b>"
    return f"{name}: " + ", ".join(parts) + hot_mark(p)

def pick_players_for_team(team_ru: str, abbr: str, rows: list[dict]) -> list[tuple[dict,bool]]:
    """
    –í—ã–±–∏—Ä–∞–µ–º 1‚Äì2 —Å—Ç—Ä–æ–∫–∏:
      ‚Ä¢ –≤—Å–µ–≥–¥–∞ —Ç–æ–ø –ø–æ –æ—á–∫–∞–º
      ‚Ä¢ –≤—Ç–æ—Ä–æ–π ‚Äî –µ—Å–ª–∏ ¬´–≤—ã–¥–∞—é—â–∏–π—Å—è¬ª
      ‚Ä¢ —Å–ø–µ—Ü-–ø—Ä–∞–≤–∏–ª–æ: BKN ‚Üí —Ñ–∞–º–∏–ª–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç ¬´–î—ë–º–∏–Ω¬ª, MIA ‚Üí ¬´–ì–æ–ª–¥–∏–Ω¬ª (–∂–∏—Ä–Ω—ã–º)
    """
    if not rows: return []
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º, –∑–∞—Ç–µ–º –ø–æ (REB+AST)
    rows = sorted(rows, key=lambda p: (p["pts"], p["reb"]+p["ast"]), reverse=True)
    out: list[tuple[dict,bool]] = []

    top = rows[0]
    out.append((top, False))

    # —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫
    special_name = None
    if abbr == "BKN":
        special_name = "–¥—ë–º–∏–Ω"
    elif abbr == "MIA":
        special_name = "–≥–æ–ª–¥–∏–Ω"

    special = None
    if special_name:
        for p in rows:
            if special_name in (p["name"] or "").lower():
                special = p
                break
        if special and special["name"] != top["name"]:
            out.append((special, True))

    # –≤—Ç–æ—Ä–æ–π ¬´–≤—ã–¥–∞—é—â–∏–π—Å—è¬ª, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–≤–æ–∏—Ö
    if len(out) < 2:
        for p in rows[1:]:
            if is_standout(p):
                # –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
                if all(p["name"] != x[0]["name"] for x in out):
                    out.append((p, False))
                    break

    return out

# ---------- BUILD MESSAGE ----------
SEP = "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì"

def build_post() -> str:
    chosen_day = None
    games: list[dict] = []

    # –∏—â–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å –º–∞—Ç—á–∞–º–∏ –ù–ë–ê —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    for d in pick_candidate_days():
        links = collect_day_match_links(d)
        day_games = []
        for u in links:
            info = parse_match(u)
            if not info: continue
            if info["tour"] != "–ù–ë–ê":  # —Ñ–∏–ª—å—Ç—Ä ‚Äî —Ç–æ–ª—å–∫–æ –ù–ë–ê
                continue
            if not info["finished"]:
                continue
            day_games.append(info)
        if day_games:
            chosen_day = d
            games = day_games
            break

    if not chosen_day:
        # —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∂–µ–º –±–∞–∑–æ–≤—É—é –¥–∞—Ç—É (0 –º–∞—Ç—á–µ–π)
        chosen_day = pick_report_date()

    title = f"–ù–ë–ê ‚Ä¢ {ru_date(chosen_day)} ‚Ä¢ {len(games)} {ru_plural(len(games), ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n"
    title += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n"
    title += SEP + "\n\n"

    if not games:
        return title.rstrip()

    blocks = []
    for i, g in enumerate(games, 1):
        A = g["teamA"]; B = g["teamB"]
        ot_str = ""
        if g["ot"] > 0:
            if g["ot"] == 1:
                ot_str = " (–û–¢)"
            else:
                ot_str = f" ({g['ot']} –û–¢)"
        head = f"{A['emoji']} {A['name']}: {A['score']}\n{B['emoji']} {B['name']}: {B['score']}{ot_str}\n"

        # –∏–≥—Ä–æ–∫–∏
        lines = []
        rowsA = g["players"].get(A["name"], [])
        rowsB = g["players"].get(B["name"], [])

        for p, bold in pick_players_for_team(A["name"], A["abbr"], rowsA):
            lines.append(format_line_for_player(p, bold))
        if lines: lines.append("")  # —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        for p, bold in pick_players_for_team(B["name"], B["abbr"], rowsB):
            lines.append(format_line_for_player(p, bold))

        block = head + ("\n".join(lines) if lines else "")
        blocks.append(block)

        if i < len(games):
            blocks.append("\n" + SEP + "\n")

    return (title + "\n".join(blocks)).strip()

# ---------- TELEGRAM ----------
def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    resp = S.post(url, json={
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }, timeout=25)
    if resp.status_code != 200:
        raise RuntimeError(f"Telegram error {resp.status_code}: {resp.text}")

# ---------- MAIN ----------
if __name__ == "__main__":
    try:
        text = build_post()
        tg_send(text)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
