#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (RU)  ‚Äî SPORTS.RU ONLY

–î–µ–ª–∞–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ù–ë–ê –∑–∞ –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å:
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –º–∞—Ç—á–µ–π –∏ –±–æ–∫—Å–∫–æ—Ä–æ–≤: sports.ru (–∏—Ç–æ–≥–∏ –¥–Ω—è + —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—á–µ–π)
  - –î–µ–Ω—å: https://www.sports.ru/stat/basketball/center/end/YYYY/MM/DD.html
  - –ú–∞—Ç—á: https://www.sports.ru/basketball/match/{slug}/

–§–æ—Ä–º–∞—Ç –∏–≥—Ä–æ–∫–∞:
  ¬´–ò. –§–∞–º–∏–ª–∏—è: N –æ—á–∫–æ–≤[, X –ø–æ–¥–±–æ—Ä–æ–≤][, Y –ø–µ—Ä–µ–¥–∞—á][, Z –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞][, T –±–ª–æ–∫-—à–æ—Ç–æ–≤] [üî•]¬ª
–ü—Ä–∞–≤–∏–ª–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:
  - –ø–æ–¥–±–æ—Ä—ã ‚â• 5, –ø–µ—Ä–µ–¥–∞—á–∏ ‚â• 5,
  - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã ‚â• 4 (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º), –±–ª–æ–∫-—à–æ—Ç—ã ‚â• 4 (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
–í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤:
  - 1..2 –ª—É—á—à–∏—Ö —É –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ ‚Äú–≤–∫–ª–∞–¥—É‚Äù (pts*2 + reb + ast + stl*2 + blk*2)
  - –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞—Ç—å –î—ë–º–∏–Ω–∞ (–ë—Ä—É–∫–ª–∏–Ω) –∏ –ì–æ–ª–¥–∏–Ω–∞ (–ú–∞–π–∞–º–∏), –µ—Å–ª–∏ –æ–Ω–∏ –∏–≥—Ä–∞–ª–∏ (–∂–∏—Ä–Ω—ã–º).
–û–¢:
  - —Å—á–∏—Ç–∞–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ä ¬´N : N¬ª –≤ —Ä–∞–∑–±–∏–≤–∫–µ –ø–æ —á–µ—Ç–≤–µ—Ä—Ç—è–º (>4 ‚Üí n–û–¢).

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: requests, beautifulsoup4, lxml
"""

import os, sys, re, json, time, unicodedata
from dataclasses import dataclass
from datetime import date, datetime, timedelta
from zoneinfo import ZoneInfo
from urllib.parse import urljoin

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup

# ---------------------- ENV ----------------------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# ---------------------- CONST --------------------
BASE = "https://www.sports.ru"
DAY_URL = BASE + "/stat/basketball/center/end/{yyyy}/{mm}/{dd}.html"

RU_MONTHS = {
    1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
    7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"
}

# –≠–º–æ–¥–∑–∏ –∫–æ–º–∞–Ω–¥. –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ –∫–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–±–æ—Ä–∞ t.me/addemoji/got_ball_team.
TEAM_EMO = {
    "–ê—Ç–ª–∞–Ω—Ç–∞": "ü¶Ö", "–ë–æ—Å—Ç–æ–Ω": "‚òòÔ∏è", "–ë—Ä—É–∫–ª–∏–Ω": "üï∏Ô∏è", "–®–∞—Ä–ª–æ—Ç—Ç": "üêù",
    "–ß–∏–∫–∞–≥–æ": "üêÇ", "–ö–ª–∏–≤–ª–µ–Ω–¥": "üõ°Ô∏è", "–î–∞–ª–ª–∞—Å": "üêé", "–î–µ–Ω–≤–µ—Ä": "‚õèÔ∏è",
    "–î–µ—Ç—Ä–æ–π—Ç": "üîß", "–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç": "üó°Ô∏è", "–•—å—é—Å—Ç–æ–Ω": "üöÄ", "–ò–Ω–¥–∏–∞–Ω–∞": "üí´",
    "–ö–ª–∏–ø–ø–µ—Ä—Å": "‚úÇÔ∏è", "–õ–µ–π–∫–µ—Ä—Å": "‚≠êÔ∏è", "–ú–µ–º—Ñ–∏—Å": "üêª", "–ú–∞–π–∞–º–∏": "üî•",
    "–ú–∏–ª—É–æ–∫–∏": "ü¶å", "–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞": "üê∫", "–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω": "ü™∂", "–ù—å—é-–ô–æ—Ä–∫": "üóΩ",
    "–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏": "‚ö°", "–û—Ä–ª–∞–Ω–¥–æ": "‚ú®", "–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è": "üîî", "–§–∏–Ω–∏–∫—Å": "‚òÄÔ∏è",
    "–ü–æ—Ä—Ç–ª–µ–Ω–¥": "üß≠", "–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ": "üëë", "–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ": "ü™ô", "–¢–æ—Ä–æ–Ω—Ç–æ": "ü¶ñ",
    "–Æ—Ç–∞": "üé∑", "–í–∞—à–∏–Ω–≥—Ç–æ–Ω": "üßô",
}
EMO_FALLBACK = "üèÄ"

# –°–ø–µ—Ü-–∏–≥—Ä–æ–∫–∏ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –∏–≥—Ä–∞–ª–∏)
FORCE_BY_TEAM = {
    "–ë—Ä—É–∫–ª–∏–Ω": "–î—ë–º–∏–Ω",   # –ï–≥–æ—Ä –î—ë–º–∏–Ω
    "–ú–∞–π–∞–º–∏":   "–ì–æ–ª–¥–∏–Ω", # (–ø—Ä–∏–º–µ—Ä: –ì–æ–ª–¥–∏–Ω; –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–∞ sports.ru)
}

# ---------------------- HTTP ---------------------
def make_session():
    s = requests.Session()
    r = Retry(total=6, connect=6, read=6, backoff_factor=0.7,
              status_forcelist=[429,500,502,503,504],
              allowed_methods=["GET","POST"])
    s.mount("https://", HTTPAdapter(max_retries=r))
    s.headers.update({
        "User-Agent":"NBA-DailyResults-SportsRu/1.0 (+https://www.sports.ru)",
        "Accept-Language":"ru-RU,ru;q=0.9,en;q=0.5",
    })
    return s

S = make_session()

def get(url, timeout=25):
    r = S.get(url, timeout=timeout)
    r.raise_for_status()
    return r

# ---------------------- DATES --------------------
def ru_date(d: date) -> str:
    return f"{d.day} {RU_MONTHS[d.month]}"

def pick_report_date_et() -> date:
    """
    –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤ –ù—å—é-–ô–æ—Ä–∫–µ –¥–æ 08:00, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—Ç—á—ë—Ç–Ω—ã–π –¥–µ–Ω—å ‚Äî –≤—á–µ—Ä–∞ (–∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å –µ—â—ë ¬´–∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è¬ª).
    """
    now_et = datetime.now(ZoneInfo("America/New_York"))
    return (now_et.date() - timedelta(days=1)) if now_et.hour < 8 else now_et.date()

def best_day_page(target_et: date) -> tuple[date, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ä–µ–∞–ª—å–Ω–∞—è_–¥–∞—Ç–∞ –¥–ª—è sports.ru, url –¥–Ω—è), –≤—ã–±–∏—Ä–∞—è –∏–∑ [target, target-1, target+1]
    —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≥–¥–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞—Ç—á–∏ –ù–ë–ê.
    """
    candidates = [target_et, target_et - timedelta(days=1), target_et + timedelta(days=1)]
    best = (target_et, DAY_URL.format(yyyy=target_et.year, mm=f"{target_et.month:02}", dd=f"{target_et.day:02}"))
    best_count = -1
    for d in candidates:
        url = DAY_URL.format(yyyy=d.year, mm=f"{d.month:02}", dd=f"{d.day:02}")
        try:
            soup = BeautifulSoup(get(url).text, "lxml")
        except Exception:
            continue
        links = soup.select('a[href^="/basketball/match/"]')
        # –ü—Ä–æ–π–¥—ë–º –ø–æ —Å—Å—ã–ª–∫–∞–º –∏ –ø—Ä–∏–∫–∏–Ω–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –º–∞—Ç—á–µ–π –ù–ë–ê —Å—Ä–µ–¥–∏ –Ω–∏—Ö
        cnt = 0
        for a in links:
            if not re.fullmatch(r"\d+\s*:\s*\d+", (a.get_text() or "").strip()):
                continue
            cnt += 1
        if cnt > best_count:
            best_count = cnt
            best = (d, url)
    return best

# ---------------------- PARSE DAY ----------------
@dataclass
class GameLink:
    url: str
    t1: str
    t2: str
    s1: int
    s2: int

def parse_day_nba(url: str) -> list[GameLink]:
    """
    –°–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã '–∏—Ç–æ–≥–∏ –¥–Ω—è' —Å–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã (t1, score, t2) –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç—á–∞.
    –ö–æ–º–∞–Ω–¥–Ω—ã–µ –∏–º–µ–Ω–∞ ‚Äî —Ä—É—Å—Å–∫–∏–µ. –°—á—ë—Ç ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π.
    """
    soup = BeautifulSoup(get(url).text, "lxml")
    out: list[GameLink] = []

    # –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤; –±–µ—Ä—ë–º –≤—Å–µ —è–∫–æ—Ä—è-¬´—Å—á—ë—Ç—ã¬ª –∏ –ø–æ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–∞–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞—Ç—á–∞ (–ù–ë–ê).
    for a_score in soup.select('a[href^="/basketball/match/"]'):
        txt = (a_score.get_text() or "").strip()
        if not re.fullmatch(r"\d+\s*:\s*\d+", txt):
            continue

        # –û–±–µ —Å–æ—Å–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî –±–ª–∏–∂–∞–π—à–∏–µ <a> —Å /basketball/club/
        prev_team = a_score.find_previous("a", href=re.compile(r"^/basketball/club/"))
        next_team = a_score.find_next("a", href=re.compile(r"^/basketball/club/"))
        if not prev_team or not next_team:
            continue

        t1 = prev_team.get_text(strip=True)
        t2 = next_team.get_text(strip=True)
        try:
            s1, s2 = [int(x) for x in re.split(r"\s*:\s*", txt)]
        except Exception:
            continue

        url_match = urljoin(BASE, a_score.get("href"))
        out.append(GameLink(url_match, t1, t2, s1, s2))

    # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ-–ù–ë–ê: –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–ª–µ–±–Ω—ã–π ¬´–ù–ë–ê¬ª
    nba_only: list[GameLink] = []
    for g in out:
        try:
            msoup = BeautifulSoup(get(g.url).text, "lxml")
            if msoup.find("a", string=re.compile(r"\b–ù–ë–ê\b")):
                nba_only.append(g)
        except Exception:
            pass

    return nba_only

# ---------------------- PARSE MATCH ----------------
@dataclass
class Player:
    name: str
    pts: int
    reb: int
    ast: int
    stl: int
    blk: int
    minutes: str

def _extract_ot_count(page_text: str) -> int:
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ 4+ –ø–∞—Ä ¬´N : N¬ª, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –¥–≤—É–º—è+ –ø—Ä–æ–±–µ–ª–∞–º–∏
    m = re.search(r'(?:\d+\s*:\s*\d+)(?:\s{2,}\d+\s*:\s*\d+){3,}', page_text)
    if not m:
        return 0
    pairs = re.findall(r'\d+\s*:\s*\d+', m.group(0))
    return max(0, len(pairs) - 4)

def _clean_lines(text: str) -> list[str]:
    lines = [ln.strip() for ln in text.splitlines()]
    lines = [ln for ln in lines if ln]
    # —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä (–¥–∂–µ—Ä—Å–∏)
    return [ln for ln in lines if not re.fullmatch(r"\d{1,3}", ln)]

def _parse_players_block(text_block: str) -> list[Player]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ ¬´‚Ä¶ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤¬ª —á–µ—Ä–µ–∑ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç:
    - —Å—Ç—Ä–æ–∫–∞ —Å –§–ò–û (–Ω–∞ —Ä—É—Å.)
    - —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–∞–º–∏ (–æ—á–∫–∏ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —è–≤–Ω—ã–º –ø–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–º -> —Å—á–∏—Ç–∞–µ–º 0)
    """
    lines = _clean_lines(text_block)
    players: list[Player] = []
    i = 0
    while i < len(lines) - 1:
        name_line = lines[i]
        stats_line = lines[i + 1]

        # –æ—Ç—Å–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è
        if "–ò–≥—Ä–æ–∫" in name_line or "–û ‚Äì" in name_line or "–í–∏–¥–µ–æ" in name_line or "–õ–µ–Ω—Ç–∞ —Å–æ–±—ã—Ç–∏–π" in name_line:
            i += 1
            continue

        if not re.search(r'(\d+/\d+|\d+:\d+)', stats_line):
            i += 1
            continue

        # –¢–æ–∫–µ–Ω—ã
        tokens = stats_line.replace('%', ' ').split()
        pts = 0
        if tokens and '/' not in tokens[0]:
            try:
                pts = int(tokens[0])
                tokens = tokens[1:]
            except Exception:
                pass

        # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∏ —Å—Ç—Ä–µ–ª—å–±–æ–≤—ã—Ö –±–ª–æ–∫–∞ (x/y, %, x/y, %, x/y, %)
        j = 0
        segs = 0
        while j < len(tokens) and segs < 3:
            if '/' in tokens[j]:
                j += 1
                if j < len(tokens) and tokens[j].isdigit():
                    j += 1
                segs += 1
            else:
                j += 1
        rest = tokens[j:]

        nums = []
        minutes = ""
        for tok in rest:
            if re.fullmatch(r"\d+:\d+", tok):
                minutes = tok
                break
            if tok.isdigit():
                nums.append(int(tok))

        # –ø–æ—Ä—è–¥–æ–∫: –ü–ë, –ê–ü, –§, –ü–•, –ü, –ë–®
        while len(nums) < 6:
            nums.append(0)
        reb, ast, _fouls, stl, _to, blk = nums[:6]

        players.append(Player(name=name_line, pts=int(pts), reb=int(reb),
                              ast=int(ast), stl=int(stl), blk=int(blk),
                              minutes=minutes))
        i += 2

    return players

def parse_match_players_by_team(match_html: str, team1_ru: str, team2_ru: str) -> tuple[list[Player], list[Player], int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏–≥—Ä–æ–∫–∏_–∫–æ–º–∞–Ω–¥—ã1, –∏–≥—Ä–æ–∫–∏_–∫–æ–º–∞–Ω–¥—ã2, ot_count)
    """
    soup = BeautifulSoup(match_html, "lxml")
    page_text = soup.get_text("\n", strip=False)
    ot_count = _extract_ot_count(page_text)

    # –í—ã–¥–µ–ª—è–µ–º –¥–≤–µ —Å–µ–∫—Ü–∏–∏ ¬´{–ö–æ–º–∞–Ω–¥–∞}. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤¬ª
    def block_for(team_ru: str) -> str:
        pattern = rf"{re.escape(team_ru)}\.\s*—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤"
        m = re.search(pattern, page_text, flags=re.IGNORECASE)
        if not m:
            return ""
        start = m.end()
        # –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è ¬´###¬ª –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        tail = page_text[start:]
        m2 = re.search(r"\n### |\n[A-–Ø–ÅA-Z].+—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤", tail)
        return tail[:m2.start()] if m2 else tail

    b1 = block_for(team1_ru)
    b2 = block_for(team2_ru)

    p1 = _parse_players_block(b1) if b1 else []
    p2 = _parse_players_block(b2) if b2 else []

    # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º DNP (–Ω–µ—Ç –º–∏–Ω—É—Ç –∏–ª–∏ 00:00)
    p1 = [p for p in p1 if p.minutes and p.minutes != "00:00"]
    p2 = [p for p in p2 if p.minutes and p.minutes != "00:00"]

    return p1, p2, ot_count

# ---------------------- FORMAT --------------------
def ru_plural(n: int, forms: tuple[str,str,str]) -> str:
    n = abs(int(n)) % 100
    n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

def make_initial_surname(full_ru: str) -> str:
    """
    ¬´–ò–º—è –§–∞–º–∏–ª–∏—è¬ª ‚Üí ¬´–ò. –§–∞–º–∏–ª–∏—è¬ª, –ø–ª—é—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ¬´–º–ª–∞–¥—à–∏–π/—Å—Ç–∞—Ä—à–∏–π¬ª.
    –ï—Å–ª–∏ –∏–º—è —Å–æ—Å—Ç–∞–≤–Ω–æ–µ (–ê—Ä –î–∂–µ–π), –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞.
    """
    parts = [p for p in re.split(r"\s+", full_ru.strip()) if p]
    if not parts:
        return full_ru
    first = parts[0]
    last = parts[-1]
    # ¬´-–º–ª–∞–¥—à–∏–π¬ª, ¬´–º–ª–∞–¥—à–∏–π¬ª, ¬´—Å—Ç–∞—Ä—à–∏–π¬ª
    last = re.sub(r"(?i)\b–º–ª–∞–¥—à–∏–π\b", "–º–ª.", last)
    last = re.sub(r"(?i)\b—Å—Ç–∞—Ä—à–∏–π\b", "—Å—Ç.", last)
    # –¢–∏—Ä–µ-—Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Ñ–∞–º–∏–ª–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    init = (first[0] + ".") if first else ""
    return f"{init} {last}".strip()

def standout_score(p: Player) -> int:
    return p.pts*2 + p.reb + p.ast + p.stl*2 + p.blk*2

def must_show_stat_line(p: Player) -> bool:
    return (p.pts >= 25) or (p.reb >= 12) or (p.ast >= 10) or (p.stl >= 4) or (p.blk >= 4)

def format_player_line(p: Player, bold: bool=False) -> str:
    name = make_initial_surname(p.name)
    if bold: name = f"<b>{name}</b>"

    parts = [f"{p.pts} {ru_plural(p.pts, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"]
    if p.reb >= 5:
        parts.append(f"{p.reb} {ru_plural(p.reb, ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}")
    if p.ast >= 5:
        parts.append(f"{p.ast} {ru_plural(p.ast, ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}")
    if p.stl >= 4:
        parts.append(f"{p.stl} {ru_plural(p.stl, ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}")
    if p.blk >= 4:
        parts.append(f"{p.blk} {ru_plural(p.blk, ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}")

    flame = " üî•" if (p.pts >= 35 or p.reb >= 20 or p.ast >= 15 or p.stl >= 6 or p.blk >= 6) else ""
    return f"{name}: {', '.join(parts)}{flame}"

def pick_players_for_team(players: list[Player], team_ru: str) -> list[tuple[Player,bool]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ 2 –∏–≥—Ä–æ–∫–æ–≤: [(player, bold?)]
    - –°–ø–µ—Ü-–≤—Å—Ç–∞–≤–∫–∏: –î—ë–º–∏–Ω/–ì–æ–ª–¥–∏–Ω ‚Äî –µ—Å–ª–∏ –≤ —Ä–æ—Å—Ç–µ—Ä–µ –∏ –∏–≥—Ä–∞–ª–∏, —Ç–æ –≤–∫–ª—é—á–∞–µ–º –∏ –¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º.
    - –û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –ø–æ must_show_stat_line, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ ¬´–≤–∫–ª–∞–¥—É¬ª.
    - –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–±—Ä–∞–ª–æ—Å—å ‚Äî –±–µ—Ä—ë–º —Ç–æ–ø –ø–æ –æ—á–∫–∞–º.
    """
    chosen: list[tuple[Player,bool]] = []

    special_last = FORCE_BY_TEAM.get(team_ru, None)
    if special_last:
        for p in players:
            if re.search(special_last, p.name, flags=re.IGNORECASE):
                chosen.append((p, True))
                break

    # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
    cands = [p for p in players if must_show_stat_line(p)]
    cands.sort(key=standout_score, reverse=True)

    for p in cands:
        if len(chosen) >= 2: break
        # –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫–∞
        if any(x[0].name == p.name for x in chosen):
            continue
        chosen.append((p, False))

    if not chosen and players:
        # –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à—ë–ª ‚Äî –±–µ—Ä—ë–º —Ç–æ–ø-—Å–∫–æ—Ä–µ—Ä–∞
        top = max(players, key=lambda x: x.pts)
        chosen.append((top, False))

    return chosen[:2]

def team_emoji(team_ru: str) -> str:
    return TEAM_EMO.get(team_ru, EMO_FALLBACK)

def build_game_block(g: GameLink) -> str:
    # —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç—á–∞
    html = get(g.url).text
    p1, p2, ot = parse_match_players_by_team(html, g.t1, g.t2)

    # —à–∞–ø–∫–∞
    e1 = team_emoji(g.t1)
    e2 = team_emoji(g.t2)
    ot_tag = "" if ot == 0 else f" ({'–û–¢' if ot==1 else str(ot)+'–û–¢'})"
    head = f"{e1} {g.t1}: <b>{g.s1}</b>\n{e2} {g.t2}: {g.s2}{ot_tag}\n\n"

    # –∏–≥—Ä–æ–∫–∏
    lines = []
    for p, bold in pick_players_for_team(p1, g.t1):
        lines.append(format_player_line(p, bold))
    if lines: lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
    for p, bold in pick_players_for_team(p2, g.t2):
        lines.append(format_player_line(p, bold))

    return head + "\n".join([ln for ln in lines if ln.strip()])

# ---------------------- MESSAGE -------------------
def build_post() -> str:
    # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π ¬´–¥–µ–Ω—å¬ª –Ω–∞ sports.ru –ø–æ–¥ –Ω–∞—à ET-–¥–µ–Ω—å
    et_day = pick_report_date_et()
    chosen_date, url = best_day_page(et_day)

    games = parse_day_nba(url)
    title = f"–ù–ë–ê ‚Ä¢ {ru_date(chosen_date)} ‚Ä¢ {len(games)} {ru_plural(len(games), ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n"
    title += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n"
    title += "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n\n"

    if not games:
        return title.rstrip()

    blocks = []
    for i, g in enumerate(games, 1):
        try:
            blk = build_game_block(g)
            blocks.append(blk)
        except Exception as e:
            blocks.append("‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ç—á—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        if i < len(games):
            blocks.append("‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì")

    return (title + "\n".join(blocks)).strip()

# ---------------------- TELEGRAM -------------------
def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    MAX = 3700  # –∑–∞—â–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç
    t = text
    parts = []
    while t:
        if len(t) <= MAX:
            parts.append(t); break
        cut = t.rfind("\n‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n", 0, MAX)
        if cut == -1:
            cut = t.rfind("\n\n", 0, MAX)
        if cut == -1:
            cut = MAX
        parts.append(t[:cut].rstrip())
        t = t[cut:].lstrip()

    for part in parts:
        resp = S.post(url, json={
            "chat_id": CHAT_ID,
            "text": part,
            "parse_mode": "HTML",
            "disable_web_page_preview": True,
        }, timeout=25)
        if resp.status_code != 200:
            raise RuntimeError(f"Telegram error {resp.status_code}: {resp.text}")
        time.sleep(0.3)

# ---------------------- MAIN ----------------------
if __name__ == "__main__":
    try:
        text = build_post()
        tg_send(text)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
