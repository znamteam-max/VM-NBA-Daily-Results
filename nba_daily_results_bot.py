#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (RU)

–†–µ–∂–∏–º—ã:
1) –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ (–ø–æ CRON/Actions) ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –∑–∞ ¬´—Ä–µ–ø–æ—Ä—Ç-–¥–µ–Ω—å¬ª (ET) –≤ CHAT_ID.
2) –°–ª—É—à–∞—Ç–µ–ª—å (--listen –∏–ª–∏ NBA_LISTEN=1) ‚Äî long-poll Telegram:
   - /nba  ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å 3 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏ (ET) –∫–∞–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
   - /nba YYYY-MM-DD ‚Üí —Å—Ä–∞–∑—É –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ—Å—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (–ø–æ ET)

–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç (–∫–∞–∫ –±—ã–ª–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö):
‚Ä¢ –ü–∞—Ä—ã/W-L/OT: ESPN site.api (scoreboard) –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –¥–∞—Ç–∞–º –≤–æ–∫—Ä—É–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π.
‚Ä¢ –°—á—ë—Ç/–∏–≥—Ä–æ–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º: Sports.ru (–±–æ–∫—Å—Å–∫–æ—Ä). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ñ–æ–ª–ª–±–µ–∫ ESPN boxscore.
‚Ä¢ –°–ø–æ–π–ª–µ—Ä—ã: —Å—á—ë—Ç –∏ –∏–≥—Ä–æ–∫–∏ –∑–∞–≤–µ—Ä–Ω—É—Ç—ã, —É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å—á—ë—Ç –∂–∏—Ä–Ω—ã–º, —Ä—è–¥–æ–º —ç–º–æ–¥–∑–∏ (–∫–∞—Å—Ç–æ–º–Ω—ã–µ —á–µ—Ä–µ–∑ TEAM_EMOJI_JSON).
‚Ä¢ –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤:
  ‚Äì –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω, –º–∞–∫—Å–∏–º—É–º –¥–≤–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É;
  ‚Äì –≤—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ ‚â•20 –æ—á–∫–æ–≤ –ò–õ–ò –¥–∞–±–ª-–¥–∞–±–ª –ò–õ–ò ‚â•6 –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤/–±–ª–æ–∫-—à–æ—Ç–æ–≤;
  ‚Äì —Å–ø–µ—Ü: –µ—Å–ª–∏ –∏–≥—Ä–∞–ª –ï–≥–æ—Ä –î—ë–º–∏–Ω (BKN) –∏–ª–∏ –í–ª–∞–¥ –ì–æ–ª–¥–∏–Ω (MIA) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å 3 –º–∞–∫—Å. –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–∂–∏—Ä–Ω—ã–º).
"""

import os
import sys
import re
import json
from datetime import date, datetime, timedelta
from zoneinfo import ZoneInfo
from urllib.parse import urlparse, urlunparse

import requests
from requests.adapters import HTTPAdapter
try:
    from urllib3.util.retry import Retry
except Exception:
    Retry = None
from bs4 import BeautifulSoup

# ---------------- ENV ----------------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()  # –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Ä–∞—Å—Å—ã–ª–∫–∞)
TEAM_EMOJI_JSON = os.getenv("TEAM_EMOJI_JSON", "").strip()  # {"BOS":"<custom_emoji_id>", ...}
NBA_LISTEN = os.getenv("NBA_LISTEN", "").strip()

DEBUG = os.getenv("DEBUG_NBA", "").strip()


# ---------------- HTTP ----------------
HTTP_TIMEOUT = 10

def _mk_adapter():
    if Retry is not None:
        r = Retry(
            total=3, connect=3, read=3, backoff_factor=0.4,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["GET", "POST"]
        )
        return HTTPAdapter(max_retries=r)
    return HTTPAdapter(max_retries=2)

def make_session():
    s = requests.Session()
    ad = _mk_adapter()
    s.mount("https://", ad)
    s.mount("http://", ad)
    # –ë–µ–∑ non-ASCII –≤ UA (–∏–Ω–∞—á–µ —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π codec –ø–∞–¥–∞–µ—Ç)
    s.headers.update({
        "User-Agent": "NBA-DailyResultsBot/4.8 (sports.ru+espn; spoilers; listen)",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.6",
        "Connection": "close",
    })
    return s

S = make_session()
def log(*a): 
    if DEBUG:
        print(*a, file=sys.stderr)

def _get_json(url: str) -> dict:
    try:
        r = S.get(url, timeout=HTTP_TIMEOUT)
        if r.status_code != 200:
            return {}
        return r.json()
    except Exception:
        return {}

def _get_text(url: str) -> str:
    try:
        r = S.get(url, timeout=HTTP_TIMEOUT)
        if r.status_code != 200:
            return ""
        return r.text
    except Exception:
        return ""


# ---------------- DATES ----------------
RU_MONTHS = {1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
             7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"}

def ru_date(d: date) -> str:
    return f"{d.day} {RU_MONTHS[d.month]}"

def ru_plural(n: int, forms: tuple[str,str,str]) -> str:
    n = abs(int(n)) % 100
    n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

def pick_et_report_day(now_et: datetime | None = None) -> date:
    now = now_et or datetime.now(ZoneInfo("America/New_York"))
    return now.date() if now.hour >= 8 else (now.date() - timedelta(days=1))

def et_last_three_days() -> list[date]:
    base = pick_et_report_day()
    return [base, base - timedelta(days=1), base - timedelta(days=2)]

def parse_ymd(s: str) -> date | None:
    try:
        y,m,d = map(int, s.split("-"))
        return date(y,m,d)
    except Exception:
        return None


# ---------------- TEAMS / EMOJI ----------------
TEAM_RU_TO_ABBR = {
    "–ê—Ç–ª–∞–Ω—Ç–∞":"ATL","–ë–æ—Å—Ç–æ–Ω":"BOS","–ë—Ä—É–∫–ª–∏–Ω":"BKN","–®–∞—Ä–ª–æ—Ç—Ç":"CHA","–ß–∏–∫–∞–≥–æ":"CHI",
    "–ö–ª–∏–≤–ª–µ–Ω–¥":"CLE","–î–∞–ª–ª–∞—Å":"DAL","–î–µ–Ω–≤–µ—Ä":"DEN","–î–µ—Ç—Ä–æ–π—Ç":"DET","–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç":"GSW",
    "–•—å—é—Å—Ç–æ–Ω":"HOU","–ò–Ω–¥–∏–∞–Ω–∞":"IND","–ö–ª–∏–ø–ø–µ—Ä—Å":"LAC","–õ–µ–π–∫–µ—Ä—Å":"LAL","–ú–µ–º—Ñ–∏—Å":"MEM",
    "–ú–∞–π–∞–º–∏":"MIA","–ú–∏–ª—É–æ–∫–∏":"MIL","–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞":"MIN","–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω":"NOP","–ù—å—é-–ô–æ—Ä–∫":"NYK",
    "–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏":"OKC","–û—Ä–ª–∞–Ω–¥–æ":"ORL","–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è":"PHI","–§–∏–Ω–∏–∫—Å":"PHX","–ü–æ—Ä—Ç–ª–µ–Ω–¥":"POR",
    "–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ":"SAC","–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ":"SAS","–¢–æ—Ä–æ–Ω—Ç–æ":"TOR","–Æ—Ç–∞":"UTA","–í–∞—à–∏–Ω–≥—Ç–æ–Ω":"WAS",
}
ABBR_TO_RU = {v:k for k,v in TEAM_RU_TO_ABBR.items()}

TEAM_EMOJI_DEFAULT = {
    "ATL":"ü¶Ö","BOS":"‚òòÔ∏è","BKN":"üï∏Ô∏è","CHA":"üêù","CHI":"üêÇ","CLE":"üõ°Ô∏è","DAL":"üêé","DEN":"‚õèÔ∏è","DET":"üîß",
    "GSW":"üó°Ô∏è","HOU":"üöÄ","IND":"üí´","LAC":"‚úÇÔ∏è","LAL":"‚≠ê","MEM":"üêª","MIA":"üî•","MIL":"ü¶å","MIN":"üê∫",
    "NOP":"ü™∂","NYK":"üóΩ","OKC":"‚ö°Ô∏è","ORL":"‚ú®","PHI":"üîî","PHX":"‚òÄÔ∏è","POR":"üß≠","SAC":"üëë","SAS":"ü™ô",
    "TOR":"ü¶ñ","UTA":"üé∑","WAS":"üßô",
}

def load_team_emojis():
    if TEAM_EMOJI_JSON:
        try:
            d = json.loads(TEAM_EMOJI_JSON)
            if isinstance(d, dict):
                return {k.upper(): str(v) for k,v in d.items()}
        except Exception:
            pass
    return TEAM_EMOJI_DEFAULT

TEAM_EMOJI = load_team_emojis()
def emoji(abbr: str) -> str:
    return TEAM_EMOJI.get((abbr or "").upper(), "üèÄ")


# ---------------- SPORTS.RU (day + boxscores RU) ----------------
def day_url(d: date) -> str:
    return f"https://www.sports.ru/stat/basketball/center/end/{d:%Y/%m/%d}.html"

def _normalize_match_url(u: str) -> str:
    full = "https://www.sports.ru" + u if u.startswith("/") else u
    p = urlparse(full)
    return urlunparse((p.scheme, p.netloc, p.path, "", "", ""))

def _soup(url: str):
    try:
        html = _get_text(url)
        if not html:
            return None
        return BeautifulSoup(html, "html.parser")
    except Exception:
        return None

def collect_day_links(d: date) -> list[str]:
    soup = _soup(day_url(d))
    if not soup:
        return []
    seen=set()
    out=[]
    for a in soup.find_all("a", href=True):
        href = a["href"]
        if "/basketball/match/" not in href:
            continue
        full = _normalize_match_url(href)
        if full in seen:
            continue
        seen.add(full)
        out.append(full)
    return out

def _canonical_ru_team(raw: str) -> str | None:
    if not raw:
        return None
    t = raw.replace("¬´","").replace("¬ª","").strip()
    t = re.sub(r"\(.*?\)", "", t).strip()
    for k in TEAM_RU_TO_ABBR:
        if t.startswith(k) or k in t:
            return k
    return None

def parse_sports_match(url: str) -> dict | None:
    soup = _soup(url)
    if not soup:
        return None

    # TRY exact score (–∏—Ç–æ–≥) ‚Äî –∏—â–µ–º ¬´–∑–∞–≤–µ—Ä—à–µ–Ω¬ª –∏–ª–∏ –ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å —Å—É–º–º–æ–π —á–µ—Ç–≤–µ—Ä—Ç–µ–π
    text = soup.get_text("\n", strip=True)
    # –ü–æ–ø—ã—Ç–∫–∞: –±–ª–æ–∫ —Å—É–º–º–∞—Ä–Ω–æ–≥–æ —Å—á—ë—Ç–∞ ¬´NNN : MMM¬ª –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥/—Ä—è–¥–æ–º —Å ¬´–∑–∞–≤–µ—Ä—à–µ–Ω¬ª
    score_final = None
    for m in re.finditer(r"(\d+)\s*:\s*(\d+)", text):
        tail = text[m.end(): m.end()+60].lower()
        if "–∑–∞–≤–µ—Ä—à" in tail or "–∑–∞–≤–µ—Ä—à—ë–Ω" in tail or "–∑–∞–≤–µ—Ä—à–µ–Ω" in tail:
            try:
                score_final = (int(m.group(1)), int(m.group(2)))
                break
            except Exception:
                pass
    # –§–æ–ª–ª–±–µ–∫: —Å—É–º–º–∞ –ø–æ —á–µ—Ç–≤–µ—Ä—Ç—è–º ‚Äî –∏—â–µ–º 4 (–∏–ª–∏ 5+) –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞
    if not score_final:
        # –≤—ã—Ç–∞—â–∏–º –≤—Å–µ N:N –ø–æ–¥—Ä—è–¥ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        lines = [ln.strip() for ln in text.splitlines() if ":" in ln]
        for ln in lines:
            nums = re.findall(r"(\d+)\s*:\s*(\d+)", ln)
            if len(nums) >= 4:
                a = sum(int(x[0]) for x in nums[:4])
                b = sum(int(x[1]) for x in nums[:4])
                # –≤–æ–∑–º–æ–∂–Ω—ã OT ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –ø–∞—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                if len(nums) > 4:
                    for extra in nums[4:]:
                        a += int(extra[0]); b += int(extra[1])
                score_final = (a, b)
                break
    if not score_final:
        return None

    scoreA, scoreB = score_final

    # –ö–æ–º–∞–Ω–¥—ã ‚Äî –∏–∑ og:title
    meta = soup.find("meta", attrs={"property":"og:title"})
    title = meta.get("content") if meta and meta.get("content") else (soup.title.string if soup.title else "")
    teamA = teamB = None
    if title and "‚Äî" in title:
        left, right = [x.strip() for x in title.split("‚Äî", 1)]
        teamA = _canonical_ru_team(left)
        teamB = _canonical_ru_team(right)
    if not (teamA and teamB) or teamA == teamB:
        return None
    a_abbr = TEAM_RU_TO_ABBR.get(teamA, "")
    b_abbr = TEAM_RU_TO_ABBR.get(teamB, "")
    if not a_abbr or not b_abbr:
        return None

    # –ò–≥—Ä–æ–∫–∏ ‚Äî —Ç–∞–±–ª–∏—Ü—ã ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤. <–ö–û–ú–ê–ù–î–ê>¬ª
    def read_rows(team_ru_key: str) -> list[dict]:
        rows=[]
        anchor=None
        stamp = team_ru_key.lower()
        for h in soup.find_all(["h2","h3","h4"]):
            t = h.get_text(" ", strip=True)
            if "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤" in t.lower() and stamp in t.lower().split(".")[0]:
                anchor=h
                break
        if not anchor:
            return rows
        table = anchor.find_next("table")
        if not table:
            return rows
        for tr in table.find_all("tr"):
            tds = [td.get_text(" ", strip=True) for td in tr.find_all(["td","th"])]
            if not tds:
                continue
            if any(x.lower().startswith("–∏–≥—Ä–æ–∫") for x in tds):
                continue
            # –∏–º—è ‚Äî –ø–µ—Ä–≤–∞—è ¬´–Ω–µ—á–∏—Å–ª–æ–≤–∞—è¬ª —è—á–µ–π–∫–∞
            name_idx=None
            for i,cell in enumerate(tds[:3]):
                if re.search(r"[^\d/:% ]", cell):
                    name_idx=i
                    break
            if name_idx is None:
                continue
            name = tds[name_idx]
            nums = tds[name_idx+1:]
            if len(nums) < 14:
                continue
            def as_int(x: str) -> int:
                try:
                    return int(x)
                except Exception:
                    try:
                        return int(float(x))
                    except Exception:
                        return 0
            pts = as_int(nums[0])
            reb = as_int(nums[7])
            ast = as_int(nums[8])
            stl = as_int(nums[10])
            blk = as_int(nums[12])
            rows.append({"name": name, "pts": pts, "reb": reb, "ast": ast, "stl": stl, "blk": blk})
        return rows

    rowsA = read_rows(teamA)
    rowsB = read_rows(teamB)

    # OT: —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ç–≤–µ—Ä—Ç–µ–π —Å–≤–µ—Ä—Ö 4, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π
    ot = 0
    m_line = re.search(r"(?:\d+\s*:\s*\d+\s*){4,7}", text)
    if m_line:
        pairs = re.findall(r"(\d+)\s*:\s*(\d+)", m_line.group(0))
        if len(pairs) > 4:
            ot = len(pairs) - 4

    finished = True  # –¥–æ—à–ª–∏ –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞

    return {
        "teamA": {"name": teamA, "abbr": a_abbr, "emoji": emoji(a_abbr), "score": scoreA},
        "teamB": {"name": teamB, "abbr": b_abbr, "emoji": emoji(b_abbr), "score": scoreB},
        "ot": ot, "finished": finished,
        "players": {teamA: rowsA, teamB: rowsB},
        "url": url,
    }


# ---------------- ESPN site.api (pairs, records, boxscore fallback) ----------------
ESPN_SB  = "https://site.api.espn.com/apis/site/v2/sports/basketball/nba/scoreboard?dates={ymd}"
ESPN_BOX = "https://site.web.api.espn.com/apis/v2/sports/basketball/nba/boxscore?event={eid}"

def _espn_record(c: dict) -> str:
    for r in c.get("records") or []:
        if r.get("type") == "total" and r.get("summary"):
            return r["summary"]
    return ""

def fetch_espn_events_for_day(d: date) -> list[dict]:
    j = _get_json(ESPN_SB.format(ymd=d.strftime("%Y%m%d")))
    out=[]
    for ev in (j.get("events") or []):
        try:
            comp = (ev.get("competitions") or [None])[0] or {}
            comps = comp.get("competitors") or []
            if len(comps) != 2:
                continue
            home = next(c for c in comps if c.get("homeAway")=="home")
            away = next(c for c in comps if c.get("homeAway")=="away")
            th = (home.get("team") or {})
            ta = (away.get("team") or {})
            abbr_h = (th.get("abbreviation") or "").upper()
            abbr_a = (ta.get("abbreviation") or "").upper()
            if abbr_h == "GS": abbr_h = "GSW"
            if abbr_a == "GS": abbr_a = "GSW"

            status = (ev.get("status") or {}).get("type") or {}
            completed = bool(status.get("completed", False))
            period = int(status.get("period") or 0)
            ot = max(period - 4, 0) if completed and period>4 else 0

            def as_int(x):
                try:
                    return int(float(x))
                except Exception:
                    return 0

            out.append({
                "eventId": str(ev.get("id") or ""),
                "home": {
                    "abbr": abbr_h, "teamId": str(th.get("id") or ""),
                    "score": as_int(home.get("score", 0)),
                    "winner": bool(home.get("winner", False)),
                    "record": _espn_record(home),
                },
                "away": {
                    "abbr": abbr_a, "teamId": str(ta.get("id") or ""),
                    "score": as_int(away.get("score", 0)),
                    "winner": bool(away.get("winner", False)),
                    "record": _espn_record(away),
                },
                "completed": completed,
                "ot": ot,
            })
        except Exception:
            continue
    return out

def fetch_espn_events_multi(days: list[date]) -> dict[frozenset, dict]:
    seen={}
    for d in days:
        for e in fetch_espn_events_for_day(d):
            if not e.get("completed"):
                continue
            key = frozenset([e["home"]["abbr"], e["away"]["abbr"]])
            if key in seen:
                continue
            seen[key] = e
    return seen

def fetch_espn_players(event_id: str) -> dict:
    j = _get_json(ESPN_BOX.format(eid=event_id))
    out={}
    for team_block in (j.get("players") or []):
        team = team_block.get("team") or {}
        tid = str(team.get("id") or "")
        arr=[]
        for grp in (team_block.get("statistics") or []):
            for a in (grp.get("athletes") or []):
                ath = a.get("athlete") or {}
                nm = (ath.get("displayName") or "").strip()
                stats={}
                for k,v in (a.get("stats") or {}).items(): stats[k.lower()] = v
                for k,v in (ath.get("stats") or {}).items(): stats.setdefault(k.lower(), v)
                def iget(*keys, default=0):
                    for k in keys:
                        if k in stats:
                            try: return int(stats[k])
                            except Exception:
                                try: return int(float(stats[k]))
                                except Exception: pass
                    return default
                pts=iget("points","pts"); reb=iget("rebounds","reb","reboundstotal")
                ast=iget("assists","ast"); stl=iget("steals","stl"); blk=iget("blocks","blk")
                if any([pts,reb,ast,stl,blk]):
                    arr.append({"name": nm, "pts": pts, "reb": reb, "ast": ast, "stl": stl, "blk": blk})
        merged={}
        for p in arr:
            if p["name"] not in merged:
                merged[p["name"]] = p
            else:
                m = merged[p["name"]]
                for k in ("pts","reb","ast","stl","blk"):
                    m[k] = max(m[k], p[k])
        out[tid] = list(merged.values())
    return out


# ---------------- Players selection/format ----------------
def initials_ru(full: str) -> str:
    parts = [p for p in re.split(r"\s+", (full or "").strip()) if p]
    if not parts:
        return full or ""
    if len(parts) == 1:
        return parts[0]
    first = parts[0]
    last = parts[-1]
    if last.lower() in {"jr.","jr","–º–ª.","—Å—Ç.","sr.","sr"} and len(parts)>=3:
        last = parts[-2] + " " + parts[-1]
    return f"{first[0]}. {last}"

def ru_forms(label: str, v: int) -> str:
    if label=="pts": return f"{v} {ru_plural(v, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"
    if label=="reb": return f"{v} {ru_plural(v, ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}"
    if label=="ast": return f"{v} {ru_plural(v, ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}"
    if label=="stl": return f"{v} {ru_plural(v, ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}"
    if label=="blk": return f"{v} {ru_plural(v, ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}"
    return f"{v}"

def hot_mark(p: dict) -> str:
    if (p["pts"]>=35) or (p["reb"]>=15) or (p["ast"]>=12) or (p["stl"]>=5) or (p["blk"]>=5):
        return " üî•"
    return ""

def is_dd(p: dict) -> bool:
    return sum(x>=10 for x in [p["pts"],p["reb"],p["ast"],p["stl"],p["blk"]]) >= 2

def second_ok(p: dict) -> bool:
    return (p["pts"]>=20) or is_dd(p) or (p["stl"]>=6) or (p["blk"]>=6)

def score_key(p: dict): 
    return (p["pts"], p["reb"]+p["ast"], p["stl"]+p["blk"])

def pick_team_players(abbr: str, rows: list[dict]) -> list[tuple[dict,bool,bool]]:
    if not rows:
        return []
    rows = sorted(rows, key=score_key, reverse=True)
    special_keys = []
    if abbr=="BKN": special_keys = ["–¥—ë–º–∏–Ω","demin"]
    if abbr=="MIA": special_keys = ["–≥–æ–ª–¥–∏–Ω","goldin"]
    special=None
    for p in rows:
        nm = (p["name"] or "").lower()
        if any(k in nm for k in special_keys):
            special=p; break
    out=[]
    top = rows[0]
    if special and special["name"] == top["name"]:
        out.append((special, True, True))
    elif special:
        out.append((top, False, False)); out.append((special, True, True))
    else:
        out.append((top, False, False))
    if len(out)<2:
        for p in rows[1:]:
            if p["name"] == top["name"]:
                continue
            if second_ok(p):
                out.append((p, False, False)); break
    return out[:2]

def format_player_regular(p: dict, bold=False) -> str:
    name = initials_ru(p["name"])
    if bold:
        name = f"<b>{name}</b>"
    out = [ru_forms("pts", p["pts"])]
    if p["reb"]>=5: out.append(ru_forms("reb", p["reb"]))
    if p["ast"]>=5: out.append(ru_forms("ast", p["ast"]))
    if p["stl"]>=4: out.append(ru_forms("stl", p["stl"]))
    if p["blk"]>=4: out.append(ru_forms("blk", p["blk"]))
    return f"{name}: " + ", ".join(out) + hot_mark(p)

def format_player_special(p: dict) -> str:
    name = f"<b>{initials_ru(p['name'])}</b>"
    stats=[("pts",p["pts"]),("reb",p["reb"]),("ast",p["ast"]),("stl",p["stl"]),("blk",p["blk"])]
    stats=[(k,v) for k,v in stats if v>0]
    stats.sort(key=lambda kv: kv[1], reverse=True)
    chosen=stats[:3]
    return f"{name}: " + ", ".join(ru_forms(k,v) for k,v in chosen) + hot_mark(p)


# ---------------- Spoilers ----------------
def sp(s: str) -> str:
    return f'<span class="tg-spoiler">{s}</span>'

SEP = "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì"


# ---------------- Blocks ----------------
def format_score_line(name_ru: str, abbr: str, score: int, winner: bool, record: str, ot_str: str) -> str:
    score_txt = f"<b>{score}</b>" if winner else f"{score}"
    if ot_str and not winner:
        score_txt += ot_str
    if record:
        score_txt += f" ({record})"
    return f"{emoji(abbr)} {name_ru}: {sp(score_txt)}"

def build_block_from_sports(info: dict, records: dict[str,str]) -> str:
    A,B = info["teamA"], info["teamB"]
    ot_str = "" if info["ot"]==0 else (" (–û–¢)" if info["ot"]==1 else f" ({info['ot']} –û–¢)")
    a_win = A["score"] > B["score"]
    b_win = B["score"] > A["score"]
    head = (
        f"{format_score_line(A['name'], A['abbr'], A['score'], a_win, records.get(A['abbr'], ''), '')}\n"
        f"{format_score_line(B['name'], B['abbr'], B['score'], b_win, records.get(B['abbr'], ''), ot_str)}\n\n"
    )
    rowsA = info["players"].get(A["name"], [])
    rowsB = info["players"].get(B["name"], [])
    al = [sp(format_player_special(p) if det else format_player_regular(p, bold))
          for (p,bold,det) in pick_team_players(A["abbr"], rowsA)]
    bl = [sp(format_player_special(p) if det else format_player_regular(p, bold))
          for (p,bold,det) in pick_team_players(B["abbr"], rowsB)]
    lines=[]
    if al: lines.extend(al)
    if al and bl: lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
    if bl: lines.extend(bl)
    return head + ("\n".join(lines) if lines else "")

def build_block_from_espn(e: dict) -> str:
    h, a = e["home"], e["away"]
    name_h = ABBR_TO_RU.get(h["abbr"], h["abbr"])
    name_a = ABBR_TO_RU.get(a["abbr"], a["abbr"])
    ot_str = "" if e["ot"]==0 else (" (–û–¢)" if e["ot"]==1 else f" ({e['ot']} –û–¢)")
    head = (
        f"{format_score_line(name_h, h['abbr'], h['score'], h['winner'], h.get('record',''), '')}\n"
        f"{format_score_line(name_a, a['abbr'], a['score'], a['winner'], a.get('record',''), ot_str)}\n\n"
    )
    players_by_tid = fetch_espn_players(e["eventId"]) if e.get("eventId") else {}
    rowsH = players_by_tid.get(h.get("teamId",""), [])
    rowsA = players_by_tid.get(a.get("teamId",""), [])
    al = [sp(format_player_special(p) if det else format_player_regular(p, bold))
          for (p,bold,det) in pick_team_players(h["abbr"], rowsH)]
    bl = [sp(format_player_special(p) if det else format_player_regular(p, bold))
          for (p,bold,det) in pick_team_players(a["abbr"], rowsA)]
    lines=[]
    if al: lines.extend(al)
    if al and bl: lines.append("")
    if bl: lines.extend(bl)
    return head + ("\n".join(lines) if lines else "")


# ---------------- Assemble games for a given ET day ----------------
def fetch_sports_games_for_day(d_title: date) -> dict[frozenset, dict]:
    games={}
    for url in collect_day_links(d_title):
        info = parse_sports_match(url)
        if not info or not info["finished"]:
            continue
        pair = frozenset([info["teamA"]["abbr"], info["teamB"]["abbr"]])
        if pair in games:
            continue
        games[pair] = info
    return games

def candidate_days_around(d: date) -> list[date]:
    # –î–ª—è ESPN –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –ø–æ –≥—Ä–∞–Ω–∏—á–Ω—ã–º —á–∞—Å–∞–º
    return [d - timedelta(days=1), d, d + timedelta(days=1)]

def build_post_for_et_day(d_title: date) -> str:
    # –ø–∞—Ä—ã/W-L —á–µ—Ä–µ–∑ ESPN –ø–æ –æ–∫—Ä–µ—Å—Ç–Ω—ã–º –¥–∞—Ç–∞–º
    espn_by_pair = fetch_espn_events_multi(candidate_days_around(d_title))
    sports_by_pair = fetch_sports_games_for_day(d_title)

    ordered_pairs = list(espn_by_pair.keys()) or list(sports_by_pair.keys())
    title_count = len(ordered_pairs)
    title = f"–ù–ë–ê ‚Ä¢ {ru_date(d_title)} ‚Ä¢ {title_count} {ru_plural(title_count, ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n"
    title += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n"
    title += SEP + "\n\n"
    if title_count == 0:
        return title.rstrip()

    blocks=[]
    for i, pair in enumerate(ordered_pairs, 1):
        if pair in sports_by_pair:
            ev = espn_by_pair.get(pair, {})
            rec_map = {}
            if ev:
                rec_map[ev["home"]["abbr"]] = ev["home"].get("record","")
                rec_map[ev["away"]["abbr"]] = ev["away"].get("record","")
            blocks.append(build_block_from_sports(sports_by_pair[pair], rec_map))
        else:
            blocks.append(build_block_from_espn(espn_by_pair[pair]))
        if i < title_count:
            blocks.append("\n" + SEP + "\n\n")
    return (title + "".join(blocks)).strip()


# ---------------- Telegram send ----------------
def tg_send(text: str, chat_id: str | int | None = None):
    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    to = chat_id or CHAT_ID
    if not to:
        raise RuntimeError("CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω (–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ)")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    r = S.post(url, json={
        "chat_id": to,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }, timeout=HTTP_TIMEOUT)
    if r.status_code != 200:
        raise RuntimeError(f"Telegram {r.status_code}: {r.text}")

def tg_send_menu(chat_id, days: list[date]):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    keyboard = {"inline_keyboard": [[
        {"text": f"–°–µ–≥–æ–¥–Ω—è (ET) ‚Ä¢ {days[0]:%Y-%m-%d}", "callback_data": f"NBA_ET:{days[0]:%Y-%m-%d}"},
    ],[
        {"text": f"–í—á–µ—Ä–∞ (ET) ‚Ä¢ {days[1]:%Y-%m-%d}", "callback_data": f"NBA_ET:{days[1]:%Y-%m-%d}"},
    ],[
        {"text": f"-2 –¥–Ω—è (ET) ‚Ä¢ {days[2]:%Y-%m-%d}", "callback_data": f"NBA_ET:{days[2]:%Y-%m-%d}"},
    ]]}
    S.post(url, json={
        "chat_id": chat_id,
        "text": "–í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å (–ø–æ ET):",
        "reply_markup": keyboard,
    }, timeout=HTTP_TIMEOUT)

def tg_answer_callback(cb_id: str, text: str = ""):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
    S.post(url, json={"callback_query_id": cb_id, "text": text}, timeout=HTTP_TIMEOUT)


# ---------------- Telegram long-poll listener ----------------
def run_listener():
    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    url_updates = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    offset = None
    log("[LISTEN] started")
    while True:
        try:
            params = {"timeout": 50}
            if offset is not None:
                params["offset"] = offset
            r = S.get(url_updates, params=params, timeout=HTTP_TIMEOUT+50)
            if r.status_code != 200:
                continue
            data = r.json()
            for upd in data.get("result", []):
                offset = upd["update_id"] + 1
                # callback
                if "callback_query" in upd:
                    cb = upd["callback_query"]
                    cb_id = cb.get("id")
                    msg = cb.get("message") or {}
                    chat_id = (msg.get("chat") or {}).get("id")
                    data_cb = cb.get("data","")
                    if data_cb.startswith("NBA_ET:"):
                        ymd = data_cb.split(":",1)[1]
                        d = parse_ymd(ymd)
                        if d:
                            tg_answer_callback(cb_id, f"–§–æ—Ä–º–∏—Ä—É—é –ø–æ—Å—Ç –∑–∞ {d:%Y-%m-%d} (ET)‚Ä¶")
                            txt = build_post_for_et_day(d)
                            tg_send(txt, chat_id)
                    continue
                # message
                msg = upd.get("message") or {}
                chat_id = (msg.get("chat") or {}).get("id")
                text = (msg.get("text") or "").strip()
                if not text:
                    continue
                if text.startswith("/start") or text.startswith("/help"):
                    days = et_last_three_days()
                    tg_send("–ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥–∞ /nba –ø–æ–∫–∞–∂–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞—Ç (ET), –ª–∏–±–æ /nba YYYY-MM-DD –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã.", chat_id)
                    tg_send_menu(chat_id, days)
                elif text.startswith("/nba"):
                    parts = text.split(maxsplit=1)
                    if len(parts) == 2:
                        d = parse_ymd(parts[1].strip())
                        if d:
                            tg_send(f"–ì–æ—Ç–æ–≤–ª—é –ø–æ—Å—Ç –∑–∞ {d:%Y-%m-%d} (ET)‚Ä¶", chat_id)
                            txt = build_post_for_et_day(d)
                            tg_send(txt, chat_id)
                            continue
                    days = et_last_three_days()
                    tg_send_menu(chat_id, days)
                else:
                    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
                    days = et_last_three_days()
                    tg_send_menu(chat_id, days)
        except Exception:
            continue


# ---------------- MAIN ----------------
def main():
    import argparse
    parser = argparse.ArgumentParser(description="NBA Daily Results Bot")
    parser.add_argument("--listen", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å long-poll —Å–ª—É—à–∞—Ç–µ–ª—å Telegram")
    parser.add_argument("--date", type=str, help="–Ø–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å ET –¥–∞—Ç—É YYYY-MM-DD")
    args = parser.parse_args()

    if args.listen or NBA_LISTEN == "1":
        run_listener()
        return

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –ø–æ—Å—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π ¬´—Ä–µ–ø–æ—Ä—Ç-–¥–µ–Ω—å¬ª (ET)
    d = parse_ymd(args.date) if args.date else pick_et_report_day()
    txt = build_post_for_et_day(d)
    tg_send(txt)

if __name__ == "__main__":
    try:
        main()
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
