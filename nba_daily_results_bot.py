#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (RU)
–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: Sports.ru (—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—Ç—á–µ–π).
- –î–µ–Ω—å: https://www.sports.ru/stat/basketball/center/end/YYYY/MM/DD.html
- –ú–∞—Ç—á: https://www.sports.ru/basketball/match/<slug>/

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
‚Ä¢ –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–Ω—è —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –º–∞—Ç—á–µ–π –≤–∏–¥–∞ ".../<team-a>-vs-<team-b>/".
‚Ä¢ –ñ—ë—Å—Ç–∫–æ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ù–ë–ê –ø–æ —Å–ª—É–≥–∞–º (–æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–æ–ª–∂–Ω—ã –º–∞–ø–∏—Ç—å—Å—è –≤ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –ù–ë–ê).
‚Ä¢ –í–Ω—É—Ç—Ä–∏ –º–∞—Ç—á–∞ –∏—â–µ—Ç <h3> "‚Ä¶ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤" ‚Üí –±–ª–∏–∂–∞–π—à—É—é —Ç–∞–±–ª–∏—Ü—É ‚Üí —á–∏—Ç–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏ ¬´–ò—Ç–æ–≥–æ¬ª.
‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç 1‚Äì2 ¬´–≤—ã–¥–∞—é—â–∏—Ö—Å—è¬ª –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É:
  - –í—Å–µ–≥–¥–∞ –ª—É—á—à–∏–π –ø–æ –æ—á–∫–∞–º,
  - –ø–ª—é—Å –µ—â—ë –æ–¥–∏–Ω, –µ—Å–ª–∏: ‚â•20 –æ—á–∫–æ–≤, –ò–õ–ò –¥–∞–±–ª-–¥–∞–±–ª (–ø–æ PTS/REB/AST/STL/BLK),
    –ò–õ–ò ‚â•5 –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤, –ò–õ–ò ‚â•5 –±–ª–æ–∫-—à–æ—Ç–æ–≤.
‚Ä¢ –ï—Å–ª–∏ –∏–≥—Ä–∞–ª–∏ –ï–≥–æ—Ä –î—ë–º–∏–Ω (BKN) –∏–ª–∏ –í–ª–∞–¥ –ì–æ–ª–¥–∏–Ω (MIA) ‚Äî –≤–∫–ª—é—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è.
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º –ø–æ—Å—Ç–æ–º; —Å—á—ë—Ç –∏ —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–ø—Ä—è—Ç–∞–Ω—ã –≤ —Å–ø–æ–π–ª–µ—Ä—ã.
‚Ä¢ –ñ–∏—Ä–Ω—ã–º –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —Å—á—ë—Ç –ø–æ–±–µ–¥–∏–≤—à–µ–π –∫–æ–º–∞–Ω–¥—ã.
"""

import os, sys, re, json, time
from datetime import datetime, timedelta, date
from zoneinfo import ZoneInfo
from urllib.parse import urljoin

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup

# ---------- ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()
DEBUG     = bool(os.getenv("DEBUG_NBA", "").strip())

def logdbg(*a):
    if DEBUG:
        print("[DBG]", *a, file=sys.stderr)

# ---------- DATES ----------
def pick_report_date() -> date:
    now_et = datetime.now(ZoneInfo("America/New_York"))
    return (now_et.date() - timedelta(days=1)) if now_et.hour < 8 else now_et.date()

RU_MONTHS = {1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
             7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"}
def ru_date(d: date) -> str: return f"{d.day} {RU_MONTHS[d.month]}"
def ru_plural(n: int, forms: tuple[str,str,str]) -> str:
    n = abs(int(n)) % 100; n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

# ---------- HTTP ----------
def make_session():
    s = requests.Session()
    r = Retry(total=6, connect=6, read=6, backoff_factor=0.7,
              status_forcelist=[429,500,502,503,504], allowed_methods=["GET"])
    s.mount("https://", HTTPAdapter(max_retries=r))
    s.headers.update({
        "User-Agent": "NBA-DailyResultsBot/4.1 (sports.ru)",
        "Accept-Language": "ru,en;q=0.7",
    })
    return s
S = make_session()

# ---------- CONSTANTS / MAPS ----------
DAY_URL_TMPL = "https://www.sports.ru/stat/basketball/center/end/{y:04d}/{m:02d}/{d:02d}.html"
MATCH_PREFIX = "https://www.sports.ru/basketball/match/"

SLUG2ABBR = {
    "atlanta-hawks":"ATL","boston-celtics":"BOS","brooklyn-nets":"BKN","charlotte-hornets":"CHA",
    "chicago-bulls":"CHI","cleveland-cavaliers":"CLE","dallas-mavericks":"DAL","denver-nuggets":"DEN",
    "detroit-pistons":"DET","golden-state-warriors":"GSW","houston-rockets":"HOU","indiana-pacers":"IND",
    "los-angeles-clippers":"LAC","los-angeles-lakers":"LAL","memphis-grizzlies":"MEM","miami-heat":"MIA",
    "milwaukee-bucks":"MIL","minnesota-timberwolves":"MIN","new-orleans-pelicans":"NOP","new-york-knicks":"NYK",
    "oklahoma-city-thunder":"OKC","orlando-magic":"ORL","philadelphia-76ers":"PHI","phoenix-suns":"PHX",
    "portland-trail-blazers":"POR","sacramento-kings":"SAC","san-antonio-spurs":"SAS","toronto-raptors":"TOR",
    "utah-jazz":"UTA","washington-wizards":"WAS",
}
TEAM_RU = {
    "ATL":"–ê—Ç–ª–∞–Ω—Ç–∞","BOS":"–ë–æ—Å—Ç–æ–Ω","BKN":"–ë—Ä—É–∫–ª–∏–Ω","CHA":"–®–∞—Ä–ª–æ—Ç—Ç","CHI":"–ß–∏–∫–∞–≥–æ","CLE":"–ö–ª–∏–≤–ª–µ–Ω–¥",
    "DAL":"–î–∞–ª–ª–∞—Å","DEN":"–î–µ–Ω–≤–µ—Ä","DET":"–î–µ—Ç—Ä–æ–π—Ç","GSW":"–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç","HOU":"–•—å—é—Å—Ç–æ–Ω","IND":"–ò–Ω–¥–∏–∞–Ω–∞",
    "LAC":"–ö–ª–∏–ø–ø–µ—Ä—Å","LAL":"–õ–µ–π–∫–µ—Ä—Å","MEM":"–ú–µ–º—Ñ–∏—Å","MIA":"–ú–∞–π–∞–º–∏","MIL":"–ú–∏–ª—É–æ–∫–∏","MIN":"–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞",
    "NOP":"–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω","NYK":"–ù—å—é-–ô–æ—Ä–∫","OKC":"–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏","ORL":"–û—Ä–ª–∞–Ω–¥–æ","PHI":"–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è",
    "PHX":"–§–∏–Ω–∏–∫—Å","POR":"–ü–æ—Ä—Ç–ª–µ–Ω–¥","SAC":"–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ","SAS":"–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ","TOR":"–¢–æ—Ä–æ–Ω—Ç–æ","UTA":"–Æ—Ç–∞","WAS":"–í–∞—à–∏–Ω–≥—Ç–æ–Ω",
}
def abbr_from_url(url: str, side: int) -> str | None:
    m = re.search(r"/basketball/match/([a-z0-9\-]+)-vs-([a-z0-9\-]+)/", url)
    if not m: return None
    slug = m.group(1 + side)
    return SLUG2ABBR.get(slug)

def team_emoji(_abbr: str) -> str:
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –æ–±—ã—á–Ω—ã–π —Å–º–∞–π–ª. (–ö–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ entities ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π.)
    return "üèÄ"

# ---------- DAY LINKS ----------
def fetch_day_links(d: date) -> list[str]:
    url = DAY_URL_TMPL.format(y=d.year, m=d.month, d=d.day)
    r = S.get(url, timeout=25)
    if r.status_code != 200:
        logdbg("SPORTS DAY URL FAIL", url, r.status_code); return []
    logdbg("SPORTS DAY URL", url, "OK")
    soup = BeautifulSoup(r.text, "html.parser")
    links = []
    for a in soup.find_all("a", href=True):
        h = a["href"]
        if not (h.startswith("/basketball/match/") or h.startswith(MATCH_PREFIX)):
            continue
        if "/live/" in h:  # –ø—Ä—è–º–æ–π –ª–∞–π–≤ –±–µ–∑ –∏—Ç–æ–≥–∞ ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º
            continue
        full = urljoin("https://www.sports.ru", h)
        if "vs" not in full:    # –Ω–µ –º–∞—Ç—á ¬´–ê vs B¬ª
            continue
        links.append(full if full.endswith("/") else full + "/")
    # dedup
    out, seen = [], set()
    for u in links:
        if u not in seen:
            out.append(u); seen.add(u)
    logdbg("SPORTS LINKS", len(out))
    return out

# ---------- PARSE MATCH ----------
HEAD_TEAM_RE = re.compile(r"\s*([^.]+)\.\s*—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤\s*$", re.IGNORECASE)

def _norm_header(text: str) -> str:
    t = re.sub(r"\s+", "", text.strip().lower())
    # —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ sports.ru
    t = t.replace("–ø–µ—Ä–µ–¥–∞—á–∏", "–ø–µ—Ä–µ–¥")
    t = t.replace("–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã", "–ø–µ—Ä–µ—Ö")
    t = t.replace("–±–ª–æ–∫-—à–æ—Ç—ã", "–±–ª–æ–∫—à–æ—Ç—ã")
    t = t.replace("–±–ª–æ–∫-—à–æ—Ç", "–±–ª–æ–∫—à–æ—Ç—ã")
    t = t.replace("–ø–æ–¥–±–æ—Ä—ã", "–ø–æ–¥–±–æ—Ä")
    return t

def _metric_of_header(norm: str) -> str | None:
    if norm.startswith("–æ—á–∫–∏"): return "pts"
    if norm.startswith("–ø–æ–¥–±–æ—Ä"): return "reb"
    if norm.startswith("–ø–µ—Ä–µ–¥"): return "ast"
    if norm.startswith("–ø–µ—Ä–µ—Ö"): return "stl"
    if norm.startswith("–±–ª–æ–∫—à–æ—Ç—ã"): return "blk"
    return None

def _int_first(text: str) -> int:
    m = re.search(r"-?\d+", text or "")
    return int(m.group(0)) if m else 0

def parse_sports_match(url: str) -> dict | None:
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ù–ï-–ù–ë–ê –ø–æ —Å–ª—É–≥–∞–º:
    a_abbr = abbr_from_url(url, 0)
    b_abbr = abbr_from_url(url, 1)
    if not (a_abbr and b_abbr and a_abbr in TEAM_RU and b_abbr in TEAM_RU):
        return None  # –Ω–µ –ù–ë–ê

    r = S.get(url, timeout=25)
    if r.status_code != 200:
        logdbg("PARSE START", url, "HTTP", r.status_code); return None
    soup = BeautifulSoup(r.text, "html.parser")

    # –°–æ–±–∏—Ä–∞–µ–º –¥–≤–∞ –±–ª–æ–∫–∞ "‚Ä¶ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤"
    blocks = []
    for h3 in soup.find_all("h3"):
        txt = (h3.get_text(" ", strip=True) or "")
        m = HEAD_TEAM_RE.match(txt)
        if not m: 
            continue
        team_name = m.group(1).strip().strip('¬´¬ª"')
        # —Å–ª–µ–¥—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞
        tbl = h3.find_next("table")
        if not tbl:
            continue
        blocks.append((team_name, tbl))

    # –ù—É–∂–Ω—ã –¥–≤–∞ –ø–µ—Ä–≤—ã—Ö (–Ω–∞ Sports.ru –∏—Ö –∏–º–µ–Ω–Ω–æ –¥–≤–∞ ‚Äî –ø–æ –∫–æ–º–∞–Ω–¥–∞–º)
    if len(blocks) < 2:
        logdbg("PARSE START", url, "NO TEAM TABLES"); 
        return None

    def parse_table(team_name: str, tbl) -> tuple[list[dict], int]:
        # –æ–ø—Ä–µ–¥–µ–ª–∏–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        header_map = {}
        header_row = None
        for tr in tbl.find_all("tr"):
            ths = tr.find_all(["th","td"])
            # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞ ¬´–æ—á–∫–∏/–ø–æ–¥–±–æ—Ä—ã/...¬ª, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞
            if ths and any(re.search(r"[–ê-–Ø–∞-—èA-Za-z]", c.get_text()) for c in ths):
                header_row = [c.get_text(" ", strip=True) for c in ths]
                break
        if not header_row:
            return [], 0
        for idx, htxt in enumerate(header_row):
            metric = _metric_of_header(_norm_header(htxt))
            if metric and metric not in header_map:
                header_map[metric] = idx

        players = []
        team_total_pts = 0
        for tr in tbl.find_all("tr"):
            tds = tr.find_all("td")
            if not tds:
                continue
            # ¬´–ò—Ç–æ–≥–æ¬ª ‚Äî –∫–æ–º–∞–Ω–¥–∞:
            first_txt = tds[0].get_text(" ", strip=True)
            if re.search(r"^–∏—Ç–æ–≥–æ$", first_txt, re.IGNORECASE):
                # –æ—á–∫–∏ –∫–æ–º–∞–Ω–¥—ã
                if "pts" in header_map:
                    team_total_pts = _int_first(tds[header_map["pts"]].get_text(" ", strip=True))
                continue
            # –∏–Ω–∞—á–µ ‚Äî –∏–≥—Ä–æ–∫
            # –∏–º—è:
            name_cell = tds[0]
            a = name_cell.find("a")
            name_ru = (a.get_text(" ", strip=True) if a else name_cell.get_text(" ", strip=True)).strip()
            # –º–µ—Ç—Ä–∏–∫–∏:
            def val(metric):
                if metric not in header_map: 
                    return 0
                return _int_first(tds[header_map[metric]].get_text(" ", strip=True))
            p = {
                "name_ru": name_ru,
                "pts": val("pts"),
                "reb": val("reb"),
                "ast": val("ast"),
                "stl": val("stl"),
                "blk": val("blk"),
            }
            # –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Å—Ç—ã—à–∫–∏
            if any(p[k] for k in ("pts","reb","ast","stl","blk")):
                players.append(p)
        return players, team_total_pts

    teamA_name, tblA = blocks[0]
    teamB_name, tblB = blocks[1]
    playersA, scoreA = parse_table(teamA_name, tblA)
    playersB, scoreB = parse_table(teamB_name, tblB)

    # –ë—ã–≤–∞–µ—Ç, —á—Ç–æ ¬´–ò—Ç–æ–≥–æ¬ª —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç (—Ä–µ–¥–∫–æ) ‚Äî —Ç–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –æ–±—â–∏–π —Å—á—ë—Ç –∏–∑ —à–∞–ø–∫–∏
    if not (scoreA and scoreB):
        # –∏—â–µ–º ¬´XX:YY¬ª –≤–æ–∑–ª–µ —à–∞–ø–∫–∏
        txt = soup.get_text("\n", strip=True)
        m = re.search(r"\b(\d{1,3})\s*:\s*(\d{1,3})\b", txt)
        if m:
            scoreA = scoreA or int(m.group(1))
            scoreB = scoreB or int(m.group(2))

    ot = False
    # –î–µ—Ç–µ–∫—Ç –û–¢ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–µ—Ç–≤–µ—Ä—Ç–µ–π –≤ –±–ª–æ–∫–µ —Å—á—ë—Ç–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –µ—Å—Ç—å)
    per_table = None
    for h3 in soup.find_all("h3"):
        if "–ø–æ–º–µ—Å—è—á–Ω–æ" in (h3.get_text(" ", strip=True).lower()):
            # –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî —Ä–µ–¥–∫–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è; –ø—Ä–æ–ø—É—Å—Ç–∏–º
            continue
        txt = h3.get_text(" ", strip=True).lower()
        if "–ø–µ—Ä–∏–æ–¥—ã" in txt or "–ø–æ –ø–µ—Ä–∏–æ–¥–∞–º" in txt:
            per_table = h3.find_next("table")
            break
    if per_table:
        # –ø–æ—Å—á–∏—Ç–∞–µ–º –ø–∞—Ä—ã —á–∏—Å–µ–ª –≤ –ø–µ—Ä–≤–æ–π ¬´—Å–≤–æ–¥–Ω–æ–π¬ª —Å—Ç—Ä–æ–∫–µ
        row = per_table.find("tr")
        if row:
            s = row.get_text(" ", strip=True)
            pairs = re.findall(r"\b\d{1,2}\s*:\s*\d{1,2}\b", s)
            ot = len(pairs) > 4

    game = {
        "url": url,
        "teams": [
            {"name_ru": teamA_name, "abbr": a_abbr, "score": scoreA or 0, "players": playersA},
            {"name_ru": teamB_name, "abbr": b_abbr, "score": scoreB or 0, "players": playersB},
        ],
        "ot": ot,
    }
    logdbg("PARSE TEAMS", teamA_name, teamB_name, "SCORES", scoreA or 0, scoreB or 0,
           "A_rows", len(playersA), "B_rows", len(playersB))
    return game

# ---------- PICKING & FORMAT ----------
def is_double_double(p: dict) -> bool:
    cats = [p["pts"], p["reb"], p["ast"], p["stl"], p["blk"]]
    return sum(1 for v in cats if v >= 10) >= 2

def pick_players_for_team(team_abbr: str, plist: list[dict]) -> list[dict]:
    if not plist:
        return []
    plist_sorted = sorted(plist, key=lambda x: (x["pts"], x["reb"], x["ast"]), reverse=True)
    picked = []

    # —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫–∏
    want_last = "–î—ë–º–∏–Ω" if team_abbr == "BKN" else ("–ì–æ–ª–¥–∏–Ω" if team_abbr == "MIA" else None)
    special = None
    if want_last:
        for p in plist:
            if p["name_ru"].split()[-1].strip().lower() == want_last.lower():
                special = p; break

    best = plist_sorted[0]
    picked.append(best)

    if special and special not in picked:
        picked.append(special)
    else:
        for p in plist_sorted[1:]:
            if p in picked: 
                continue
            if p["pts"] >= 20 or is_double_double(p) or p["stl"] >= 5 or p["blk"] >= 5:
                picked.append(p)
                break

    return picked[:2]

def initials_plus_surname(name_ru: str) -> str:
    parts = [w for w in name_ru.split() if w]
    if len(parts) <= 1:
        return name_ru
    return f"{parts[0][0]}. {parts[-1]}"

def fmt_player_line(p: dict, force_top3: bool = False) -> str:
    name = initials_plus_surname(p["name_ru"])
    pts, reb, ast, stl, blk = p["pts"], p["reb"], p["ast"], p["stl"], p["blk"]

    if force_top3:
        extras = [
            ("–ø–æ–¥–±–æ—Ä","–ø–æ–¥–±–æ—Ä–∞","–ø–æ–¥–±–æ—Ä–æ–≤", reb),
            ("–ø–µ—Ä–µ–¥–∞—á–∞","–ø–µ—Ä–µ–¥–∞—á–∏","–ø–µ—Ä–µ–¥–∞—á", ast),
            ("–ø–µ—Ä–µ—Ö–≤–∞—Ç","–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞","–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤", stl),
            ("–±–ª–æ–∫-—à–æ—Ç","–±–ª–æ–∫-—à–æ—Ç–∞","–±–ª–æ–∫-—à–æ—Ç–æ–≤", blk),
        ]
        extras = [(w1,w2,w3,val) for (w1,w2,w3,val) in extras if val and val>0]
        extras.sort(key=lambda t: t[3], reverse=True)
        extras = extras[:3]
        parts = [f"{name}: {pts} {ru_plural(pts, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"]
        for (w1,w2,w3,val) in extras:
            parts.append(f"{val} {ru_plural(val,(w1,w2,w3))}")
        return "<span class=\"tg-spoiler\">" + ", ".join(parts) + "</span>"

    parts = [f"{name}: {pts} {ru_plural(pts, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"]
    if reb >= 5: parts.append(f"{reb} {ru_plural(reb, ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}")
    if ast >= 5: parts.append(f"{ast} {ru_plural(ast, ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}")
    if stl >= 4: parts.append(f"{stl} {ru_plural(stl, ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}")
    if blk >= 4: parts.append(f"{blk} {ru_plural(blk, ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}")
    return "<span class=\"tg-spoiler\">" + ", ".join(parts) + "</span>"

# ---------- BUILD POST ----------
def build_post(d: date) -> str:
    links = fetch_day_links(d)

    games = []
    for u in links:
        try:
            g = parse_sports_match(u)
            if g and (g["teams"][0]["score"] or g["teams"][1]["score"]):
                games.append(g)
        except Exception as e:
            logdbg("PARSE ERROR", u, repr(e))

    n = len(games)
    title = (
        f"–ù–ë–ê ‚Ä¢ {ru_date(d)} ‚Ä¢ {n} {ru_plural(n, ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n"
        "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n\n"
    )

    if n == 0:
        return title.rstrip()

    lines = []
    for idx, g in enumerate(games):
        t1, t2 = g["teams"][0], g["teams"][1]
        a_win = t1["score"] > t2["score"]
        b_win = t2["score"] > t1["score"]

        e1 = team_emoji(t1["abbr"])
        e2 = team_emoji(t2["abbr"])
        name1 = TEAM_RU.get(t1["abbr"], t1["name_ru"])
        name2 = TEAM_RU.get(t2["abbr"], t2["name_ru"])

        scoreA = f"<b>{t1['score']}</b>" if a_win else f"{t1['score']}"
        scoreB = f"<b>{t2['score']}</b>" if b_win else f"{t2['score']}"
        ot_tag = " (–û–¢)" if g["ot"] else ""

        lines.append(f"{e1} {name1}: <span class=\"tg-spoiler\">{scoreA}</span>")
        lines.append(f"{e2} {name2}: <span class=\"tg-spoiler\">{scoreB}</span>{ot_tag}")
        lines.append("")  # –æ—Ç—Å—Ç—É–ø

        # –∫–æ–º–∞–Ω–¥–∞ 1
        picked1 = pick_players_for_team(t1["abbr"], t1["players"])
        for p in picked1:
            force = (t1["abbr"] == "BKN" and p["name_ru"].split()[-1] == "–î—ë–º–∏–Ω") or \
                    (t1["abbr"] == "MIA" and p["name_ru"].split()[-1] == "–ì–æ–ª–¥–∏–Ω")
            lines.append(fmt_player_line(p, force_top3=force))

        if picked1:
            lines.append("")  # —Ä–∞–∑–¥–µ–ª –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ –±–ª–æ–∫–µ –∏–≥—Ä–æ–∫–æ–≤

        # –∫–æ–º–∞–Ω–¥–∞ 2
        picked2 = pick_players_for_team(t2["abbr"], t2["players"])
        for p in picked2:
            force = (t2["abbr"] == "BKN" and p["name_ru"].split()[-1] == "–î—ë–º–∏–Ω") or \
                    (t2["abbr"] == "MIA" and p["name_ru"].split()[-1] == "–ì–æ–ª–¥–∏–Ω")
            lines.append(fmt_player_line(p, force_top3=force))

        if idx + 1 < len(games):
            lines.append("")
            lines.append("‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì")
            lines.append("")

    return title + "\n".join(lines).strip()

# ---------- TELEGRAM ----------
def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    r = S.post(url, json=payload, timeout=25)
    if r.status_code != 200:
        raise RuntimeError(f"Telegram error {r.status_code}: {r.text}")

# ---------- MAIN ----------
if __name__ == "__main__":
    try:
        day = pick_report_date()
        logdbg("DAY", day.isoformat())
        post = build_post(day)
        tg_send(post)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
