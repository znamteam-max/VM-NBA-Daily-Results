#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (—Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç sports.ru –¥–ª—è —Ñ–∞–º–∏–ª–∏–π)

–î–∞–Ω–Ω—ã–µ:
‚Ä¢ –°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –¥–Ω—è, —Å—á—ë—Ç—ã, —Ä–µ–∫–æ—Ä–¥—ã (W-L) ‚Äî liveData scoreboard –æ—Ç NBA:
  https://cdn.nba.com/static/json/liveData/scoreboard/todaysScoreboard_00.json
‚Ä¢ –ò–≥—Ä–æ–∫–∏ –∏ –±–æ–∫—Å–∫–æ—Ä ‚Äî liveData boxscore –ø–æ gameId:
  https://cdn.nba.com/static/json/liveData/boxscore/boxscore_<gameId>.json
(—ç—Ç–∏ —ç–Ω–¥–ø–æ–π–Ω—Ç—ã –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã). 

–ò–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤:
‚Ä¢ –°—Ç—Ä–æ–≥–æ –∫–∞–∫ –Ω–∞ sports.ru/ basketball (—Ñ–∞–º–∏–ª–∏—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ).
‚Ä¢ –§–∞–π–ª—ã-–∫—ç—à–∏: ru_map_nba.json (id‚Üí—Ñ–∞–º–∏–ª–∏—è), ru_pending_nba.json (–æ—á–µ—Ä–µ–¥—å).
‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å sports.ru –Ω–µ –Ω–∞–π–¥–µ–Ω –º–≥–Ω–æ–≤–µ–Ω–Ω–æ ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ—Ä—ë–º —Å–ª–æ–≤–∞—Ä—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  + —Ç—Ä–∞–Ω—Å–ª–∏—Ç, –∞ –∏–≥—Ä–æ–∫ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å; –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–æ–±—å—ë—Ç –∫—ç—à.

–§–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–∞:
–ù–ë–ê ‚Ä¢ 25 –æ–∫—Ç—è–±—Ä—è ‚Ä¢ 12 –º–∞—Ç—á–µ–π
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá
‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì
üèÄ –î–æ–º: 116 (W-L)
üèÄ –ì–æ—Å—Ç–∏: 122 (W-L)

–§–∞–º–∏–ª–∏—è: X –æ—á–∫–æ–≤, Y –ø–æ–¥–±–æ—Ä–æ–≤, Z –ø–µ—Ä–µ–¥–∞—á
–§–∞–º–∏–ª–∏—è: ...
(–ø–æ—Ç–æ–º –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã)
‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì

–í—ã–±–æ—Ä ¬´–¥–≤—É—Ö –ª—É—á—à–∏—Ö¬ª ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—á–∫–∞–º (tiebreak: REB+AST, –∑–∞—Ç–µ–º +/-).
–ú–∞—Ä–∫–µ—Ä üî• –µ—Å–ª–∏ 35+ –æ—á–∫–æ–≤, –ª–∏–±–æ —Ç—Ä–∏–ø–ª-–¥–∞–±–ª, –ª–∏–±–æ 30+ –∏ –¥–∞–±–ª-–¥–∞–±–ª.
"""

import os
import sys
import re
import json
import time
import unicodedata
from datetime import datetime
from urllib.parse import quote_plus
from zoneinfo import ZoneInfo

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup

# --------------------------- Telegram ---------------------------

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()

# --------------------------- NBA API ---------------------------

NBA_SCOREBOARD = "https://cdn.nba.com/static/json/liveData/scoreboard/todaysScoreboard_00.json"
NBA_BOXSCORE   = "https://cdn.nba.com/static/json/liveData/boxscore/boxscore_{gid}.json"

# --------------------------- sports.ru -------------------------

SPORTS_RU_HOST   = "https://www.sports.ru"
SRU_PERSON_ROOT  = SPORTS_RU_HOST + "/basketball/person/"
SRU_PLAYER_ROOT  = SPORTS_RU_HOST + "/basketball/player/"
SRU_SEARCH       = SPORTS_RU_HOST + "/search/?q="

RU_MAP_PATH      = "ru_map_nba.json"
RU_PENDING_PATH  = "ru_pending_nba.json"

# --------------------------- –†—É—Å–∏—Ñ–∏–∫–∞—Ü–∏—è -----------------------

RU_MONTHS = {
    1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
    7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"
}

TEAMS_RU = {
    "ATL":"–ê—Ç–ª–∞–Ω—Ç–∞","BOS":"–ë–æ—Å—Ç–æ–Ω","BKN":"–ë—Ä—É–∫–ª–∏–Ω","CHA":"–®–∞—Ä–ª–æ—Ç—Ç","CHI":"–ß–∏–∫–∞–≥–æ","CLE":"–ö–ª–∏–≤–ª–µ–Ω–¥",
    "DAL":"–î–∞–ª–ª–∞—Å","DEN":"–î–µ–Ω–≤–µ—Ä","DET":"–î–µ—Ç—Ä–æ–π—Ç","GSW":"–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç","HOU":"–•—å—é—Å—Ç–æ–Ω","IND":"–ò–Ω–¥–∏–∞–Ω–∞",
    "LAC":"–ö–ª–∏–ø–ø–µ—Ä—Å","LAL":"–õ–µ–π–∫–µ—Ä—Å","MEM":"–ú–µ–º—Ñ–∏—Å","MIA":"–ú–∞–π–∞–º–∏","MIL":"–ú–∏–ª—É–æ–∫–∏","MIN":"–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞",
    "NOP":"–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω","NYK":"–ù—å—é-–ô–æ—Ä–∫","OKC":"–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏","ORL":"–û—Ä–ª–∞–Ω–¥–æ","PHI":"–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è",
    "PHX":"–§–∏–Ω–∏–∫—Å","POR":"–ü–æ—Ä—Ç–ª–µ–Ω–¥","SAC":"–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ","SAS":"–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ","TOR":"–¢–æ—Ä–æ–Ω—Ç–æ","UTA":"–Æ—Ç–∞",
    "WAS":"–í–∞—à–∏–Ω–≥—Ç–æ–Ω"
}

# –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Ñ–∞–º–∏–ª–∏–∏ (—Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–ø–¥–µ–π—Ç–µ—Ä–æ–º)
EXCEPT_LAST = {
    "Doncic":"–î–æ–Ω—á–∏—á","Jokic":"–ô–æ–∫–∏—á","Embiid":"–≠–º–±–∏–∏–¥","Curry":"–ö–∞—Ä—Ä–∏","James":"–î–∂–µ–π–º—Å","Davis":"–î—ç–≤–∏—Å",
    "Durant":"–î—é—Ä—ç–Ω—Ç","Booker":"–ë—É–∫–µ—Ä","Irving":"–ò—Ä–≤–∏–Ω–≥","Tatum":"–¢–µ–π—Ç—É–º","Brown":"–ë—Ä–∞—É–Ω","Harden":"–•–∞—Ä–¥–µ–Ω",
    "George":"–î–∂–æ—Ä–¥–∂","Leonard":"–õ–µ–æ–Ω–∞—Ä–¥","Antetokounmpo":"–ê–¥–µ—Ç–æ–∫—É–º–±–æ","Young":"–Ø–Ω–≥","Adebayo":"–ê–¥–µ–±–∞–π–æ",
    "Williamson":"–£–∏–ª—å—è–º—Å–æ–Ω","Mitchell":"–ú–∏—Ç—á–µ–ª–ª","Brunson":"–ë—Ä–∞–Ω—Å–æ–Ω","Randle":"–†—ç–Ω–¥–ª","Sabonis":"–°–∞–±–æ–Ω–∏—Å",
    "Markkanen":"–ú–∞—Ä–∫–∫–∞–Ω–µ–Ω","Haliburton":"–•–∞–ª–∏–±–µ—Ä—Ç–æ–Ω","Wembanyama":"–í–µ–º–±–∞–Ω—å—è–º–∞","Edwards":"–≠–¥–≤–∞—Ä–¥—Å",
    "Siakam":"–°–∏–∞–∫–∞–º","Anunoby":"–ê–Ω—É–Ω–æ–±–∏","Porzingis":"–ü–æ—Ä–∑–∏–Ω–≥–∏—Å","Gilgeous-Alexander":"–ì–∏–ª–¥–∂–µ—Å-–ê–ª–µ–∫—Å–∞–Ω–¥–µ—Ä",
    "Fox":"–§–æ–∫—Å","Kawhi":"–õ–µ–æ–Ω–∞—Ä–¥","Maxey":"–ú–∞–∫—Å–∏","Holiday":"–•–æ–ª–∏–¥—ç–π","Lopez":"–õ–æ–ø–µ—Å","Mobley":"–ú–æ–±–ª–∏",
    "Allen":"–ê–ª–ª–µ–Ω","Hachimura":"–•–∞—á–∏–º—É—Ä–∞","Vucevic":"–í—É—á–µ–≤–∏—á","Adebajo":"–ê–¥–µ–±–∞–π–æ","Ayton":"–≠–π—Ç–æ–Ω",
}

# --------------------------- –£—Ç–∏–ª–∏—Ç—ã ---------------------------

def log(*a): print(*a, file=sys.stderr)

def make_session():
    s = requests.Session()
    r = Retry(total=6, connect=6, read=6, backoff_factor=0.6,
              status_forcelist=[429,500,502,503,504], allowed_methods=["GET","POST"])
    s.mount("https://", HTTPAdapter(max_retries=r))
    s.headers.update({
        "User-Agent":"NBA-DailyResultsBot/1.0 (+cdn.nba.com liveData; sports.ru resolver)",
        "Accept":"application/json, text/html;q=0.8",
        "Accept-Language":"ru-RU,ru;q=0.9,en;q=0.6"
    })
    return s

S = make_session()

def ru_plural(n: int, forms: tuple[str,str,str]) -> str:
    n = abs(int(n)) % 100
    n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if n1 == 1: return forms[0]
    if 2 <= n1 <= 4: return forms[1]
    return forms[2]

def ru_date(d: datetime) -> str:
    return f"{d.day} {RU_MONTHS[d.month]}"

def _load_json(path: str, default):
    if not os.path.exists(path):
        return default
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def _save_json(path: str, data):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    os.replace(tmp, path)

RU_MAP = _load_json(RU_MAP_PATH, {})          # personId -> "–§–∞–º–∏–ª–∏—è"
RU_PENDING = _load_json(RU_PENDING_PATH, [])  # [{id, first, last}]
_pending_ids_session: set[str] = set()

def pick_report_day_et() -> datetime:
    # –ó–∞–ø—É—Å–∫ –ø–æ –õ–æ–Ω–¥–æ–Ω—É —É—Ç—Ä–æ–º ‚Üí –≤ ET –µ—â—ë ¬´—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π¬ª –¥–µ–Ω—å —Å –∏–≥—Ä–∞–º–∏
    now_et = datetime.now(ZoneInfo("America/New_York"))
    # –ñ–¥—ë–º –ø–æ–∫–∞ –≤—Å—ë —Ç–æ—á–Ω–æ —Ñ–∏–Ω–∞–ª–∏—Ç—Å—è ‚Äî –ø–æ—Å–ª–µ 06:00 ET –æ–±—ã—á–Ω–æ —É–∂–µ –æ–∫
    if now_et.hour < 6:
        return now_et  # –≤—Å—ë —Ä–∞–≤–Ω–æ –±–µ—Ä—ë–º ¬´today¬ª —Å liveData
    return now_et

# --------------------------- –°–ø–æ—Ä—Ç—Å.—Ä—É –∏–º–µ–Ω–∞ ------------------

def _slugify(first: str, last: str) -> str:
    base = f"{first} {last}".strip()
    base = unicodedata.normalize("NFKD", base)
    base = "".join(ch for ch in base if not unicodedata.combining(ch))
    base = base.lower().strip()
    base = re.sub(r"[^a-z0-9]+","-", base).strip("-")
    return base

def _sportsru_try_profile(first: str, last: str) -> str | None:
    slug = _slugify(first, last)
    for root in (SRU_PERSON_ROOT, SRU_PLAYER_ROOT):
        url = root + slug + "/"
        r = S.get(url, timeout=20)
        if r.status_code == 200 and ("/basketball/person/" in r.url or "/basketball/player/" in r.url):
            return url
    return None

def _sportsru_extract_surname(url: str) -> str | None:
    r = S.get(url, timeout=20)
    if r.status_code != 200: return None
    soup = BeautifulSoup(r.text, "html.parser")
    h = soup.find(["h1","h2"])
    if not h: return None
    full = " ".join(h.get_text(" ", strip=True).split())
    parts = [p for p in re.split(r"\s+", full) if p]
    if len(parts) >= 2:
        # –ø–æ—Å–ª–µ–¥–Ω–∏–π ¬´—Ç–æ–∫–µ–Ω¬ª –æ–±—ã—á–Ω–æ —Ñ–∞–º–∏–ª–∏—è; –ø–æ–∫—Ä—ã–≤–∞–µ—Ç ¬´–î–∂–µ–∫—Å–æ–Ω-–º–ª.¬ª
        return parts[-1]
    return None

def _sportsru_search_surname(first: str, last: str) -> str | None:
    q = quote_plus(f"{first} {last}".strip())
    r = S.get(SRU_SEARCH + q, timeout=20)
    if r.status_code != 200: return None
    soup = BeautifulSoup(r.text, "html.parser")
    link = soup.select_one('a[href*="/basketball/person/"]') or soup.select_one('a[href*="/basketball/player/"]')
    if not link or not link.get("href"): return None
    href = link["href"]
    if href.startswith("/"): href = SPORTS_RU_HOST + href
    return _sportsru_extract_surname(href)

def _queue_pending(pid: str, first: str, last: str):
    if not pid or pid in _pending_ids_session: return
    if pid in RU_MAP: return
    for it in RU_PENDING:
        if str(it.get("id")) == pid: return
    RU_PENDING.append({"id": pid, "first": first or "", "last": last or ""})
    _pending_ids_session.add(pid)

def ru_surname(pid: str, first: str, last: str) -> str:
    pid = str(pid)
    if pid in RU_MAP:
        return RU_MAP[pid]

    # —Å–ª–æ–≤–∞—Ä—å –≥—Ä–æ–º–∫–∏—Ö —Ñ–∞–º–∏–ª–∏–π –∫–∞–∫ fallback
    if last in EXCEPT_LAST:
        RU_MAP[pid] = EXCEPT_LAST[last]
        return RU_MAP[pid]

    # sports.ru slug ‚Üí –ø—Ä–æ—Ñ–∏–ª—å
    try:
        url = _sportsru_try_profile(first, last)
        if url:
            sname = _sportsru_extract_surname(url)
            if sname:
                RU_MAP[pid] = sname
                return sname
    except Exception as e:
        log("[sports.ru slug] fail", first, last, e)

    # –ø–æ–∏—Å–∫
    try:
        sname = _sportsru_search_surname(first, last)
        if sname:
            RU_MAP[pid] = sname
            return sname
    except Exception as e:
        log("[sports.ru search] fail", first, last, e)

    # –æ—á–µ—Ä–µ–¥—å –Ω–∞ –¥–æ—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    _queue_pending(pid, first, last)
    # –≤—Ä–µ–º–µ–Ω–Ω–æ ‚Äî –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∫–∞–∫ –µ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ —Ñ–∞–º–∏–ª–∏–∏)
    return last or first or pid

# --------------------------- –ü–∞—Ä—Å–∏–Ω–≥ liveData ------------------

def fetch_scoreboard() -> list[dict]:
    r = S.get(NBA_SCOREBOARD, timeout=25)
    r.raise_for_status()
    j = r.json() or {}
    games = j.get("scoreboard", {}).get("games", []) or []
    out = []
    for g in games:
        # gameStatus: 1 ‚Äî –ø—Ä–µ–¥–º–∞—Ç—á, 2 ‚Äî –∏–¥—ë—Ç, 3 ‚Äî —Ñ–∏–Ω–∞–ª
        if int(g.get("gameStatus", 0)) != 3:
            continue
        gid = str(g.get("gameId"))
        h = g.get("homeTeam", {}) or {}
        a = g.get("awayTeam", {}) or {}
        out.append({
            "gameId": gid,
            "homeAbbr": (h.get("teamTricode") or h.get("triCode") or "").upper(),
            "awayAbbr": (a.get("teamTricode") or a.get("triCode") or "").upper(),
            "homeScore": int(h.get("score", 0)),
            "awayScore": int(a.get("score", 0)),
            "homeW": int(h.get("wins", 0)), "homeL": int(h.get("losses", 0)),
            "awayW": int(a.get("wins", 0)), "awayL": int(a.get("losses", 0)),
        })
    return out

def fetch_boxscore(game_id: str) -> dict:
    r = S.get(NBA_BOXSCORE.format(gid=game_id), timeout=25)
    r.raise_for_status()
    j = r.json() or {}
    game = j.get("game", {}) or {}
    return {
        "home": (game.get("homeTeam") or {}),
        "away": (game.get("awayTeam") or {}),
    }

def _extract_name_fields(p: dict) -> tuple[str,str]:
    # NBA liveData —á–∞—â–µ –¥–∞—ë—Ç firstName/familyName; –∏–Ω–∞—á–µ —Ä–∞–∑–æ–±—å—ë–º name
    fn = (p.get("firstName") or "").strip()
    ln = (p.get("familyName") or "").strip()
    if not (fn and ln):
        nm = (p.get("name") or "").strip()
        parts = [x for x in re.split(r"\s+", nm) if x]
        if len(parts) >= 2:
            fn = fn or parts[0]
            ln = ln or parts[-1]
    return fn, ln

def _pick_top_two(players: list[dict]) -> list[dict]:
    act = []
    for p in players or []:
        st = (p.get("status") or "").upper()
        stats = p.get("statistics") or {}
        pts = int(stats.get("points") or 0)
        reb = int(stats.get("reboundsTotal") or stats.get("rebounds") or 0)
        ast = int(stats.get("assists") or 0)
        pm  = int(stats.get("plusMinusPoints") or 0)
        # –æ—Ç—Å–µ–∫–∞–µ–º —Å–æ–≤—Å–µ–º DNP (—É –Ω–∏—Ö –æ–±—ã—á–Ω–æ –Ω–µ—Ç statistics)
        if pts == reb == ast == 0 and not stats:
            continue
        score_key = (pts, reb+ast, pm)
        act.append({"raw":p, "pts":pts, "reb":reb, "ast":ast, "pm":pm, "key":score_key})
    act.sort(key=lambda x: x["key"], reverse=True)
    return act[:2]

def _flame(pts:int, reb:int, ast:int, stl:int, blk:int) -> str:
    dbl = sum(v>=10 for v in (pts,reb,ast,stl,blk))
    if pts >= 35 or dbl >= 3 or (pts>=30 and dbl>=2):
        return " üî•"
    return ""

def player_line_ru(p: dict, pid: str) -> str:
    fn, ln = _extract_name_fields(p)
    stats = p.get("statistics") or {}
    pts = int(stats.get("points") or 0)
    reb = int(stats.get("reboundsTotal") or stats.get("rebounds") or 0)
    ast = int(stats.get("assists") or 0)
    stl = int(stats.get("steals") or 0)
    blk = int(stats.get("blocks") or 0)

    fam = ru_surname(pid, fn, ln)

    pts_word = ru_plural(pts, ("–æ—á–∫–æ","–æ—á–∫–∞","–æ—á–∫–æ–≤"))
    reb_word = ru_plural(reb, ("–ø–æ–¥–±–æ—Ä","–ø–æ–¥–±–æ—Ä–∞","–ø–æ–¥–±–æ—Ä–æ–≤"))
    ast_word = ru_plural(ast, ("–ø–µ—Ä–µ–¥–∞—á–∞","–ø–µ—Ä–µ–¥–∞—á–∏","–ø–µ—Ä–µ–¥–∞—á"))

    return f"{fam}: {pts} {pts_word}, {reb} {reb_word}, {ast} {ast_word}{_flame(pts,reb,ast,stl,blk)}"

def build_game_block(gmeta: dict) -> str:
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    home_ru = TEAMS_RU.get(gmeta["homeAbbr"], gmeta["homeAbbr"])
    away_ru = TEAMS_RU.get(gmeta["awayAbbr"], gmeta["awayAbbr"])
    head = (f"üèÄ {home_ru}: {gmeta['homeScore']} ({gmeta['homeW']}-{gmeta['homeL']})\n"
            f"üèÄ {away_ru}: {gmeta['awayScore']} ({gmeta['awayW']}-{gmeta['awayL']})\n\n")

    # –ò–≥—Ä–æ–∫–∏
    box = fetch_boxscore(gmeta["gameId"])
    h_players = (box.get("home") or {}).get("players") or []
    a_players = (box.get("away") or {}).get("players") or []

    top_h = _pick_top_two(h_players)
    top_a = _pick_top_two(a_players)

    lines = []
    for x in top_h:
        pid = str((x["raw"].get("personId") or x["raw"].get("playerId") or ""))
        lines.append(player_line_ru(x["raw"], pid))
    lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
    for x in top_a:
        pid = str((x["raw"].get("personId") or x["raw"].get("playerId") or ""))
        lines.append(player_line_ru(x["raw"], pid))

    return head + "\n".join(lines)

def build_post_text(games: list[dict]) -> str:
    now_et = pick_report_day_et()
    title = f"–ù–ë–ê ‚Ä¢ {ru_date(now_et)} ‚Ä¢ {len(games)} {ru_plural(len(games), ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n"
    title += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n"
    title += "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n"
    parts = [title]
    for i, g in enumerate(games, 1):
        parts.append(build_game_block(g))
        if i < len(games):
            parts.append("‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì")
    return "\n".join(parts)

def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    MAX = 3500
    rest = text
    while rest:
        if len(rest) <= MAX:
            chunk = rest
            rest = ""
        else:
            cut = rest.rfind("\n‚Äì‚Äì‚Äì‚Äì", 0, MAX)
            if cut == -1: cut = rest.rfind("\n", 0, MAX)
            if cut == -1: cut = MAX
            chunk, rest = rest[:cut], rest[cut:].lstrip()
        resp = S.post(url, json={
            "chat_id": CHAT_ID,
            "text": chunk,
            "parse_mode": "HTML",
            "disable_web_page_preview": True,
        }, timeout=25)
        if resp.status_code != 200:
            raise RuntimeError(f"Telegram error {resp.status_code}: {resp.text}")
        time.sleep(0.4)

if __name__ == "__main__":
    try:
        games = fetch_scoreboard()
        if not games:
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ FIN, –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º —à–∞–ø–∫—É ¬´0 –º–∞—Ç—á–µ–π¬ª ‚Äì —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π
            text = build_post_text([])
        else:
            text = build_post_text(games)
        tg_send(text)
        # –û–±–Ω–æ–≤–∏–º —Ñ–∞–π–ª—ã –∫—ç—à–∞/–æ—á–µ—Ä–µ–¥–∏ (—Å–æ–∑–¥–∞–¥–∏–º, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ)
        _save_json(RU_MAP_PATH, RU_MAP)
        _save_json(RU_PENDING_PATH, RU_PENDING)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
