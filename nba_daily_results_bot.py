#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (RU)
–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: Sports.ru (—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–∞—Ç—á–µ–π).
- –î–µ–Ω—å: https://www.sports.ru/stat/basketball/center/end/YYYY/MM/DD.html
- –ú–∞—Ç—á: https://www.sports.ru/basketball/match/<slug>/

–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–º –±–ª–æ–∫–∞–º "### <–ö–æ–º–∞–Ω–¥–∞>. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤".
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—á–∫–æ–≤, –ø–æ–¥–±–æ—Ä–æ–≤, –ø–µ—Ä–µ–¥–∞—á, –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤ –∏ –±–ª–æ–∫-—à–æ—Ç–æ–≤.
‚Ä¢ –í—ã–±–æ—Ä ¬´–≤—ã–¥–∞—é—â–∏—Ö—Å—è¬ª –∏–≥—Ä–æ–∫–æ–≤ (min 1, max 2 –Ω–∞ –∫–æ–º–∞–Ω–¥—É):
  - –í—Å–µ–≥–¥–∞ –ª—É—á—à–∏–π —Å–∫–æ—Ä–µ—Ä –∫–æ–º–∞–Ω–¥—ã.
  - –ü–ª—é—Å –µ—â—ë –æ–¥–∏–Ω, –µ—Å–ª–∏: ‚â•20 –æ—á–∫–æ–≤, –ò–õ–ò –¥–∞–±–ª-–¥–∞–±–ª (–ø–æ –ª—é–±–æ–π –∏–∑ –ø—è—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: PTS/REB/AST/STL/BLK),
    –ò–õ–ò ‚â•5 –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤, –ò–õ–ò ‚â•5 –±–ª–æ–∫-—à–æ—Ç–æ–≤.
‚Ä¢ –ï—Å–ª–∏ –∏–≥—Ä–∞–ª–∏ –ï–≥–æ—Ä –î—ë–º–∏–Ω (BKN) –∏–ª–∏ –í–ª–∞–¥ –ì–æ–ª–¥–∏–Ω (MIA) ‚Äî –≤–∫–ª—é—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è.
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–∏–º –ø–æ—Å—Ç–æ–º; —Å—á—ë—Ç –∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å–ø—Ä—è—Ç–∞–Ω—ã –≤ —Å–ø–æ–π–ª–µ—Ä—ã.
‚Ä¢ –ñ–∏—Ä–Ω—ã–º –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —Å—á—ë—Ç –ø–æ–±–µ–¥–∏–≤—à–µ–π –∫–æ–º–∞–Ω–¥—ã.
‚Ä¢ –¢–æ–ª—å–∫–æ –ù–ë–ê (–ª—é–±–æ–π –Ω–µ-–ù–ë–ê –º–∞—Ç—á —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–Ω—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –º–∞—Ç—á–∞).

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ø–æ —ç–º–æ–¥–∑–∏-–ª–æ–≥–æ—Ç–∏–ø–∞–º:
- –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏ (–ø–∞–∫), –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TEAM_EMOJI_JSON –ø–æ–ª–æ–∂–∏—Ç–µ JSON-—Å–ª–æ–≤–∞—Ä—å
  –≤–∏–¥–∞ {"MIL":"<custom_emoji_id>", "NYK":"<id>", ...}. –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –±—É–¥–µ—Ç –æ–±—ã—á–Ω—ã–π "üèÄ".
- –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –º—ã –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ HTML-—Ä–∞–∑–º–µ—Ç–∫–µ (–¥–ª—è —Å–ø–æ–π–ª–µ—Ä–æ–≤ –∏ <b>), –ø–æ—ç—Ç–æ–º—É –ª–æ–≥–æ—Ç–∏–ø ‚Äî –æ–±—ã—á–Ω—ã–π —Å–∏–º–≤–æ–ª –≤ —Ç–µ–∫—Å—Ç–µ.
  –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–º–µ–Ω–Ω–æ –∫–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏ –∏–∑ –ø–∞–∫–æ–≤ —Å entity type=custom_emoji, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤–µ—Å—å —Ä–µ–Ω–¥–µ—Ä
  –Ω–∞ entities –±–µ–∑ parse_mode. –≠—Ç–æ —Å–¥–µ–ª–∞—é –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–æ–º–º–∏—Ç–æ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É.
"""

import os, sys, re, json, time, unicodedata
from datetime import datetime, timedelta, date
from zoneinfo import ZoneInfo
from urllib.parse import urljoin

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup

# ---------- ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()
DEBUG     = bool(os.getenv("DEBUG_NBA", "").strip())

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–ª–æ–≤–∞—Ä—å –∫–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏: {"MIL":"<id>", ...}
try:
    TEAM_EMOJI_MAP = json.loads(os.getenv("TEAM_EMOJI_JSON", "{}") or "{}")
except Exception:
    TEAM_EMOJI_MAP = {}

# ---------- DATES (America/New_York) ----------
def pick_report_date() -> date:
    now_et = datetime.now(ZoneInfo("America/New_York"))
    # –æ—Ç—á—ë—Ç –¥–µ–ª–∞–µ–º –ø–æ –≤—á–µ—Ä–∞—à–Ω–µ–º—É –¥–Ω—é, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –µ—â—ë –æ—á–µ–Ω—å —Ä–∞–Ω–æ –ø–æ ET
    return (now_et.date() - timedelta(days=1)) if now_et.hour < 8 else now_et.date()

RU_MONTHS = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è",
}
def ru_date(d: date) -> str: return f"{d.day} {RU_MONTHS[d.month]}"

def ru_plural(n: int, forms: tuple[str, str, str]) -> str:
    n = abs(int(n)) % 100; n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

def logdbg(*a):
    if DEBUG:
        print("[DBG]", *a, file=sys.stderr)

# ---------- HTTP ----------
def make_session():
    s = requests.Session()
    r = Retry(total=6, connect=6, read=6, backoff_factor=0.7,
              status_forcelist=[429,500,502,503,504], allowed_methods=["GET"])
    s.mount("https://", HTTPAdapter(max_retries=r))
    # user-agent —Ç–æ–ª—å–∫–æ ASCII (–∏–Ω–∞—á–µ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–Ω–Ω–µ—Ä–∞—Ö –¥–∞—ë—Ç UnicodeEncodeError)
    s.headers.update({
        "User-Agent": "NBA-DailyResultsBot/4.0 (sports.ru)",
        "Accept-Language": "ru,en;q=0.7",
    })
    return s

S = make_session()

# ---------- UTILS ----------
DAY_URL_TMPL = "https://www.sports.ru/stat/basketball/center/end/{y:04d}/{m:02d}/{d:02d}.html"
MATCH_PREFIX = "https://www.sports.ru/basketball/match/"

NBA_RU_NAMES = {
    # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–≥–æ ¬´—á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ¬ª –Ω–∞–∑–≤–∞–Ω–∏—è
    "ATL":"–ê—Ç–ª–∞–Ω—Ç–∞","BOS":"–ë–æ—Å—Ç–æ–Ω","BKN":"–ë—Ä—É–∫–ª–∏–Ω","CHA":"–®–∞—Ä–ª–æ—Ç—Ç","CHI":"–ß–∏–∫–∞–≥–æ","CLE":"–ö–ª–∏–≤–ª–µ–Ω–¥",
    "DAL":"–î–∞–ª–ª–∞—Å","DEN":"–î–µ–Ω–≤–µ—Ä","DET":"–î–µ—Ç—Ä–æ–π—Ç","GSW":"–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç","HOU":"–•—å—é—Å—Ç–æ–Ω","IND":"–ò–Ω–¥–∏–∞–Ω–∞",
    "LAC":"–ö–ª–∏–ø–ø–µ—Ä—Å","LAL":"–õ–µ–π–∫–µ—Ä—Å","MEM":"–ú–µ–º—Ñ–∏—Å","MIA":"–ú–∞–π–∞–º–∏","MIL":"–ú–∏–ª—É–æ–∫–∏","MIN":"–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞",
    "NOP":"–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω","NYK":"–ù—å—é-–ô–æ—Ä–∫","OKC":"–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏","ORL":"–û—Ä–ª–∞–Ω–¥–æ","PHI":"–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è",
    "PHX":"–§–∏–Ω–∏–∫—Å","POR":"–ü–æ—Ä—Ç–ª–µ–Ω–¥","SAC":"–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ","SAS":"–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ","TOR":"–¢–æ—Ä–æ–Ω—Ç–æ","UTA":"–Æ—Ç–∞","WAS":"–í–∞—à–∏–Ω–≥—Ç–æ–Ω",
}

# –¥–ª—è —ç–º–æ–¥–∑–∏ ‚Äî –ø–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–µ
def team_emoji(abbr: str) -> str:
    if abbr in TEAM_EMOJI_MAP:
        # –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è —Ç–µ–∫—Å—Ç–∞; –∫–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ entities ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
        return "üèÄ"  # –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä (–≤–∏–∑—É–∞–ª—å–Ω–æ); —Å–∞–º –∫–∞—Å—Ç–æ–º ID –ø–æ–∫–∞ –Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω –≤ —Ç–µ–∫—Å—Ç
    return "üèÄ"

# –ø–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∏–∑ slug URL
SLUG2ABBR = {
    "atlanta-hawks":"ATL","boston-celtics":"BOS","brooklyn-nets":"BKN","charlotte-hornets":"CHA",
    "chicago-bulls":"CHI","cleveland-cavaliers":"CLE","dallas-mavericks":"DAL","denver-nuggets":"DEN",
    "detroit-pistons":"DET","golden-state-warriors":"GSW","houston-rockets":"HOU","indiana-pacers":"IND",
    "los-angeles-clippers":"LAC","los-angeles-lakers":"LAL","memphis-grizzlies":"MEM","miami-heat":"MIA",
    "milwaukee-bucks":"MIL","minnesota-timberwolves":"MIN","new-orleans-pelicans":"NOP","new-york-knicks":"NYK",
    "oklahoma-city-thunder":"OKC","orlando-magic":"ORL","philadelphia-76ers":"PHI","phoenix-suns":"PHX",
    "portland-trail-blazers":"POR","sacramento-kings":"SAC","san-antonio-spurs":"SAS","toronto-raptors":"TOR",
    "utah-jazz":"UTA","washington-wizards":"WAS",
}

def abbr_from_url(url: str, side: int) -> str | None:
    """
    side: 0 ‚Äî —Ö–æ–∑—è–µ–≤–∞ –≤ slug —Å–ª–µ–≤–∞, 1 ‚Äî –≥–æ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∞.
    –ü—Ä–∏–º–µ—Ä: .../charlotte-hornets-vs-orlando-magic/  -> 0: CHA, 1: ORL
    """
    m = re.search(r"/basketball/match/([a-z0-9\-]+)-vs-([a-z0-9\-]+)/", url)
    if not m: return None
    slug = m.group(1 + side)
    return SLUG2ABBR.get(slug)

# ---------- FETCH LINKS OF THE DAY ----------
def fetch_day_links(d: date) -> list[str]:
    url = DAY_URL_TMPL.format(y=d.year, m=d.month, d=d.day)
    r = S.get(url, timeout=25)
    if r.status_code != 200:
        logdbg("SPORTS DAY URL FAIL", url, r.status_code)
        return []
    logdbg("SPORTS DAY URL", url, "OK")
    soup = BeautifulSoup(r.text, "html.parser")
    links = []
    for a in soup.find_all("a", href=True):
        h = a["href"]
        if not h.startswith("/basketball/match/") and not h.startswith(MATCH_PREFIX):
            continue
        # –æ—Ç–±—Ä–æ—Å–∏–º ¬´/live/¬ª, –ø—É—Å—Ç—ã–µ –¥–∞—Ç—ã –∏ —Ç.–ø.
        if "/live/" in h:
            continue
        full = urljoin("https://www.sports.ru", h)
        links.append(full if full.endswith("/") else full + "/")
    # dedup & —Ç–æ–ª—å–∫–æ ¬´vs¬ª –≤–Ω—É—Ç—Ä–∏ slug (–∏–Ω–∞—á–µ —ç—Ç–æ –Ω–µ –º–∞—Ç—á 1—Ö1)
    uniq = []
    seen = set()
    for u in links:
        if "vs" not in u: 
            continue
        if u not in seen:
            uniq.append(u); seen.add(u)
    logdbg("SPORTS LINKS", len(uniq))
    return uniq

# ---------- PARSE ONE MATCH (Sports.ru) ----------
TEAM_BLOCK_RE = re.compile(r"^###\s*([^\n]+)\.\s*—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤\s*$", re.IGNORECASE)

def _text_lines(html: str) -> list[str]:
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–µ —É–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–ø–µ—Ü-—Å—Å—ã–ª–∫–∏  ‚Äî –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –¥–æ—Å—Ç–∞—Ç—å –∏–º—è
    soup = BeautifulSoup(html, "html.parser")
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç
    txt = soup.get_text("\n", strip=False)
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
    lines = [ln.strip() for ln in txt.split("\n")]
    return [ln for ln in lines if ln is not None]

def _ensure_is_nba(lines: list[str]) -> bool:
    joined = "\n".join(lines)
    return ("–ù–ë–ê" in joined) or ("NBA" in joined.upper())

def _extract_team_blocks(lines: list[str]) -> list[tuple[str, int, int]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ "### <–ö–æ–º–∞–Ω–¥–∞>. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    [(team_name, start_line_index, end_line_index_exclusive)] ‚Äî –¥–≤–∞ –±–ª–æ–∫–∞ (–¥–ª—è –º–∞—Ç—á–∞).
    """
    idxs = []
    for i, ln in enumerate(lines):
        m = TEAM_BLOCK_RE.match(ln)
        if m:
            team = m.group(1).strip()
            idxs.append((team, i))
    blocks = []
    for k in range(len(idxs)):
        team, i = idxs[k]
        j = idxs[k+1][1] if k + 1 < len(idxs) else len(lines)
        blocks.append((team, i, j))
    # –í –∏–¥–µ–∞–ª–µ –Ω–∞ –º–∞—Ç—á–µ —Ä–æ–≤–Ω–æ 2 —Ç–∞–∫–∏—Ö –±–ª–æ–∫–∞
    return blocks[:2]

PLAYER_LINK_RE = re.compile(r"^„Äê\d+‚Ä†([^„Äë]+)„Äë$")

def _parse_players_from_block(block_lines: list[str]) -> list[dict]:
    """
    block_lines ‚Äî –∫—É—Å–æ–∫ —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É "### <–ö–æ–º–∞–Ω–¥–∞>. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤" –∏ —Å–ª–µ–¥—É—é—â–∏–º "### ..."
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [{"name_ru": "–§ –ò", "pts":int,"reb":int,"ast":int,"stl":int,"blk":int}]
    """
    out = []
    i = 0
    while i < len(block_lines):
        ln = block_lines[i].strip()
        m = PLAYER_LINK_RE.match(ln)
        if m:
            name_ru = m.group(1).strip()
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞/–º—É—Å–æ—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            j = i + 1
            while j < len(block_lines) and (not block_lines[j] or re.fullmatch(r"\d+", block_lines[j])):
                j += 1
            if j < len(block_lines):
                stat_ln = block_lines[j].strip()
                # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è ¬´—è—á–µ–π–∫–∞¬ª ‚Äî –æ—á–∫–∏, –ø–æ—Å–ª–µ–¥–Ω—è—è ‚Äî –ú–∏–Ω
                # –ø—Ä–∏–º–µ—Ä: "17 7/10 70 1/9 11 0/0 0 7 13 4 2 3 0 36:16"
                tokens = stat_ln.split()
                # –Ω—É–∂–Ω–∞ –º–∏–Ω–∏–º—É–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: PTS ... REB AST F STL TO BLK TIME  -> >= 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ + –±—Ä–æ—Å–∫–æ–≤—ã–µ
                if len(tokens) >= 8 and re.search(r":", tokens[-1]):
                    # –≤–æ–∑—å–º—ë–º —Å –∫–æ–Ω—Ü–∞: time, blk, to, stl, f, ast, reb
                    time_tok = tokens.pop()  # "36:16"
                    try:
                        blk = int(tokens.pop())
                        tov = int(tokens.pop())
                        stl = int(tokens.pop())
                        fou = int(tokens.pop())
                        ast = int(tokens.pop())
                        reb = int(tokens.pop())
                        pts = int(tokens[0])
                    except Exception:
                        blk = stl = ast = reb = pts = 0
                    out.append({
                        "name_ru": name_ru,
                        "pts": pts, "reb": reb, "ast": ast, "stl": stl, "blk": blk
                    })
                    i = j  # –ø–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        i += 1
    return out

def _team_total_from_block(block_lines: list[str]) -> int | None:
    """
    –ò—â–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–º–∞–Ω–¥—ã (–æ–±—ã—á–Ω–æ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Å–µ–∫—Ü–∏–∏) –≤–∏–¥–∞:
    "    123 29/49 ... 240:00" ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
    """
    for k in range(len(block_lines)-1, -1, -1):
        ln = block_lines[k].strip()
        if re.search(r"\d+:\d{2}$", ln):
            m = re.match(r"^\s*(\d+)\b", ln)
            if m:
                try:
                    return int(m.group(1))
                except Exception:
                    return None
    return None

def parse_sports_match(url: str) -> dict | None:
    r = S.get(url, timeout=25)
    if r.status_code != 200:
        logdbg("PARSE START", url, "HTTP", r.status_code)
        return None
    lines = _text_lines(r.text)
    if not _ensure_is_nba(lines):
        # –Ω–µ –ù–ë–ê
        return None

    blocks = _extract_team_blocks(lines)
    if len(blocks) < 2:
        logdbg("PARSE START", url, "NO TEAM BLOCKS")
        return None

    # –î–≤–∞ –±–ª–æ–∫–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É ‚Äî —ç—Ç–æ –∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–∞—Ç—á–∞
    teamA, iA, jA = blocks[0]
    teamB, iB, jB = blocks[1]

    # –í—ã—Ä–µ–∑–∞–µ–º ¬´—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ¬ª —Å–µ–∫—Ü–∏–π (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    blockA = lines[iA+1:jA]
    blockB = lines[iB+1:jB]

    playersA = _parse_players_from_block(blockA)
    playersB = _parse_players_from_block(blockB)

    # –°—á—ë—Ç –±–µ—Ä—ë–º –∏–∑ ¬´–∏—Ç–æ–≥–æ–≤—ã—Ö¬ª —Å—Ç—Ä–æ–∫ –±–ª–æ–∫–æ–≤
    scoreA = _team_total_from_block(blockA) or 0
    scoreB = _team_total_from_block(blockB) or 0

    # –û–¢ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É ¬´–ø–µ—Ä–∏–æ–¥–æ–≤¬ª –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∫ –º–∞—Ç—á—É (5 –ø–∞—Ä = –æ–≤–µ—Ä—Ç–∞–π–º)
    joined = "\n".join(lines)
    # –≤–æ–∑—å–º—ë–º –±–ª–∏–∂–∞–π—à—É—é —Å—Ç—Ä–æ–∫—É "## <–ö–æ–º–∞–Ω–¥–∞>" .. "## <–ö–æ–º–∞–Ω–¥–∞>" .. –∑–∞—Ç–µ–º —Å—Ç—Ä–æ–∫—É "XX : YY"
    # –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—ë–º ‚Äî –ø–æ–º–æ–ª—á–∏–º –æ–± –û–¢
    ot = False
    m = re.search(r"\b(\d{1,3})\s*:\s*(\d{1,3})\b.*?\n([ \d:]{5,})", joined, flags=re.S)
    if m:
        per_line = m.group(3)
        pairs = re.findall(r"\d{1,2}\s*:\s*\d{1,2}", per_line)
        ot = len(pairs) > 4

    # –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –ø–æ URL (–¥–ª—è —ç–º–æ–¥–∑–∏)
    abbrA = abbr_from_url(url, 0) or ""
    abbrB = abbr_from_url(url, 1) or ""

    game = {
        "url": url,
        "teams": [
            {"name_ru": teamA, "abbr": abbrA, "score": scoreA, "players": playersA},
            {"name_ru": teamB, "abbr": abbrB, "score": scoreB, "players": playersB},
        ],
        "ot": ot,
    }
    logdbg("PARSE TEAMS", teamA, teamB, "SCORES", scoreA, scoreB, "A_rows", len(playersA), "B_rows", len(playersB))
    return game

# ---------- PICKING PLAYERS ----------
def is_double_double(p: dict) -> bool:
    cats = [p["pts"], p["reb"], p["ast"], p["stl"], p["blk"]]
    return sum(1 for v in cats if v >= 10) >= 2

def pick_players_for_team(team_abbr: str, plist: list[dict]) -> list[dict]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ 1..2 –∏–≥—Ä–æ–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º.
    –°–ø–µ—Ü-—Å–ª—É—á–∞–∏: –î—ë–º–∏–Ω (BKN), –ì–æ–ª–¥–∏–Ω (MIA) ‚Äî –≤–∫–ª—é—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.
    """
    if not plist:
        return []

    # –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ ¬´–ª—É—á—à–µ–≥–æ —Å–∫–æ—Ä–µ—Ä–∞¬ª
    plist_sorted = sorted(plist, key=lambda x: (x["pts"], x["reb"], x["ast"]), reverse=True)
    picked = []

    # —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
    special_last = None
    if team_abbr == "BKN":
        special_last = "–î—ë–º–∏–Ω"
    elif team_abbr == "MIA":
        special_last = "–ì–æ–ª–¥–∏–Ω"

    special = None
    if special_last:
        for p in plist:
            if p["name_ru"].split()[-1].strip().lower() == special_last.lower():
                special = p
                break

    # –æ—Å–Ω–æ–≤–Ω–æ–π ‚Äî –ª—É—á—à–∏–π —Å–∫–æ—Ä–µ—Ä
    best = plist_sorted[0]
    picked.append(best)

    # –ø–æ–º–µ—Ç–∫–∞ —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ best)
    if special and special not in picked:
        picked.append(special)
    else:
        # –≤—Ç–æ—Ä–æ–π –ø–æ —É—Å–ª–æ–≤–∏—è–º: ‚â•20 –æ—á–∫–æ–≤ –∏–ª–∏ –¥–∞–±–ª-–¥–∞–±–ª –∏–ª–∏ ‚â•5 STL/BLK
        for p in plist_sorted[1:]:
            if p in picked: 
                continue
            if p["pts"] >= 20 or is_double_double(p) or p["stl"] >= 5 or p["blk"] >= 5:
                picked.append(p)
                break

    # –º–∞–∫—Å–∏–º—É–º 2
    return picked[:2]

def initials_plus_surname(name_ru: str) -> str:
    # "–õ–∞–º–µ–ª–æ –ë–æ–ª–ª" -> "–õ. –ë–æ–ª–ª"
    parts = [w for w in name_ru.split() if w and w != "‚Äî"]
    if not parts:
        return name_ru
    if len(parts) == 1:
        return parts[0]
    init = parts[0][0] + "."
    surname = parts[-1]
    # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ ¬´–º–ª–∞–¥—à–∏–π/—Å—Ç–∞—Ä—à–∏–π¬ª –º–æ–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å, –Ω–æ –Ω–µ –±—É–¥–µ–º —É—Å–ª–æ–∂–Ω—è—Ç—å —Å–µ–π—á–∞—Å
    return f"{init} {surname}"

def fmt_player_line(p: dict, force_top3: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞:
    - –í—Å–µ–≥–¥–∞ –æ—á–∫–∏.
    - –î–∞–ª–µ–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ—Ä–æ–≥–∏:
      ‚â•5 –ø–æ–¥–±–æ—Ä–æ–≤ | ‚â•5 –ø–µ—Ä–µ–¥–∞—á | ‚â•4 –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ | ‚â•4 –±–ª–æ–∫-—à–æ—Ç–∞.
    - –ï—Å–ª–∏ force_top3=True (–¥–ª—è –î—ë–º–∏–Ω–∞/–ì–æ–ª–¥–∏–Ω–∞) ‚Äî –±–µ—Ä—ë–º 3 –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    name = initials_plus_surname(p["name_ru"])
    pts, reb, ast, stl, blk = p["pts"], p["reb"], p["ast"], p["stl"], p["blk"]

    if force_top3:
        # —Å–æ–±–µ—Ä—ë–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–∫–ª—é—á–∞—è –æ—á–∫–∏, –∏ –≤–æ–∑—å–º—ë–º —Ç–æ–ø-3 –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é > 0
        extras = [
            ("–ø–æ–¥–±–æ—Ä", "–ø–æ–¥–±–æ—Ä–∞", "–ø–æ–¥–±–æ—Ä–æ–≤", reb, "–ø–æ–¥–±–æ—Ä–æ–≤"),
            ("–ø–µ—Ä–µ–¥–∞—á–∞", "–ø–µ—Ä–µ–¥–∞—á–∏", "–ø–µ—Ä–µ–¥–∞—á", ast, "–ø–µ—Ä–µ–¥–∞—á"),
            ("–ø–µ—Ä–µ—Ö–≤–∞—Ç", "–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞", "–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤", stl, "–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤"),
            ("–±–ª–æ–∫-—à–æ—Ç", "–±–ª–æ–∫-—à–æ—Ç–∞", "–±–ª–æ–∫-—à–æ—Ç–æ–≤", blk, "–±–ª–æ–∫-—à–æ—Ç–æ–≤"),
        ]
        extras = [(w1,w2,w3,val,label) for (w1,w2,w3,val,label) in extras if val and val>0]
        extras.sort(key=lambda t: t[3], reverse=True)
        extras = extras[:3]
        parts = [f"{name}: {pts} {ru_plural(pts, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"]
        for (w1,w2,w3,val,label) in extras:
            parts.append(f"{val} {ru_plural(val,(w1,w2,w3))}")
        return "<span class=\"tg-spoiler\">" + ", ".join(parts) + "</span>"

    parts = [f"{name}: {pts} {ru_plural(pts, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"]
    if reb >= 5: parts.append(f"{reb} {ru_plural(reb, ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}")
    if ast >= 5: parts.append(f"{ast} {ru_plural(ast, ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}")
    if stl >= 4: parts.append(f"{stl} {ru_plural(stl, ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}")
    if blk >= 4: parts.append(f"{blk} {ru_plural(blk, ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}")
    return "<span class=\"tg-spoiler\">" + ", ".join(parts) + "</span>"

# ---------- BUILD POST ----------
def build_post(d: date) -> str:
    title = f"–ù–ë–ê ‚Ä¢ {ru_date(d)} ‚Ä¢ {{N}} {ru_plural('{N}', ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n" \
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n" \
            "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n\n"

    links = fetch_day_links(d)
    games = []
    for u in links:
        try:
            g = parse_sports_match(u)
            if g:
                # –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Ç—á–∏ –±–µ–∑ —Å—á—ë—Ç–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                if g["teams"][0]["score"] == 0 and g["teams"][1]["score"] == 0:
                    continue
                games.append(g)
        except Exception as e:
            logdbg("PARSE ERROR", u, repr(e))
            continue

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ –Ω–∞ Sports.ru: –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
    n = len(games)
    out = title.replace("{N}", str(n)).replace("'{N}'", str(n))

    lines = []
    for idx, g in enumerate(games):
        t1, t2 = g["teams"][0], g["teams"][1]
        # –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        a_win = t1["score"] > t2["score"]
        b_win = t2["score"] > t1["score"]

        # —ç–º–æ–¥–∑–∏ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
        e1 = team_emoji(t1["abbr"])
        e2 = team_emoji(t2["abbr"])

        # —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—á—ë—Ç–æ–º (—Å–∫—Ä—ã–≤–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è)
        scoreA = f"<b>{t1['score']}</b>" if a_win else f"{t1['score']}"
        scoreB = f"<b>{t2['score']}</b>" if b_win else f"{t2['score']}"
        ot_tag = " (–û–¢)" if g["ot"] else ""

        lines.append(f"{e1} {t1['name_ru']}: <span class=\"tg-spoiler\">{scoreA}</span>")
        lines.append(f"{e2} {t2['name_ru']}: <span class=\"tg-spoiler\">{scoreB}</span>{ot_tag}")

        # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Å—á—ë—Ç–æ–º –∏ –∏–≥—Ä–æ–∫–∞–º–∏
        lines.append("")

        # –∏–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã 1
        chosen1 = pick_players_for_team(t1["abbr"], t1["players"])
        for p in chosen1:
            force = False
            if t1["abbr"] == "BKN" and p["name_ru"].split()[-1] == "–î—ë–º–∏–Ω":
                force = True
            if t1["abbr"] == "MIA" and p["name_ru"].split()[-1] == "–ì–æ–ª–¥–∏–Ω":
                force = True
            lines.append(fmt_player_line(p, force_top3=force))

        # —Ä–∞–∑–¥–µ–ª –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ –±–ª–æ–∫–µ –∏–≥—Ä–æ–∫–æ–≤
        if chosen1:
            lines.append("")

        # –∏–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã 2
        chosen2 = pick_players_for_team(t2["abbr"], t2["players"])
        for p in chosen2:
            force = False
            if t2["abbr"] == "BKN" and p["name_ru"].split()[-1] == "–î—ë–º–∏–Ω":
                force = True
            if t2["abbr"] == "MIA" and p["name_ru"].split()[-1] == "–ì–æ–ª–¥–∏–Ω":
                force = True
            lines.append(fmt_player_line(p, force_top3=force))

        # —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–∞—Ç—á–µ–π
        if idx + 1 < len(games):
            lines.append("")
            lines.append("‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì")
            lines.append("")

    return out + "\n".join(lines).strip()

# ---------- TELEGRAM ----------
def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    # –°–ø–æ–π–ª–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ HTML-—Ä–µ–∂–∏–º–µ
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }
    r = S.post(url, json=payload, timeout=25)
    if r.status_code != 200:
        raise RuntimeError(f"Telegram error {r.status_code}: {r.text}")

# ---------- MAIN ----------
if __name__ == "__main__":
    try:
        day = pick_report_date()
        logdbg("DAY", day.isoformat())
        post = build_post(day)
        tg_send(post)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
