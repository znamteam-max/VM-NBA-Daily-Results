#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (RU) ‚Äî Sports.ru only

‚Ä¢ –ë–µ—Ä—ë–º –ø–∞—Ä—ã, —Å—á—ë—Ç –∏ –ë–û–ö–°–°–ö–û–†–´ —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü –º–∞—Ç—á–µ–π Sports.ru.
‚Ä¢ –¢–∞–±–ª–∏—Ü—ã: —Å—Ç—Ä–æ–≥–æ ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤¬ª (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ ¬´–ò–≥—Ä–æ–∫¬ª).
‚Ä¢ –û—á–∫–∏ –∫–æ–º–∞–Ω–¥—ã: –∏–∑ —Å—Ç—Ä–æ–∫–∏ ¬´–ò—Ç–æ–≥–æ¬ª –∏–ª–∏ —Å—É–º–º–∞ –æ—á–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤.
‚Ä¢ –§–æ—Ä–º–∞—Ç: —Å—á—ë—Ç –∏ –∏–≥—Ä–æ–∫–∏ –≤ —Å–ø–æ–π–ª–µ—Ä–∞—Ö; —É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å—á—ë—Ç –∂–∏—Ä–Ω—ã–º.
‚Ä¢ –ò–≥—Ä–æ–∫–∏: –æ—Ç 1 –¥–æ 2 –Ω–∞ –∫–æ–º–∞–Ω–¥—É. –í—Ç–æ—Ä–æ–π ‚Äî –µ—Å–ª–∏ ‚â•20 –æ—á–∫–æ–≤ –ò–õ–ò –¥–∞–±–ª-–¥–∞–±–ª –ò–õ–ò ‚â•6 STL/BLK.
‚Ä¢ –°–ø–µ—Ü: –î—ë–º–∏–Ω (BKN) / –ì–æ–ª–¥–∏–Ω (MIA) ‚Äî –∂–∏—Ä–Ω—ã–º, 3 –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è >0.
"""

import os, sys, re, json
from datetime import date, datetime, timedelta
from zoneinfo import ZoneInfo
from urllib.parse import urlparse, urlunparse

import requests
from requests.adapters import HTTPAdapter
try:
    from urllib3.util.retry import Retry
except Exception:
    Retry = None
from bs4 import BeautifulSoup

# ========= ENV / CONFIG =========
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()
TEAM_EMOJI_JSON = os.getenv("TEAM_EMOJI_JSON", "").strip()  # JSON: {"BOS":"‚òòÔ∏è", ...}
DEBUG = os.getenv("DEBUG_NBA", "0") == "1"

HTTP_TIMEOUT = 9

def log(*a):
    if DEBUG:
        print(*a, file=sys.stderr)

def _mk_adapter():
    if Retry:
        r = Retry(total=3, connect=3, read=3, backoff_factor=0.4,
                  status_forcelist=[429,500,502,503,504],
                  allowed_methods=["GET","POST"])
        return HTTPAdapter(max_retries=r)
    return HTTPAdapter(max_retries=2)

def make_session():
    s = requests.Session()
    ad = _mk_adapter()
    s.mount("https://", ad); s.mount("http://", ad)
    s.headers.update({
        "User-Agent": "NBA-DailyResultsBot/4.4 (sports.ru only, players-table strict)",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.6",
        "Connection": "close",
    })
    return s

S = make_session()

# ========= RU dates/plurals =========
RU_MONTHS = {1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
             7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"}
def ru_date(d: date) -> str: return f"{d.day} {RU_MONTHS[d.month]}"
def ru_plural(n: int, forms: tuple[str,str,str]) -> str:
    n = abs(int(n)) % 100; n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

def report_day_london() -> date:
    now = datetime.now(ZoneInfo("Europe/London"))
    return now.date() if now.hour >= 11 else (now.date() - timedelta(days=1))

# ========= Teams / Emojis =========
TEAM_RU_TO_ABBR = {
    "–ê—Ç–ª–∞–Ω—Ç–∞":"ATL","–ë–æ—Å—Ç–æ–Ω":"BOS","–ë—Ä—É–∫–ª–∏–Ω":"BKN","–®–∞—Ä–ª–æ—Ç—Ç":"CHA","–ß–∏–∫–∞–≥–æ":"CHI",
    "–ö–ª–∏–≤–ª–µ–Ω–¥":"CLE","–î–∞–ª–ª–∞—Å":"DAL","–î–µ–Ω–≤–µ—Ä":"DEN","–î–µ—Ç—Ä–æ–π—Ç":"DET","–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç":"GSW",
    "–•—å—é—Å—Ç–æ–Ω":"HOU","–ò–Ω–¥–∏–∞–Ω–∞":"IND","–ö–ª–∏–ø–ø–µ—Ä—Å":"LAC","–õ–µ–π–∫–µ—Ä—Å":"LAL","–ú–µ–º—Ñ–∏—Å":"MEM",
    "–ú–∞–π–∞–º–∏":"MIA","–ú–∏–ª—É–æ–∫–∏":"MIL","–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞":"MIN","–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω":"NOP","–ù—å—é-–ô–æ—Ä–∫":"NYK",
    "–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏":"OKC","–û—Ä–ª–∞–Ω–¥–æ":"ORL","–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è":"PHI","–§–∏–Ω–∏–∫—Å":"PHX","–ü–æ—Ä—Ç–ª–µ–Ω–¥":"POR",
    "–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ":"SAC","–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ":"SAS","–¢–æ—Ä–æ–Ω—Ç–æ":"TOR","–Æ—Ç–∞":"UTA","–í–∞—à–∏–Ω–≥—Ç–æ–Ω":"WAS",
}
ABBR_TO_RU = {v:k for k,v in TEAM_RU_TO_ABBR.items()}

TEAM_EMOJI_DEFAULT = {
    "ATL":"ü¶Ö","BOS":"‚òòÔ∏è","BKN":"üï∏Ô∏è","CHA":"üêù","CHI":"üêÇ","CLE":"üõ°Ô∏è","DAL":"üêé","DEN":"‚õèÔ∏è","DET":"üîß",
    "GSW":"üó°Ô∏è","HOU":"üöÄ","IND":"üí´","LAC":"‚úÇÔ∏è","LAL":"‚≠ê","MEM":"üêª","MIA":"üî•","MIL":"ü¶å","MIN":"üê∫",
    "NOP":"ü™∂","NYK":"üóΩ","OKC":"‚ö°","ORL":"‚ú®","PHI":"üîî","PHX":"‚òÄÔ∏è","POR":"üß≠","SAC":"üëë","SAS":"ü™ô",
    "TOR":"ü¶ñ","UTA":"üé∑","WAS":"üßô",
}
def load_team_emojis():
    if TEAM_EMOJI_JSON:
        try:
            d = json.loads(TEAM_EMOJI_JSON)
            if isinstance(d, dict):
                return {k.upper(): str(v) for k,v in d.items()}
        except Exception:
            pass
    return TEAM_EMOJI_DEFAULT
TEAM_EMOJI = load_team_emojis()
def emoji(abbr: str) -> str: return TEAM_EMOJI.get((abbr or "").upper(), "üèÄ")

# ========= Sports.ru helpers =========
def day_url(d: date) -> str:
    return f"https://www.sports.ru/stat/basketball/center/end/{d:%Y/%m/%d}.html"

def _normalize_url(u: str) -> str:
    full = "https://www.sports.ru" + u if u.startswith("/") else u
    p = urlparse(full); return urlunparse((p.scheme, p.netloc, p.path, "", "", ""))

def _soup(url: str):
    try:
        r = S.get(url, timeout=HTTP_TIMEOUT)
        if r.status_code != 200: return None
        return BeautifulSoup(r.text, "html.parser")
    except Exception:
        return None

def collect_day_match_urls(d: date) -> list[str]:
    soup = _soup(day_url(d))
    if not soup: return []
    out, seen = [], set()
    for a in soup.find_all("a", href=True):
        href = a["href"]
        if "/basketball/match/" not in href:
            continue
        u = _normalize_url(href)
        if u in seen:
            continue
        # –ë–µ—Ä—ë–º –¢–û–õ–¨–ö–û –º–∞—Ç—á–µ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–æ—Ä–º–∞—Ç–∞ team-vs-team, –æ—Ç—Å–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤—ã –ø–æ –¥–∞—Ç–∞–º –∏ –ø—Ä–æ—á–µ–µ
        if not re.search(r"/basketball/match/[^/]+-vs-[^/]+/?$", u):
            continue
        seen.add(u)
        out.append(u)
    log("[DBG] SPORTS LINKS", len(out))
    return out

def _canonical_ru_team(raw: str) -> str | None:
    if not raw: return None
    t = raw.replace("¬´","").replace("¬ª","").strip()
    t = re.sub(r"\(.*?\)", "", t).strip()
    for k in TEAM_RU_TO_ABBR:
        if t.startswith(k) or k in t:
            return k
    return None

def _is_players_table(table) -> bool:
    """–†–æ–≤–Ω–æ —Ç–∞–±–ª–∏—Ü–∞ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤': –≤ —Ö–µ–¥–µ—Ä–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∞ —Å '–ò–≥—Ä–æ–∫'
       –∏ –∫–æ–ª–æ–Ω–∫–∞ –æ—á–∫–æ–≤ (–ª—é–±–æ–π –∏–∑: '–û', '–û—á–∫–∏', 'PTS', '–û—á')."""
    if table is None:
        return False
    # –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É-—Ö–µ–¥–µ—Ä (—á–∞—Å—Ç–æ —ç—Ç–æ <thead><tr>, –Ω–æ –±—ã–≤–∞–µ—Ç –∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–π <tr>)
    hdr_tr = None
    thead = table.find("thead")
    if thead:
        hdr_tr = thead.find("tr")
    if not hdr_tr:
        hdr_tr = table.find("tr")
    if not hdr_tr:
        return False

    hdr_cells = [c.get_text(" ", strip=True) for c in hdr_tr.find_all(["th","td"])]
    hl = [h.lower() for h in hdr_cells]

    has_player_col = any("–∏–≥—Ä–æ–∫" in h for h in hl)
    has_points_col = any(
        (h in {"–æ", "–æ—á–∫–∏", "pts"}) or ("–æ—á" in h) or ("pts" in h)
        for h in hl
    )
    return bool(has_player_col and has_points_col)

# ========= Parse a match page (players-table strict) =========
def parse_match(url: str) -> dict | None:
    soup = _soup(url)
    if not soup: return None

    # –Ω–∞–π–¥—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ ¬´<–ö–æ–º–∞–Ω–¥–∞>. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤¬ª
    # –∏ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç –∫–æ–ª–æ–Ω–∫—É ¬´–ò–≥—Ä–æ–∫¬ª
    blocks = []
    for h in soup.find_all(["h2","h3","h4"]):
        txt = h.get_text(" ", strip=True)
        if "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤" not in txt.lower():
            continue
        team_left = txt.split(".", 1)[0].strip()
        team_ru = _canonical_ru_team(team_left)
        if not team_ru:
            continue
        table = h.find_next("table")
        if not table:
            continue
        # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞-—Ö–µ–¥–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç ¬´–ò–≥—Ä–æ–∫¬ª
        hdr_tr = table.find("tr")
        if not hdr_tr:
            continue
        hdr_cells = [c.get_text(" ", strip=True) for c in hdr_tr.find_all(["th","td"])]
        if not any("–∏–≥—Ä–æ–∫" == hc.lower() for hc in hdr_cells):
            # —ç—Ç–æ –Ω–µ —Ç–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        blocks.append((team_ru, table))

    if len(blocks) < 2:
        log("[DBG] PLAYERS-TABLES < 2, skip", url)
        return None

    # –∏–∑–≤–ª–µ—á—ë–º –∏–≥—Ä–æ–∫–æ–≤ –∏ –æ—á–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–æ–ª–±—Ü–æ–≤
    def to_int(x: str) -> int:
        s = (x or "").strip()
        if s in {"‚Äî","-",""}: return 0
        m = re.match(r"^-?\d+", s)
        return int(m.group(0)) if m else 0

    def parse_table(table) -> tuple[list[dict], int]:
        # –ø–æ—Å—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É –∫–æ–ª–æ–Ω–æ–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
        header = None
        for tr in table.find_all("tr"):
            cells = [c.get_text(" ", strip=True) for c in tr.find_all(["th","td"])]
            if not cells: 
                continue
            if any("–∏–≥—Ä–æ–∫" == c.lower() for c in cells):
                header = cells
                break
        if not header:
            return [], 0

        # –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        name_idx = None
        pts_idx = reb_idx = ast_idx = stl_idx = blk_idx = None

        for i, h in enumerate(header):
            hl = h.lower()
            if hl == "–∏–≥—Ä–æ–∫": name_idx = i
            if hl in {"–æ","–æ—á–∫–∏","pts"}: pts_idx = i
            if hl in {"–ø–±","–ø–æ–¥–±–æ—Ä—ã","reb"}: reb_idx = i
            if hl in {"–∞–ø","–ø–µ—Ä–µ–¥–∞—á–∏","ast"}: ast_idx = i
            if hl in {"–ø—Ö","–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã","stl"}: stl_idx = i
            if hl in {"–±—à","–±–ª–æ–∫-—à–æ—Ç—ã","blk","–±–ª–æ–∫—à–æ—Ç—ã"}: blk_idx = i

        if name_idx is None or pts_idx is None:
            # –±–µ–∑ –∏–º–µ–Ω–∏/–æ—á–∫–æ–≤ —ç—Ç–æ –Ω–µ —Ç–æ
            return [], 0

        players = []
        team_pts = None

        rows = table.find_all("tr")[1:]  # –ø–æ—Å–ª–µ —Ö–µ–¥–µ—Ä–∞
        for tr in rows:
            cells = [c.get_text(" ", strip=True) for c in tr.find_all(["td","th"])]
            if not cells: 
                continue

            # –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            name_cell = (cells[name_idx] if len(cells) > name_idx else "").strip()
            if name_cell.lower() in {"–∏—Ç–æ–≥–æ","–∏—Ç–æ–≥","total"}:
                if len(cells) > pts_idx:
                    team_pts = to_int(cells[pts_idx])
                continue

            # –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–≥—Ä–æ–∫–∞: –≤ ¬´–ò–≥—Ä–æ–∫¬ª –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—É–∫–≤—ã
            if not re.search(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë]", name_cell):
                continue

            def g(idx):
                return to_int(cells[idx]) if (idx is not None and idx < len(cells)) else 0

            p = {
                "name": name_cell,
                "pts": g(pts_idx),
                "reb": g(reb_idx),
                "ast": g(ast_idx),
                "stl": g(stl_idx),
                "blk": g(blk_idx),
            }
            if any(p[k] for k in ("pts","reb","ast","stl","blk")):
                players.append(p)

        if team_pts is None:
            team_pts = sum(p["pts"] for p in players)

        return players, team_pts

    # –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    A_ru, A_tbl = blocks[0]
    B_ru, B_tbl = None, None
    for t_ru, t_tbl in blocks[1:]:
        if t_ru != A_ru:
            B_ru, B_tbl = t_ru, t_tbl
            break
    if not B_ru:
        return None

    A_rows, A_pts = parse_table(A_tbl)
    B_rows, B_pts = parse_table(B_tbl)

    a_abbr = TEAM_RU_TO_ABBR.get(A_ru, "")
    b_abbr = TEAM_RU_TO_ABBR.get(B_ru, "")
    if not (a_abbr and b_abbr):
        return None

    info = {
        "teamA": {"name": A_ru, "abbr": a_abbr, "emoji": emoji(a_abbr), "score": A_pts},
        "teamB": {"name": B_ru, "abbr": b_abbr, "emoji": emoji(b_abbr), "score": B_pts},
        "players": {A_ru: A_rows, B_ru: B_rows},
        "finished": True,
        "url": url,
    }
    log(f"[DBG] PARSED {A_ru}-{B_ru} SCORE {A_pts}-{B_pts} A_rows {len(A_rows)} B_rows {len(B_rows)}")
    return info

# ========= Players pick/format =========
def initials_ru(full: str) -> str:
    parts = [p for p in re.split(r"\s+", (full or "").strip()) if p]
    if not parts: return ""
    if len(parts) == 1: return parts[0]
    first = parts[0]; last = parts[-1]
    if last.lower() in {"jr.","jr","–º–ª.","—Å—Ç.","sr.","sr"} and len(parts)>=3:
        last = parts[-2] + " " + last
    return f"{first[0]}. {last}"

def ru_forms(label: str, v: int) -> str:
    if label=="pts": return f"{v} {ru_plural(v, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"
    if label=="reb": return f"{v} {ru_plural(v, ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}"
    if label=="ast": return f"{v} {ru_plural(v, ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}"
    if label=="stl": return f"{v} {ru_plural(v, ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}"
    if label=="blk": return f"{v} {ru_plural(v, ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}"
    return f"{v}"

def hot_mark(p: dict) -> str:
    if (p["pts"]>=35) or (p["reb"]>=15) or (p["ast"]>=12) or (p["stl"]>=5) or (p["blk"]>=5):
        return " üî•"
    return ""

def is_dd(p: dict) -> bool:
    return sum(x>=10 for x in [p["pts"],p["reb"],p["ast"],p["stl"],p["blk"]]) >= 2

def second_ok(p: dict) -> bool:
    return (p["pts"]>=20) or is_dd(p) or (p["stl"]>=6) or (p["blk"]>=6)

def score_key(p: dict): return (p["pts"], p["reb"]+p["ast"], p["stl"]+p["blk"])

def pick_team_players(abbr: str, rows: list[dict]) -> list[tuple[dict,bool,bool]]:
    if not rows: return []
    rows = sorted(rows, key=score_key, reverse=True)

    # —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫–∏
    special_keys = []
    if abbr=="BKN": special_keys = ["–¥—ë–º–∏–Ω","demin"]
    if abbr=="MIA": special_keys = ["–≥–æ–ª–¥–∏–Ω","goldin"]
    special=None
    for p in rows:
        nm = (p["name"] or "").lower()
        if any(k in nm for k in special_keys):
            special = p; break

    out=[]
    top = rows[0]
    if special and special["name"] == top["name"]:
        out.append((special, True, True))
    elif special:
        out.append((top, False, False)); out.append((special, True, True))
    else:
        out.append((top, False, False))

    if len(out) < 2:
        for p in rows[1:]:
            if p["name"] == top["name"]: continue
            if second_ok(p):
                out.append((p, False, False)); break
    return out[:2]

def format_player_regular(p: dict, bold=False) -> str:
    name = initials_ru(p["name"])
    if bold: name = f"<b>{name}</b>"
    parts = [ru_forms("pts", p["pts"])]
    if p["reb"]>=5: parts.append(ru_forms("reb", p["reb"]))
    if p["ast"]>=5: parts.append(ru_forms("ast", p["ast"]))
    if p["stl"]>=4: parts.append(ru_forms("stl", p["stl"]))
    if p["blk"]>=4: parts.append(ru_forms("blk", p["blk"]))
    return f"{name}: " + ", ".join(parts) + hot_mark(p)

def format_player_special(p: dict) -> str:
    name = f"<b>{initials_ru(p['name'])}</b>"
    stats=[("pts",p["pts"]),("reb",p["reb"]),("ast",p["ast"]),("stl",p["stl"]),("blk",p["blk"])]
    stats=[(k,v) for k,v in stats if v>0]
    stats.sort(key=lambda kv: kv[1], reverse=True)
    chosen=stats[:3]
    return f"{name}: " + ", ".join(ru_forms(k,v) for k,v in chosen) + hot_mark(p)

# ========= Spoiler / formatting =========
def sp(s: str) -> str: return f'<span class="tg-spoiler">{s}</span>'
SEP = "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì"

def format_score_line(name_ru: str, abbr: str, score: int, winner: bool) -> str:
    score_txt = f"<b>{score}</b>" if winner else f"{score}"
    return f"{emoji(abbr)} {name_ru}: {sp(score_txt)}"

def build_block(info: dict) -> str:
    A,B = info["teamA"], info["teamB"]
    a_win = A["score"] > B["score"]; b_win = B["score"] > A["score"]

    head = (
        f"{format_score_line(A['name'], A['abbr'], A['score'], a_win)}\n"
        f"{format_score_line(B['name'], B['abbr'], B['score'], b_win)}\n\n"
    )

    rowsA = info["players"].get(A["name"], []); rowsB = info["players"].get(B["name"], [])
    al = [sp(format_player_special(p) if det else format_player_regular(p, bold))
          for (p,bold,det) in pick_team_players(A["abbr"], rowsA)]
    bl = [sp(format_player_special(p) if det else format_player_regular(p, bold))
          for (p,bold,det) in pick_team_players(B["abbr"], rowsB)]

    lines=[]
    if al: lines.extend(al)
    if al and bl: lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
    if bl: lines.extend(bl)
    return head + ("\n".join(lines) if lines else "")

# ========= Build post =========
def build_post() -> str:
    d = report_day_london()
    urls = collect_day_match_urls(d)

    games=[]
    for u in urls:
        try:
            info = parse_match(u)
            if info and info.get("finished"):
                games.append(info)
        except Exception as e:
            log("[DBG] PARSE ERROR", u, repr(e))

    title = f"–ù–ë–ê ‚Ä¢ {ru_date(d)} ‚Ä¢ {len(games)} {ru_plural(len(games), ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n"
    title += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n"
    title += SEP + "\n\n"

    if not games:
        return title.rstrip()

    blocks=[]
    for i, g in enumerate(games, 1):
        blocks.append(build_block(g))
        if i < len(games):
            blocks.append("\n" + SEP + "\n\n")

    return (title + "".join(blocks)).strip()

# ========= Telegram =========
def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    r = S.post(url, json={
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }, timeout=HTTP_TIMEOUT)
    if r.status_code != 200:
        raise RuntimeError(f"Telegram error {r.status_code}: {r.text}")

# ========= MAIN =========
if __name__ == "__main__":
    try:
        text = build_post()
        tg_send(text)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
