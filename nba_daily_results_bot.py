#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (RU) ‚Äî Sports.ru only

–¢–æ–ª—å–∫–æ –ù–ë–ê (–º–∞—Ç—á–∏ –í–¢–ë –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ —Ö–ª–µ–±–Ω—ã–º –∫—Ä–æ—à–∫–∞–º ¬´–ù–ë–ê¬ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–∞—Ç—á–∞).

–ò—Å—Ç–æ—á–Ω–∏–∫: Sports.ru
  - –î–µ–Ω—å:   https://www.sports.ru/stat/basketball/center/end/YYYY/MM/DD.html
  - –ú–∞—Ç—á:   https://www.sports.ru/basketball/match/<slug>/

–í—ã–≤–æ–¥:
  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: –ù–ë–ê ‚Ä¢ {–¥–∞—Ç–∞} ‚Ä¢ {N –º–∞—Ç—á–µ–π}
  - –ë–ª–æ–∫ –Ω–∞ –º–∞—Ç—á:
      <—ç–º–æ–¥–∑–∏> <–ö–æ–º–∞–Ω–¥–∞ A>: <—Å—á—ë—Ç A> [ (–û–¢ / N –û–¢) ]
      <—ç–º–æ–¥–∑–∏> <–ö–æ–º–∞–Ω–¥–∞ B>: <—Å—á—ë—Ç B>
      1‚Äì2 –∏–≥—Ä–æ–∫–∞ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã:
        ‚Ä¢ –≤—Å–µ–≥–¥–∞ —Ç–æ–ø-—Å–∫–æ—Ä–µ—Ä
        ‚Ä¢ –≤—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ (–æ—á–∫–∏ ‚â•20) –ò–õ–ò (–¥–∞–±–ª-–¥–∞–±–ª: –ª—é–±—ã–µ 2 –∏–∑ PTS/REB/AST/STL/BLK ‚â•10)
          –ò–õ–ò (–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã ‚â•6) –ò–õ–ò (–±–ª–æ–∫-—à–æ—Ç—ã ‚â•6)
      –ø–µ—á–∞—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: REB ‚â•5, AST ‚â•5, STL ‚â•4, BLK ‚â•4
      üî• –µ—Å–ª–∏: PTS ‚â•35, REB ‚â•15, AST ‚â•12, STL ‚â•5, BLK ‚â•5

–°–ø–µ—Ü-–ø—Ä–∞–≤–∏–ª–∞:
  ‚Ä¢ –î—ë–º–∏–Ω (–ë—Ä—É–∫–ª–∏–Ω, BKN) –∏ –ì–æ–ª–¥–∏–Ω (–ú–∞–π–∞–º–∏, MIA) ‚Äî –≤–∫–ª—é—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –∏–≥—Ä–∞–ª–∏, –≤—ã–¥–µ–ª—è–µ–º –∂–∏—Ä–Ω—ã–º
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º 3 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö ( >0 ) –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∏–∑ {PTS, REB, AST, STL, BLK}.
"""

import os, sys, re, json, time
from datetime import date, datetime, timedelta
from zoneinfo import ZoneInfo

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup

# ---------- ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()
_TEAM_EMOJI_JSON = os.getenv("TEAM_EMOJI_JSON", "").strip()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

# ---------- HTTP ----------
def make_session():
    s = requests.Session()
    r = Retry(total=6, connect=6, read=6, backoff_factor=0.6,
              status_forcelist=[429,500,502,503,504],
              allowed_methods=["GET","POST"])
    s.mount("https://", HTTPAdapter(max_retries=r))
    s.headers.update({
        "User-Agent": "NBA-DailyResultsBot/2.2 (Sports.ru-only)",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.6",
    })
    return s
S = make_session()

# ---------- DATE / RU ----------
RU_MONTHS = {
    1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
    7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è",
}
def ru_date(d: date) -> str: return f"{d.day} {RU_MONTHS[d.month]}"
def ru_plural(n: int, forms: tuple[str,str,str]) -> str:
    n = abs(int(n)) % 100; n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

def pick_report_date() -> date:
    now = datetime.now(ZoneInfo("Europe/London"))
    base = now.date()
    if now.hour < 11:
        base = base - timedelta(days=1)
    return base
def pick_candidate_days():
    d = pick_report_date()
    return [d, d - timedelta(days=1), d - timedelta(days=2)]

# ---------- TEAMS / EMOJI ----------
TEAM_RU_TO_ABBR = {
    "–ê—Ç–ª–∞–Ω—Ç–∞":"ATL","–ë–æ—Å—Ç–æ–Ω":"BOS","–ë—Ä—É–∫–ª–∏–Ω":"BKN","–®–∞—Ä–ª–æ—Ç—Ç":"CHA","–ß–∏–∫–∞–≥–æ":"CHI",
    "–ö–ª–∏–≤–ª–µ–Ω–¥":"CLE","–î–∞–ª–ª–∞—Å":"DAL","–î–µ–Ω–≤–µ—Ä":"DEN","–î–µ—Ç—Ä–æ–π—Ç":"DET","–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç":"GSW",
    "–•—å—é—Å—Ç–æ–Ω":"HOU","–ò–Ω–¥–∏–∞–Ω–∞":"IND","–ö–ª–∏–ø–ø–µ—Ä—Å":"LAC","–õ–µ–π–∫–µ—Ä—Å":"LAL","–ú–µ–º—Ñ–∏—Å":"MEM",
    "–ú–∞–π–∞–º–∏":"MIA","–ú–∏–ª—É–æ–∫–∏":"MIL","–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞":"MIN","–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω":"NOP","–ù—å—é-–ô–æ—Ä–∫":"NYK",
    "–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏":"OKC","–û—Ä–ª–∞–Ω–¥–æ":"ORL","–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è":"PHI","–§–∏–Ω–∏–∫—Å":"PHX","–ü–æ—Ä—Ç–ª–µ–Ω–¥":"POR",
    "–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ":"SAC","–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ":"SAS","–¢–æ—Ä–æ–Ω—Ç–æ":"TOR","–Æ—Ç–∞":"UTA","–í–∞—à–∏–Ω–≥—Ç–æ–Ω":"WAS",
}
TEAM_EMOJI_FALLBACK = {
    "ATL":"ü¶Ö","BOS":"‚òòÔ∏è","BKN":"üï∏Ô∏è","CHA":"üêù","CHI":"üêÇ","CLE":"üõ°Ô∏è","DAL":"üêé","DEN":"‚õèÔ∏è","DET":"üîß",
    "GSW":"üó°Ô∏è","HOU":"üöÄ","IND":"üí´","LAC":"‚úÇÔ∏è","LAL":"‚≠ê","MEM":"üêª","MIA":"üî•","MIL":"ü¶å","MIN":"üê∫",
    "NOP":"ü™∂","NYK":"üóΩ","OKC":"‚ö°","ORL":"‚ú®","PHI":"üîî","PHX":"‚òÄÔ∏è","POR":"üß≠","SAC":"üëë","SAS":"ü™ô",
    "TOR":"ü¶ñ","UTA":"üé∑","WAS":"üßô",
}
def load_team_emoji_map():
    if _TEAM_EMOJI_JSON:
        try:
            m = json.loads(_TEAM_EMOJI_JSON)
            if isinstance(m, dict):
                return {k.upper(): str(v) for k, v in m.items()}
        except Exception:
            pass
    return TEAM_EMOJI_FALLBACK
TEAM_EMOJI = load_team_emoji_map()
def team_emoji_by_ru(team_ru: str) -> str:
    abbr = TEAM_RU_TO_ABBR.get((team_ru or "").strip(), "")
    return TEAM_EMOJI.get(abbr, "üèÄ")

# ---------- FETCH / DAY ----------
def day_url(d: date) -> str:
    return f"https://www.sports.ru/stat/basketball/center/end/{d:%Y/%m/%d}.html"

def get_html(url: str):
    r = S.get(url, timeout=25)
    if r.status_code != 200: return None
    return BeautifulSoup(r.text, "lxml")

def collect_day_match_links(d: date) -> list[str]:
    soup = get_html(day_url(d))
    if not soup: return []
    links = []
    for a in soup.find_all("a", href=True):
        href = a["href"]; txt = a.get_text(" ", strip=True)
        if not href.startswith("/basketball/match/"): continue
        if re.search(r"\d+\s:\s\d+", txt):  # –∏–º–µ–Ω–Ω–æ ¬´—Å—Å—ã–ª–∫–∞-—Å—á—ë—Ç¬ª
            full = "https://www.sports.ru" + href if href.startswith("/") else href
            links.append(full)
    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
    seen=set(); out=[]
    for u in links:
        if u not in seen:
            seen.add(u); out.append(u)
    return out

# ---------- PARSE MATCH ----------
def _is_nba_match(soup: BeautifulSoup) -> bool:
    # –ñ—ë—Å—Ç–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä ¬´–ù–ë–ê¬ª
    for a in soup.select('a[href^="/basketball/tournament/"]'):
        if (a.get_text(" ", strip=True) or "").strip() == "–ù–ë–ê":
            return True
    return False

def parse_match(url: str) -> dict | None:
    soup = get_html(url)
    if not soup: return None
    if not _is_nba_match(soup):  # –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –í–¢–ë –∏ –ø—Ä–æ—á–µ–µ
        return None

    page_text = soup.get_text(" ", strip=True)

    # –∫–æ–º–∞–Ω–¥—ã (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ h2/h1)
    h2s = [h.get_text(" ", strip=True) for h in soup.find_all(["h2","h1"])]
    teams = [t for t in h2s if t and t not in {"–û–Ω–ª–∞–π–Ω","–í–∏–¥–µ–æ"} and len(t) <= 40]
    if len(teams) < 2:
        return None
    teamA, teamB = teams[0], teams[1]

    # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç
    m_score = re.search(r"(\d+)\s:\s(\d+)", page_text)
    if not m_score: return None
    scoreA, scoreB = int(m_score.group(1)), int(m_score.group(2))

    # –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ –º–∞—Ç—á
    low = page_text.lower()
    finished = ("–∑–∞–≤–µ—Ä—à–µ–Ω" in low) or ("–∑–∞–≤–µ—Ä—à—ë–Ω" in low) or ("–º–∞—Ç—á –∑–∞–≤–µ—Ä—à" in low)

    # –æ–≤–µ—Ä—Ç–∞–π–º—ã
    tail = page_text[m_score.end(): m_score.end()+240]
    pairs = re.findall(r"\d+\s:\s\d+", tail)
    ot = max(len(pairs) - 4, 0) if pairs else 0

    # –ø–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—ã ¬´<–ö–æ–º–∞–Ω–¥–∞>. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤¬ª
    def take_team_rows(team_ru: str) -> list[dict]:
        rows: list[dict] = []
        # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        hdr = None
        for tag in soup.find_all(["h3","h4"]):
            text = tag.get_text(" ", strip=True)
            if text.lower().startswith(team_ru.lower() + ".") and "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤" in text.lower():
                hdr = tag; break
        if not hdr: return rows
        table = hdr.find_next("table")
        if not table: return rows

        for tr in table.find_all("tr"):
            tds = [td.get_text(" ", strip=True) for td in tr.find_all(["td","th"])]
            if not tds or "–ò–≥—Ä–æ–∫" in tds[0]:
                continue
            # –Ω–∞–π—Ç–∏ —è—á–µ–π–∫—É —Å –∏–º–µ–Ω–µ–º (–≤ –ø–µ—Ä–≤—ã—Ö 2‚Äì3 –ø–æ–∑–∏—Ü–∏—è—Ö)
            name_idx = None
            for i, cell in enumerate(tds[:3]):
                if re.search(r"[^\d/:% ]", cell):
                    name_idx = i; break
            if name_idx is None:
                continue
            name = tds[name_idx]
            nums = tds[name_idx+1:]
            if len(nums) < 14:
                continue

            def as_int(x: str) -> int:
                try: return int(x)
                except:
                    try: return int(float(x))
                    except: return 0

            pts = as_int(nums[0])
            reb = as_int(nums[7])
            ast = as_int(nums[8])
            stl = as_int(nums[10])
            blk = as_int(nums[12])

            rows.append({"name": name, "pts": pts, "reb": reb, "ast": ast, "stl": stl, "blk": blk})
        return rows

    rowsA = take_team_rows(teamA)
    rowsB = take_team_rows(teamB)

    return {
        "teamA": {"name": teamA, "abbr": TEAM_RU_TO_ABBR.get(teamA,""), "emoji": team_emoji_by_ru(teamA), "score": scoreA},
        "teamB": {"name": teamB, "abbr": TEAM_RU_TO_ABBR.get(teamB,""), "emoji": team_emoji_by_ru(teamB), "score": scoreB},
        "finished": finished,
        "ot": ot,
        "players": {teamA: rowsA, teamB: rowsB},
        "url": url,
    }

# ---------- PICK / FORMAT ----------
def initials_ru(full_name: str) -> str:
    parts = [p for p in re.split(r"\s+", (full_name or "").strip()) if p]
    if not parts: return full_name or ""
    if len(parts) == 1: return parts[0]
    first = parts[0]
    suffixes = {"–º–ª.","—Å—Ç."}
    if parts[-1].lower() in suffixes and len(parts) >= 3:
        last = parts[-2] + " " + parts[-1]
    else:
        last = parts[-1]
    return f"{first[0]}. {last}"

def hot_mark(p: dict) -> str:
    if (p["pts"] >= 35) or (p["reb"] >= 15) or (p["ast"] >= 12) or (p["stl"] >= 5) or (p["blk"] >= 5):
        return " üî•"
    return ""

def format_player_line_regular(p: dict, bold=False) -> str:
    name = initials_ru(p["name"])
    if bold: name = f"<b>{name}</b>"
    parts = [f"{p['pts']} {ru_plural(p['pts'], ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"]
    if p["reb"] >= 5: parts.append(f"{p['reb']} {ru_plural(p['reb'], ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}")
    if p["ast"] >= 5: parts.append(f"{p['ast']} {ru_plural(p['ast'], ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}")
    if p["stl"] >= 4: parts.append(f"{p['stl']} {ru_plural(p['stl'], ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}")
    if p["blk"] >= 4: parts.append(f"{p['blk']} {ru_plural(p['blk'], ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}")
    return f"{name}: " + ", ".join(parts) + hot_mark(p)

def format_player_line_special_detail(p: dict, bold=True) -> str:
    """
    –î–ª—è –î—ë–º–∏–Ω–∞/–ì–æ–ª–¥–∏–Ω–∞: –º–∏–Ω–∏–º—É–º 3 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è (>0) –∏–∑ {PTS, REB, AST, STL, BLK}.
    """
    name = initials_ru(p["name"])
    if bold: name = f"<b>{name}</b>"

    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä—ã (label, value) –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ value —É–±—ã–≤.
    stats = [
        ("–æ—á–∫–∏", p["pts"], p["pts"]),
        ("–ø–æ–¥–±–æ—Ä", p["reb"], p["reb"]),
        ("–ø–µ—Ä–µ–¥–∞—á–∞", p["ast"], p["ast"]),
        ("–ø–µ—Ä–µ—Ö–≤–∞—Ç", p["stl"], p["stl"]),
        ("–±–ª–æ–∫-—à–æ—Ç", p["blk"], p["blk"]),
    ]
    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ > 0
    stats = [(lab, val, raw) for (lab, val, raw) in stats if raw and raw > 0]
    stats.sort(key=lambda x: x[2], reverse=True)

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º 3 –ø—É–Ω–∫—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª—å–∫–æ >0
    chosen = stats[:3] if len(stats) >= 3 else stats

    parts = []
    # –æ—á–∫–∏ –ø–µ—á–∞—Ç–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ç–æ–∂–µ —Å–∫–ª–æ–Ω—è–µ–º
    for lab, val, raw in chosen:
        if lab == "–æ—á–∫–∏":
            parts.append(f"{val} {ru_plural(val, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}")
        elif lab == "–ø–æ–¥–±–æ—Ä":
            parts.append(f"{val} {ru_plural(val, ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}")
        elif lab == "–ø–µ—Ä–µ–¥–∞—á–∞":
            parts.append(f"{val} {ru_plural(val, ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}")
        elif lab == "–ø–µ—Ä–µ—Ö–≤–∞—Ç":
            parts.append(f"{val} {ru_plural(val, ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}")
        elif lab == "–±–ª–æ–∫-—à–æ—Ç":
            parts.append(f"{val} {ru_plural(val, ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}")

    return f"{name}: " + ", ".join(parts) + hot_mark(p)

def _score_key(p: dict):
    return (p["pts"], p["reb"] + p["ast"], p["stl"] + p["blk"])

def _is_double_double(p: dict) -> bool:
    cats = [p["pts"], p["reb"], p["ast"], p["stl"], p["blk"]]
    return sum(v >= 10 for v in cats) >= 2

def second_player_condition(p: dict) -> bool:
    # ‚â•20 –æ—á–∫–æ–≤ –ò–õ–ò –¥–∞–±–ª-–¥–∞–±–ª (–ª—é–±—ã–µ 2 –∏–∑ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚â•10) –ò–õ–ò –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã ‚â•6 –ò–õ–ò –±–ª–æ–∫–∏ ‚â•6
    return (p["pts"] >= 20) or _is_double_double(p) or (p["stl"] >= 6) or (p["blk"] >= 6)

def pick_players_for_team(team_ru: str, abbr: str, rows: list[dict]) -> list[tuple[dict,bool,bool]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –≤–∏–¥–µ (player, bold, special_detail).
      ‚Ä¢ –≤—Å–µ–≥–¥–∞ —Ç–æ–ø-—Å–∫–æ—Ä–µ—Ä
      ‚Ä¢ —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫ (–î—ë–º–∏–Ω/–ì–æ–ª–¥–∏–Ω) ‚Äî –≤–∫–ª—é—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (–µ—Å–ª–∏ –∏–≥—Ä–∞–ª), –∂–∏—Ä–Ω—ã–º –∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
      ‚Ä¢ –≤—Ç–æ—Ä–æ–π –ø–æ —É—Å–ª–æ–≤–∏—é (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç –¥–≤—É—Ö)
    """
    if not rows: return []
    rows = sorted(rows, key=_score_key, reverse=True)
    out: list[tuple[dict,bool,bool]] = []

    # 1) –≤—Å–µ–≥–¥–∞ —Ç–æ–ø
    top = rows[0]
    is_special_top = False

    # 2) —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫
    special_key = "–¥—ë–º–∏–Ω" if abbr == "BKN" else ("–≥–æ–ª–¥–∏–Ω" if abbr == "MIA" else None)
    special = None
    if special_key:
        for p in rows:
            if special_key in (p["name"] or "").lower():
                special = p
                break

    if special:
        if special["name"] == top["name"]:
            # —Ç–æ–ø ‚Äî —ç—Ç–æ —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫
            out.append((special, True, True))
            is_special_top = True
        else:
            # —Å–Ω–∞—á–∞–ª–∞ —Ç–æ–ø (–æ–±—ã—á–Ω–æ), –∑–∞—Ç–µ–º —Å–ø–µ—Ü-–∏–≥—Ä–æ–∫
            out.append((top, False, False))
            out.append((special, True, True))
    else:
        out.append((top, False, False))

    # 3) –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç –¥–≤—É—Ö ‚Äî –¥–æ–±–∏—Ä–∞–µ–º –ø–æ —É—Å–ª–æ–≤–∏—é –≤—Ç–æ—Ä–æ–≥–æ
    if len(out) < 2:
        for p in rows[1:]:
            if p["name"] == top["name"]:
                continue
            if second_player_condition(p):
                out.append((p, False, False))
                break

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–≤—É–º—è
    if len(out) > 2:
        # –µ—Å–ª–∏ –≤ –Ω–∞–±–æ—Ä–µ –µ—Å—Ç—å —Å–ø–µ—Ü –∏ >2, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–µ—Ü –∏ –ª—É—á—à–µ–≥–æ –ø–æ –æ—á–∫–∞–º
        have_special = any(s for (_, _, s) in out)
        if have_special:
            # –Ω–∞–π–¥—ë–º —Å–ø–µ—Ü –∏ –ª—É—á—à–µ–≥–æ –ø–æ –æ—á–∫–∞–º –ø–æ–º–∏–º–æ –Ω–µ–≥–æ
            spec = next(item for item in out if item[2])
            others = [item for item in out if not item[2]]
            # –≤—ã–±—Ä–∞—Ç—å —Å—Ä–µ–¥–∏ others —Å–∞–º–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ
            if others:
                others.sort(key=lambda it: _score_key(it[0]), reverse=True)
                out = [others[0], spec] if spec[0]["name"] != others[0][0]["name"] else [spec, others[1] if len(others)>1 else spec]
                # —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–π –¥—É–±–ª—å
                uniq = []
                seen = set()
                for item in out:
                    if item[0]["name"] in seen: continue
                    seen.add(item[0]["name"]); uniq.append(item)
                out = uniq[:2]
            else:
                out = [spec]
        else:
            # –æ–±—ã—á–Ω—ã–π —Å—Ä–µ–∑
            out = out[:2]

    return out

# ---------- BUILD MESSAGE ----------
SEP = "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì"

def build_post() -> str:
    chosen_day = None
    games = []

    for d in pick_candidate_days():
        day_links = collect_day_match_links(d)
        day_games = []
        for u in day_links:
            info = parse_match(u)
            if not info: 
                continue
            if not info["finished"]:
                continue
            day_games.append(info)
        if day_games:
            chosen_day = d
            games = day_games
            break

    if not chosen_day:
        chosen_day = pick_report_date()

    title = f"–ù–ë–ê ‚Ä¢ {ru_date(chosen_day)} ‚Ä¢ {len(games)} {ru_plural(len(games), ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n"
    title += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n"
    title += SEP + "\n\n"

    if not games:
        return title.rstrip()

    blocks = []
    for i, g in enumerate(games, 1):
        A, B = g["teamA"], g["teamB"]
        ot_str = "" if g["ot"] == 0 else (" (–û–¢)" if g["ot"] == 1 else f" ({g['ot']} –û–¢)")
        head = f"{A['emoji']} {A['name']}: {A['score']}\n{B['emoji']} {B['name']}: {B['score']}{ot_str}\n"

        lines = []
        rowsA = g["players"].get(A["name"], [])
        rowsB = g["players"].get(B["name"], [])

        for p, bold, special_detail in pick_players_for_team(A["name"], A["abbr"], rowsA):
            if special_detail:
                lines.append(format_player_line_special_detail(p, bold=True))
            else:
                lines.append(format_player_line_regular(p, bold))
        if lines: lines.append("")
        for p, bold, special_detail in pick_players_for_team(B["name"], B["abbr"], rowsB):
            if special_detail:
                lines.append(format_player_line_special_detail(p, bold=True))
            else:
                lines.append(format_player_line_regular(p, bold))

        blocks.append(head + ("\n".join(lines) if lines else ""))
        if i < len(games): blocks.append("\n" + SEP + "\n")

    return (title + "\n".join(blocks)).strip()

# ---------- TELEGRAM ----------
def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    resp = S.post(url, json={
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    }, timeout=25)
    if resp.status_code != 200:
        raise RuntimeError(f"Telegram error {resp.status_code}: {resp.text}")

# ---------- MAIN ----------
if __name__ == "__main__":
    try:
        text = build_post()
        tg_send(text)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
