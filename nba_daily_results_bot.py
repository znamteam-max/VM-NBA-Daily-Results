#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
NBA Daily Results ‚Üí Telegram (RU)

‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å—á—ë—Ç, –∏–≥—Ä–æ–∫–∏, —Ä—É—Å—Å–∫–∏–µ —Ñ–∞–º–∏–ª–∏–∏): Sports.ru (match pages).
‚Ä¢ –ü–∞—Ä—ã/—Ä–µ–∫–æ—Ä–¥—ã ESPN –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã (–º–µ—à–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –º–∞—Ç—á–∞–º).
‚Ä¢ –§–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤–∏–¥–Ω—ã, —Å—á—ë—Ç –∏ –∏–≥—Ä–æ–∫–∏ ‚Äî –≤ —Å–ø–æ–π–ª–µ—Ä–∞—Ö. –£ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å—á—ë—Ç –∂–∏—Ä–Ω—ã–º.
‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä–æ–∫–æ–≤:
  ‚Äì 1‚Äì2 –Ω–∞ –∫–æ–º–∞–Ω–¥—É; –≤—Ç–æ—Ä–æ–π ‚Äî –µ—Å–ª–∏ ‚â•20 –æ—á–∫–æ–≤ –ò–õ–ò –¥–∞–±–ª-–¥–∞–±–ª –ò–õ–ò ‚â•6 STL/BLK.
  ‚Äì –°–ø–µ—Ü: –µ—Å–ª–∏ –∏–≥—Ä–∞–ª –ï–≥–æ—Ä –î—ë–º–∏–Ω (BKN) –∏–ª–∏ –í–ª–∞–¥ –ì–æ–ª–¥–∏–Ω (MIA) ‚Äî –≤–∫–ª—é—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –º–∞–∫—Å –º–µ—Ç—Ä–∏–∫–∏ >0 (–∂–∏—Ä–Ω—ã–º).
‚Ä¢ –õ–æ–≥–æ: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏ Telegram —á–µ—Ä–µ–∑ TEAM_EMOJI_JSON (abbr->custom_emoji_id).
  –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞ ‚Äî —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —é–Ω–∏–∫–æ–¥-—ç–º–æ–¥–∑–∏.
"""

import os, sys, re, json
from datetime import date, datetime, timedelta
from zoneinfo import ZoneInfo
from urllib.parse import urlparse, urlunparse

import requests
from requests.adapters import HTTPAdapter
try:
    from urllib3.util.retry import Retry
except Exception:
    Retry = None
from bs4 import BeautifulSoup

# -------- ENV --------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID", "").strip()
TEAM_EMOJI_JSON = os.getenv("TEAM_EMOJI_JSON", "").strip()  # {"BOS":"<custom_emoji_id>", ...}
DEBUG = bool(os.getenv("DEBUG_NBA", "").strip())

# -------- HTTP --------
HTTP_TIMEOUT = 12

def _mk_adapter():
    if Retry is not None:
        r = Retry(total=3, connect=3, read=3, backoff_factor=0.4,
                  status_forcelist=[429,500,502,503,504],
                  allowed_methods=["GET","POST"])
        return HTTPAdapter(max_retries=r)
    return HTTPAdapter(max_retries=2)

def make_session():
    s = requests.Session()
    ad = _mk_adapter()
    s.mount("https://", ad); s.mount("http://", ad)
    # –í–∞–∂–Ω–æ: –±–µ–∑ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ UA (–ª–∞—Ç–∏–Ω-1 –±–∞–≥ –≤ CI)
    s.headers.update({
        "User-Agent": "NBA-DailyResultsBot/4.1 (sports.ru only, spoilers, custom_emoji)",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.6",
        "Connection": "close",
    })
    return s

S = make_session()
def log(*a): 
    if DEBUG: print(*a, file=sys.stderr)

# -------- DATES --------
RU_MONTHS = {1:"—è–Ω–≤–∞—Ä—è",2:"—Ñ–µ–≤—Ä–∞–ª—è",3:"–º–∞—Ä—Ç–∞",4:"–∞–ø—Ä–µ–ª—è",5:"–º–∞—è",6:"–∏—é–Ω—è",
             7:"–∏—é–ª—è",8:"–∞–≤–≥—É—Å—Ç–∞",9:"—Å–µ–Ω—Ç—è–±—Ä—è",10:"–æ–∫—Ç—è–±—Ä—è",11:"–Ω–æ—è–±—Ä—è",12:"–¥–µ–∫–∞–±—Ä—è"}
def ru_date(d: date) -> str: return f"{d.day} {RU_MONTHS[d.month]}"
def ru_plural(n: int, forms: tuple[str,str,str]) -> str:
    n = abs(int(n)) % 100; n1 = n % 10
    if 11 <= n <= 19: return forms[2]
    if 2 <= n1 <= 4:  return forms[1]
    if n1 == 1:      return forms[0]
    return forms[2]

def pick_report_date_london() -> date:
    now = datetime.now(ZoneInfo("Europe/London"))
    # –ß—É—Ç—å –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—ã–≥—Ä—É–∑–∫–∏ –±–æ–∫—Å–∫–æ—Ä–∞ –Ω–∞ sports.ru
    return now.date() if now.hour >= 8 else (now.date() - timedelta(days=1))

# -------- TEAMS / EMOJI --------
TEAM_RU_TO_ABBR = {
    "–ê—Ç–ª–∞–Ω—Ç–∞":"ATL","–ë–æ—Å—Ç–æ–Ω":"BOS","–ë—Ä—É–∫–ª–∏–Ω":"BKN","–®–∞—Ä–ª–æ—Ç—Ç":"CHA","–ß–∏–∫–∞–≥–æ":"CHI",
    "–ö–ª–∏–≤–ª–µ–Ω–¥":"CLE","–î–∞–ª–ª–∞—Å":"DAL","–î–µ–Ω–≤–µ—Ä":"DEN","–î–µ—Ç—Ä–æ–π—Ç":"DET","–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç":"GSW",
    "–•—å—é—Å—Ç–æ–Ω":"HOU","–ò–Ω–¥–∏–∞–Ω–∞":"IND","–ö–ª–∏–ø–ø–µ—Ä—Å":"LAC","–õ–µ–π–∫–µ—Ä—Å":"LAL","–ú–µ–º—Ñ–∏—Å":"MEM",
    "–ú–∞–π–∞–º–∏":"MIA","–ú–∏–ª—É–æ–∫–∏":"MIL","–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞":"MIN","–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω":"NOP","–ù—å—é-–ô–æ—Ä–∫":"NYK",
    "–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏":"OKC","–û—Ä–ª–∞–Ω–¥–æ":"ORL","–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è":"PHI","–§–∏–Ω–∏–∫—Å":"PHX","–ü–æ—Ä—Ç–ª–µ–Ω–¥":"POR",
    "–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ":"SAC","–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ":"SAS","–¢–æ—Ä–æ–Ω—Ç–æ":"TOR","–Æ—Ç–∞":"UTA","–í–∞—à–∏–Ω–≥—Ç–æ–Ω":"WAS",
}
ABBR_TO_RU = {v:k for k,v in TEAM_RU_TO_ABBR.items()}

TEAM_EMOJI_DEFAULT = {
    "ATL":"ü¶Ö","BOS":"‚òòÔ∏è","BKN":"üï∏Ô∏è","CHA":"üêù","CHI":"üêÇ","CLE":"üõ°Ô∏è","DAL":"üêé","DEN":"‚õèÔ∏è","DET":"üîß",
    "GSW":"üó°Ô∏è","HOU":"üöÄ","IND":"üí´","LAC":"‚úÇÔ∏è","LAL":"‚≠ê","MEM":"üêª","MIA":"üî•","MIL":"ü¶å","MIN":"üê∫",
    "NOP":"ü™∂","NYK":"üóΩ","OKC":"‚ö°","ORL":"‚ú®","PHI":"üîî","PHX":"‚òÄÔ∏è","POR":"üß≠","SAC":"üëë","SAS":"ü™ô",
    "TOR":"ü¶ñ","UTA":"üé∑","WAS":"üßô",
}

def load_custom_emoji():
    if not TEAM_EMOJI_JSON: return {}
    try:
        d = json.loads(TEAM_EMOJI_JSON)
        if isinstance(d, dict):
            return {k.upper(): str(v) for k,v in d.items() if v}
    except Exception:
        pass
    return {}

CUSTOM_EMOJI = load_custom_emoji()

def emoji_token(abbr: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ç–µ–º –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ custom_emoji entity.
       –ï—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–µ—Ç ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –æ–±—ã—á–Ω—ã–π —é–Ω–∏–∫–æ–¥ –≤ tg_send()."""
    ab = (abbr or "").upper()
    return f"{{EMO:{ab}}}"

# -------- SPORTS.RU --------
def day_url(d: date) -> str:
    return f"https://www.sports.ru/stat/basketball/center/end/{d:%Y/%m/%d}.html"

def _normalize_match_url(u: str) -> str:
    full = "https://www.sports.ru" + u if u.startswith("/") else u
    p = urlparse(full); return urlunparse((p.scheme, p.netloc, p.path, "", "", ""))

def _soup(url: str):
    try:
        r = S.get(url, timeout=HTTP_TIMEOUT)
        if r.status_code != 200: return None
        return BeautifulSoup(r.text, "html.parser")
    except Exception:
        return None

def collect_day_links(d: date) -> list[str]:
    soup = _soup(day_url(d))
    if not soup: return []
    out, seen = [], set()
    for a in soup.find_all("a", href=True):
        href = a["href"]
        if "/basketball/match/" not in href: continue
        full = _normalize_match_url(href)
        if full in seen: continue
        seen.add(full); out.append(full)
    log(f"[DBG] SPORTS LINKS {len(out)}")
    return out

def _canonical_ru_team(raw: str) -> str | None:
    if not raw: return None
    t = raw.replace("¬´","").replace("¬ª","").strip()
    t = re.sub(r"\(.*?\)", "", t).strip()
    for k in TEAM_RU_TO_ABBR:
        if t.startswith(k) or k in t:
            return k
    return None

def _anchor_team_players(soup: BeautifulSoup, team_ru: str):
    """–ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–ö–æ–º–∞–Ω–¥–∞. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤' (h2/h3/h4)"""
    if not soup: return None
    stamp = team_ru.lower()
    for h in soup.find_all(["h2","h3","h4"]):
        txt = h.get_text(" ", strip=True).lower()
        if "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤" in txt and stamp in txt:
            return h
    return None

def _find_table_after(anchor):
    """–ü–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏—â–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é —Ç–∞–±–ª–∏—Ü—É: <table> –∏–ª–∏ div-—Ç–∞–±–ª–∏—Ü—É."""
    if not anchor: return None
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º <table>
    t = anchor.find_next("table")
    if t: return t
    # –ò–Ω–æ–≥–¥–∞ –≤–µ—Ä—Å—Ç–∫–∞ –±–µ–∑ <table>: –∏—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –≥–¥–µ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–ò–≥—Ä–æ–∫ –û ...'
    node = anchor
    for _ in range(12):  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∏—Å–∫
        node = node.find_next()
        if not node: break
        if getattr(node, "get_text", None):
            tx = node.get_text(" ", strip=True)
            if "–∏–≥—Ä–æ–∫" in tx.lower() and " –æ " in (" "+tx.lower()+" "):
                return node
    return None

def _header_map(cells: list[str]) -> dict:
    """–°—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É –∫–æ–ª–æ–Ω–æ–∫ (index) –ø–æ —à–∞–ø–∫–µ."""
    label_to_key = {
        "–æ": "pts",
        "–ø–±": "reb",
        "–∞–ø": "ast",
        "–ø—Ö": "stl",
        "–±—à": "blk",
    }
    mp={}
    for i, raw in enumerate(cells):
        t = raw.strip().lower().replace(" ", "")
        if t in label_to_key and label_to_key[t] not in mp:
            mp[label_to_key[t]] = i
    return mp

def _as_int(x: str) -> int:
    x = (x or "").strip().replace("\u2009"," ")
    if x == "": return 0
    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–Ω:—Å–µ–∫
    if ":" in x: return 0
    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä–æ–±–∏ "7/10"
    if "/" in x:
        try:
            a, b = x.split("/", 1)
            return int(a)
        except Exception:
            return 0
    # –ø—Ä–æ—Ü–µ–Ω—Ç—ã "75" ‚Äî —ç—Ç–æ %, –Ω–∞–º –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã (–±–µ—Ä—ë–º –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–∞—Ä—Ç–µ)
    try:
        return int(x)
    except Exception:
        try:
            return int(float(x))
        except Exception:
            return 0

def _parse_players_table(node) -> list[dict]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —É–∑–ª–∞ (table/div)."""
    rows_out=[]
    # –°–æ–±–µ—Ä—ë–º —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Å–ø–∏—Å–∫–∏ —è—á–µ–µ–∫
    def cells_of_tr(tr):
        tds = tr.find_all(["td","th"])
        return [td.get_text(" ", strip=True) for td in tds]

    # –Ω–∞–π–¥—ë–º –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å—Ç—Ä–æ–∫
    trs = []
    if hasattr(node, "find_all"):
        trs = node.find_all("tr")
    # –ï—Å–ª–∏ tr –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ —Ä–æ–ª–∏: –±–µ—Ä—ë–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —Ü–∏—Ñ—Ä–∞–º–∏
    if not trs:
        ch = []
        for div in node.find_all(True, recursive=True):
            txt = div.get_text(" ", strip=True)
            if txt and any(ch.isdigit() for ch in txt):
                ch.append(div)
        # –°–ª–∏—à–∫–æ–º —à—É–º–Ω–æ ‚Äî –ª—É—á—à–µ –≤—ã–π—Ç–∏
        return rows_out

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = None
    for tr in trs:
        cells = cells_of_tr(tr)
        joined = " ".join(cells).strip().lower()
        if joined.startswith("–∏–≥—Ä–æ–∫ ") or (" –∏–≥—Ä–æ–∫ " in (" "+joined+" ")):
            header = cells
            break
    if not header:
        return rows_out
    col = _header_map(header)
    # –ò–Ω–¥–µ–∫—Å—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    idx_pts = col.get("pts")
    idx_reb = col.get("reb")
    idx_ast = col.get("ast")
    idx_stl = col.get("stl")
    idx_blk = col.get("blk")

    # –†–∞–∑–±–∏—Ä–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    for tr in trs:
        cells = cells_of_tr(tr)
        if not cells: continue
        j = " ".join(cells).strip().lower()
        if j.startswith("–∏–≥—Ä–æ–∫ "):  # —à–∞–ø–∫–∞
            continue
        # ¬´–ò—Ç–æ–≥–æ¬ª/–∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        if j.startswith("–∏—Ç–æ–≥–æ ") or j.startswith("–æ ‚Äì"):
            continue
        # –∏–º—è ‚Äî –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞, –≥–¥–µ –µ—Å—Ç—å –±—É–∫–≤—ã (–∞ –Ω–µ —á–∏—Å–ª–∞/–¥—Ä–æ–±–∏)
        name = None
        for c in cells[:3]:
            if re.search(r"[^\d/:%\s\-]", c):
                name = c.strip()
                break
        if not name:
            continue
        # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        def safe_get(idx):
            if idx is None or idx >= len(cells): return 0
            return _as_int(cells[idx])

        pts = safe_get(idx_pts)
        reb = safe_get(idx_reb)
        ast = safe_get(idx_ast)
        stl = safe_get(idx_stl)
        blk = safe_get(idx_blk)

        if not any([pts, reb, ast, stl, blk]):
            # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–∞
            continue

        rows_out.append({"name": name, "pts": pts, "reb": reb, "ast": ast, "stl": stl, "blk": blk})

    return rows_out

def _extract_score_from_context(anchor_b) -> tuple[int,int]:
    """–ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∫–æ–º–∞–Ω–¥–∞ B) –∏—â–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É 'NNN : NNN'."""
    if not anchor_b: return (0,0)
    rx = re.compile(r"\b(\d{2,3})\s*:\s*(\d{2,3})\b")
    cur = anchor_b
    for _ in range(40):  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–æ–∏—Å–∫
        cur = cur.find_next(string=True)
        if not cur: break
        m = rx.search(cur)
        if m:
            return int(m.group(1)), int(m.group(2))
    return (0,0)

def parse_sports_match(url: str) -> dict | None:
    soup = _soup(url)
    if not soup: return None

    # –∫–æ–º–∞–Ω–¥—ã –∏–∑ <title> / og:title
    meta = soup.find("meta", attrs={"property":"og:title"})
    title = meta.get("content") if meta and meta.get("content") else (soup.title.string if soup.title else "")
    teamA = teamB = None
    if title and " - " in title:
        left, right = [x.strip() for x in title.split(" - ", 1)]
        teamA = _canonical_ru_team(left)
        # –ø–æ—Å–ª–µ –¥–µ—Ñ–∏—Å–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —á–∞—Å—Ç–æ –µ—â—ë –¥–∞—Ç–∞ ‚Äî –æ—Ç—Ä–µ–∂–µ–º –ø–æ ':' –µ—Å–ª–∏ –µ—Å—Ç—å
        right = right.split(":")[0].strip()
        teamB = _canonical_ru_team(right)
    # –∑–∞–ø–∞—Å–Ω–æ–π —Å–ø–æ—Å–æ–± ‚Äî –ø–æ –∫—Ä—É–ø–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∫–∞—Ä—Ç–æ—á–∫–∏
    if not (teamA and teamB):
        heads = []
        for h in soup.find_all(["h2","h3"]):
            t = h.get_text(" ", strip=True).strip()
            if t in TEAM_RU_TO_ABBR:
                heads.append(t)
        if len(heads) >= 2:
            teamA = teamA or heads[0]
            teamB = teamB or next((x for x in heads[1:] if x != teamA), None)
    if not (teamA and teamB) or teamA == teamB:
        return None

    a_abbr = TEAM_RU_TO_ABBR.get(teamA,""); b_abbr = TEAM_RU_TO_ABBR.get(teamB,"")
    if not a_abbr or not b_abbr: return None

    # —Ç–∞–±–ª–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤
    ancA = _anchor_team_players(soup, teamA)
    ancB = _anchor_team_players(soup, teamB)
    if not ancA or not ancB:
        log("[DBG] HEADERS not found for", teamA, teamB, url)
        return None

    tabA = _find_table_after(ancA)
    tabB = _find_table_after(ancB)
    if not tabA or not tabB:
        log("[DBG] TABLES not found right after headers:", bool(tabA), bool(tabB), url)
        return None

    rowsA = _parse_players_table(tabA)
    rowsB = _parse_players_table(tabB)
    if not (rowsA or rowsB):
        log("[DBG] PLAYERS parsed 0+0 for", url)
        return None

    # —Å—á—ë—Ç –∏–∑ –±–ª–∏–∑–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    scoreA, scoreB = _extract_score_from_context(ancB)

    log(f"[DBG] OK {teamA}-{teamB} SCORE {scoreA}:{scoreB} A_rows {len(rowsA)} B_rows {len(rowsB)}")
    return {
        "teamA": {"name": teamA, "abbr": a_abbr, "score": scoreA},
        "teamB": {"name": teamB, "abbr": b_abbr, "score": scoreB},
        "players": {teamA: rowsA, teamB: rowsB},
        "url": url,
    }

# -------- –ò–≥—Ä–æ–∫–∏/—Ñ–æ—Ä–º–∞—Ç --------
def initials_ru(full: str) -> str:
    parts = [p for p in re.split(r"\s+", (full or "").strip()) if p]
    if not parts: return full or ""
    if len(parts) == 1: return parts[0]
    first = parts[0]; last = parts[-1]
    if last.lower() in {"jr.","jr","–º–ª.","—Å—Ç.","sr.","sr"} and len(parts)>=3:
        last = parts[-2] + " " + parts[-1]
    return f"{first[0]}. {last}"

def ru_forms(label: str, v: int) -> str:
    if label=="pts": return f"{v} {ru_plural(v, ('–æ—á–∫–æ','–æ—á–∫–∞','–æ—á–∫–æ–≤'))}"
    if label=="reb": return f"{v} {ru_plural(v, ('–ø–æ–¥–±–æ—Ä','–ø–æ–¥–±–æ—Ä–∞','–ø–æ–¥–±–æ—Ä–æ–≤'))}"
    if label=="ast": return f"{v} {ru_plural(v, ('–ø–µ—Ä–µ–¥–∞—á–∞','–ø–µ—Ä–µ–¥–∞—á–∏','–ø–µ—Ä–µ–¥–∞—á'))}"
    if label=="stl": return f"{v} {ru_plural(v, ('–ø–µ—Ä–µ—Ö–≤–∞—Ç','–ø–µ—Ä–µ—Ö–≤–∞—Ç–∞','–ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤'))}"
    if label=="blk": return f"{v} {ru_plural(v, ('–±–ª–æ–∫-—à–æ—Ç','–±–ª–æ–∫-—à–æ—Ç–∞','–±–ª–æ–∫-—à–æ—Ç–æ–≤'))}"
    return f"{v}"

def hot_mark(p: dict) -> str:
    if (p["pts"]>=35) or (p["reb"]>=15) or (p["ast"]>=12) or (p["stl"]>=5) or (p["blk"]>=5):
        return " üî•"
    return ""

def is_dd(p: dict) -> bool:
    return sum(x>=10 for x in [p["pts"],p["reb"],p["ast"],p["stl"],p["blk"]]) >= 2

def second_ok(p: dict) -> bool:
    return (p["pts"]>=20) or is_dd(p) or (p["stl"]>=6) or (p["blk"]>=6)

def score_key(p: dict): 
    return (p["pts"], p["reb"]+p["ast"], p["stl"]+p["blk"])

def pick_team_players(abbr: str, rows: list[dict]) -> list[tuple[dict,bool,bool]]:
    # [(player, bold, special_detail)]
    if not rows: return []
    rows = sorted(rows, key=score_key, reverse=True)

    special_keys = []
    if abbr=="BKN": special_keys = ["–¥—ë–º–∏–Ω","demin"]
    if abbr=="MIA": special_keys = ["–≥–æ–ª–¥–∏–Ω","goldin"]
    special=None
    for p in rows:
        nm = (p["name"] or "").lower()
        if any(k in nm for k in special_keys):
            special=p; break

    out=[]
    top = rows[0]
    if special and special["name"] == top["name"]:
        out.append((special, True, True))
    elif special:
        out.append((top, False, False)); out.append((special, True, True))
    else:
        out.append((top, False, False))

    if len(out)<2:
        for p in rows[1:]:
            if p["name"] == top["name"]: continue
            if second_ok(p): out.append((p, False, False)); break
    return out[:2]

def format_player_regular(p: dict, bold=False) -> str:
    name = initials_ru(p["name"])
    if bold: name = f"<b>{name}</b>"
    out = [ru_forms("pts", p["pts"])]
    if p["reb"]>=5: out.append(ru_forms("reb", p["reb"]))
    if p["ast"]>=5: out.append(ru_forms("ast", p["ast"]))
    if p["stl"]>=4: out.append(ru_forms("stl", p["stl"]))
    if p["blk"]>=4: out.append(ru_forms("blk", p["blk"]))
    return f"{name}: " + ", ".join(out) + hot_mark(p)

def format_player_special(p: dict) -> str:
    name = f"<b>{initials_ru(p['name'])}</b>"
    stats=[("pts",p["pts"]),("reb",p["reb"]),("ast",p["ast"]),("stl",p["stl"]),("blk",p["blk"])]
    stats=[(k,v) for k,v in stats if v>0]
    stats.sort(key=lambda kv: kv[1], reverse=True)
    chosen=stats[:3]
    return f"{name}: " + ", ".join(ru_forms(k,v) for k,v in chosen) + hot_mark(p)

# -------- –°–ø–æ–π–ª–µ—Ä --------
def sp(s: str) -> str: return f'<span class="tg-spoiler">{s}</span>'
SEP = "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì"

# -------- –ë–ª–æ–∫–∏ --------
def format_score_line(name_ru: str, abbr: str, score: int, winner: bool) -> str:
    score_txt = f"<b>{score}</b>" if winner else f"{score}"
    return f"{emoji_token(abbr)} {name_ru}: {sp(score_txt)}"

def build_block(info: dict) -> str:
    A,B = info["teamA"], info["teamB"]
    a_win = A["score"] > B["score"]; b_win = B["score"] > A["score"]
    head = (
        f"{format_score_line(A['name'], A['abbr'], A['score'], a_win)}\n"
        f"{format_score_line(B['name'], B['abbr'], B['score'], b_win)}\n\n"
    )
    rowsA = info["players"].get(A["name"], []); rowsB = info["players"].get(B["name"], [])
    al = [sp(format_player_special(p) if det else format_player_regular(p, bold))
          for (p,bold,det) in pick_team_players(A["abbr"], rowsA)]
    bl = [sp(format_player_special(p) if det else format_player_regular(p, bold))
          for (p,bold,det) in pick_team_players(B["abbr"], rowsB)]
    lines=[]
    if al: lines.extend(al)
    if al and bl: lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
    if bl: lines.extend(bl)
    return head + ("\n".join(lines) if lines else "")

# -------- –°–±–æ—Ä –º–∞—Ç—á–µ–π –¥–Ω—è --------
def fetch_sports_games_for_day(d: date) -> list[dict]:
    out=[]
    for url in collect_day_links(d):
        info = parse_sports_match(url)
        if info:
            out.append(info)
    return out

def build_post() -> str:
    d_title = pick_report_date_london()
    games = fetch_sports_games_for_day(d_title)

    title_count = len(games)
    title = f"–ù–ë–ê ‚Ä¢ {ru_date(d_title)} ‚Ä¢ {title_count} {ru_plural(title_count, ('–º–∞—Ç—á','–º–∞—Ç—á–∞','–º–∞—Ç—á–µ–π'))}\n"
    title += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–¥—ë–∂–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω—ã üëá\n"
    title += SEP + "\n\n"

    if title_count == 0:
        return title.rstrip()

    blocks=[]
    for i, g in enumerate(games, 1):
        blocks.append(build_block(g))
        if i < title_count:
            blocks.append("\n" + SEP + "\n\n")

    return (title + "".join(blocks)).strip()

# -------- Telegram (custom emoji entities) --------
def tg_send(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        raise RuntimeError("TELEGRAM_BOT_TOKEN / TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")

    # –°–æ–±–∏—Ä–∞–µ–º entities –¥–ª—è –∫–∞—Å—Ç–æ–º-—ç–º–æ–¥–∑–∏
    entities=[]
    out_parts=[]
    last=0
    # –ú–∞—Ä–∫–µ—Ä {EMO:XXX}
    for m in re.finditer(r"\{EMO:([A-Z]{2,3})\}", text):
        abbr = m.group(1)
        out_parts.append(text[last:m.start()])
        start_offset = sum(len(p) for p in out_parts)
        if abbr in CUSTOM_EMOJI:
            # –í—Å—Ç–∞–≤–∏–º –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª-–∑–∞–≥–ª—É—à–∫—É (–µ–≥–æ Telegram –∑–∞–º–µ–Ω–∏—Ç –Ω–∞ –∫–∞—Å—Ç–æ–º)
            out_parts.append("‚¨§")
            entities.append({
                "type": "custom_emoji",
                "offset": start_offset,
                "length": 1,
                "custom_emoji_id": CUSTOM_EMOJI[abbr]
            })
        else:
            # –Æ–Ω–∏–∫–æ–¥-—ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            out_parts.append(TEAM_EMOJI_DEFAULT.get(abbr, "üèÄ"))
        last = m.end()
    out_parts.append(text[last:])
    final_text = "".join(out_parts)

    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    r = S.post(url, json={
        "chat_id": CHAT_ID,
        "text": final_text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
        "entities": entities if entities else None,
    }, timeout=HTTP_TIMEOUT)
    if r.status_code != 200:
        raise RuntimeError(f"Telegram error {r.status_code}: {r.text}")

# -------- MAIN --------
if __name__ == "__main__":
    try:
        text = build_post()
        tg_send(text)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
