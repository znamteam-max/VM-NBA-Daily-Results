name: Emoji Smoke Test

on:
  workflow_dispatch: {}

jobs:
  emoji:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TEAM_EMOJI_JSON: ${{ secrets.TEAM_EMOJI_JSON }}
      TEST_CHAT_ID: ${{ secrets.TEST_CHAT_ID }}  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ Settings ‚Üí Secrets
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install requests
        run: pip install requests

      - name: Validate TEAM_EMOJI_JSON is readable
        run: |
          python - << 'PY'
          import os, json, sys
          raw = os.getenv('TEAM_EMOJI_JSON','')
          if not raw:
            sys.exit('TEAM_EMOJI_JSON secret is empty or missing')
          try:
            mp = json.loads(raw)
            assert isinstance(mp, dict), 'TEAM_EMOJI_JSON must be a JSON object {ABBR: id}'
            print('TEAM_EMOJI_JSON entries:', len(mp))
          except Exception as e:
            raise SystemExit(f'Invalid TEAM_EMOJI_JSON: {e}')
          PY

      - name: Bot self-check (getMe)
        run: |
          python - << 'PY'
          import os, requests, sys
          token=os.getenv('TELEGRAM_BOT_TOKEN','').strip()
          if not token: sys.exit('No TELEGRAM_BOT_TOKEN')
          r=requests.get(f'https://api.telegram.org/bot{token}/getMe', timeout=15)
          j=r.json()
          if not j.get('ok'):
            print(j); sys.exit('getMe failed')
          me=j['result']
          print('Bot:', '@'+me.get('username','?'), 'id:', me.get('id'))
          PY

      - name: Check IDs exist in Telegram (no sending)
        run: |
          python - << 'PY'
          import os, json, requests, sys
          token = os.getenv('TELEGRAM_BOT_TOKEN','').strip()
          mapping = json.loads(os.getenv('TEAM_EMOJI_JSON','{}'))
          ids = sorted({str(v) for v in mapping.values() if v})
          url = f'https://api.telegram.org/bot{token}/getCustomEmojiStickers'
          r = requests.post(url, json={'custom_emoji_ids': ids}, timeout=20)
          data = r.json()
          if not data.get('ok'):
            print('Telegram API error:', data); sys.exit(1)
          found = {s.get('custom_emoji_id') for s in data.get('result', [])}
          missing = [(abbr, cid) for abbr, cid in mapping.items() if str(cid) not in found]
          print('Found:', len(found), '/', len(ids))
          if missing:
            print('Missing or invalid IDs:'); [print(' ', m) for m in missing]; sys.exit(2)
          print('All custom_emoji_id are valid ‚úÖ')
          PY

      - name: Dry-run entity building (no sending)
        run: |
          python - << 'PY'
          import os, json, re, sys
          mapping = json.loads(os.getenv('TEAM_EMOJI_JSON','{}'))
          text = " ".join([f'{{EMO:\n({abbr})\n}}{abbr}' for abbr in sorted(mapping)])
          def u16len(s): return len(s.encode('utf-16-le'))//2
          pat = re.compile(r"\{\s*EMO:\s*\(([A-Z]{2,3})\)\s*\}")
          entities=[]; out_parts=[]; last=0
          for m in pat.finditer(text):
            abbr=m.group(1)
            out_parts.append(text[last:m.start()])
            start=u16len(''.join(out_parts))
            out_parts.append('‚¨§')
            entities.append({'type':'custom_emoji','offset':start,'length':1,'custom_emoji_id':str(mapping.get(abbr,''))})
            last=m.end()
          out_parts.append(text[last:])
          final=''.join(out_parts)
          print('Preview text snippet:', final[:200].replace('\n',' '))
          print('Entities count:', len(entities))
          if not entities:
            sys.exit('No entities built ‚Äî check TEAM_EMOJI_JSON keys (must be ATL/BOS/...)')
          print('Entity building looks fine ‚úÖ')
          PY

      - name: Check TEST_CHAT_ID presence
        run: |
          python - << 'PY'
          import os, sys
          chat=os.getenv('TEST_CHAT_ID','').strip()
          if not chat:
            sys.exit('TEST_CHAT_ID is not set. Add it in repo Secrets.')
          # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –¥–ª–∏–Ω—É –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
          print('TEST_CHAT_ID length:', len(chat), 'tail:', chat[-3:])
          PY

      - name: Check chat access (getChat + getChatMember)
        run: |
          python - << 'PY'
          import os, requests, sys
          token=os.getenv('TELEGRAM_BOT_TOKEN','').strip()
          chat=os.getenv('TEST_CHAT_ID','').strip()
          r=requests.get(f'https://api.telegram.org/bot{token}/getMe', timeout=15); me=r.json()['result']; bot_id=me['id']
          gc=requests.get(f'https://api.telegram.org/bot{token}/getChat', params={'chat_id': chat}, timeout=15).json()
          if not gc.get('ok'):
            print('getChat error:', gc); sys.exit(1)
          info=gc['result']; print('Chat type:', info.get('type'), 'title/username:', info.get('title') or info.get('username'))
          # getChatMember —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø/–¥–º, –≤–µ—Ä–Ω—ë—Ç —Å—Ç–∞—Ç—É—Å
          gcm=requests.get(f'https://api.telegram.org/bot{token}/getChatMember', params={'chat_id': chat, 'user_id': bot_id}, timeout=15).json()
          if not gcm.get('ok'):
            print('getChatMember error:', gcm); sys.exit(1)
          member=gcm['result']
          print('Bot membership status:', member.get('status'))
          # –¥–ª—è –ª–∏—á–∫–∏ status='member', –¥–ª—è –∫–∞–Ω–∞–ª–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å 'administrator' –∏–ª–∏ 'creator'
          PY

      - name: Ping chat (simple text)
        run: |
          python - << 'PY'
          import os, requests, sys
          token=os.getenv('TELEGRAM_BOT_TOKEN','').strip()
          chat=os.getenv('TEST_CHAT_ID','').strip()
          r=requests.post(f'https://api.telegram.org/bot{token}/sendMessage',
                          json={'chat_id': chat, 'text': 'Emoji Smoke Test: ping üëã', 'disable_web_page_preview': True},
                          timeout=20)
          print(r.status_code, r.text[:200])
          if r.status_code != 200:
            sys.exit('sendMessage ping failed')
          PY

      - name: Send per-team logos with names (to TEST_CHAT_ID)
        run: |
          python - << 'PY'
          import os, json, re, requests, sys, math
          token=os.getenv('TELEGRAM_BOT_TOKEN','').strip()
          chat=os.getenv('TEST_CHAT_ID','').strip()
          mapping=json.loads(os.getenv('TEAM_EMOJI_JSON','{}'))
          ABBR_TO_RU = {
            "ATL":"–ê—Ç–ª–∞–Ω—Ç–∞","BOS":"–ë–æ—Å—Ç–æ–Ω","BKN":"–ë—Ä—É–∫–ª–∏–Ω","CHA":"–®–∞—Ä–ª–æ—Ç—Ç","CHI":"–ß–∏–∫–∞–≥–æ",
            "CLE":"–ö–ª–∏–≤–ª–µ–Ω–¥","DAL":"–î–∞–ª–ª–∞—Å","DEN":"–î–µ–Ω–≤–µ—Ä","DET":"–î–µ—Ç—Ä–æ–π—Ç","GSW":"–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç",
            "HOU":"–•—å—é—Å—Ç–æ–Ω","IND":"–ò–Ω–¥–∏–∞–Ω–∞","LAC":"–ö–ª–∏–ø–ø–µ—Ä—Å","LAL":"–õ–µ–π–∫–µ—Ä—Å","MEM":"–ú–µ–º—Ñ–∏—Å",
            "MIA":"–ú–∞–π–∞–º–∏","MIL":"–ú–∏–ª—É–æ–∫–∏","MIN":"–ú–∏–Ω–Ω–µ—Å–æ—Ç–∞","NOP":"–ù–æ–≤—ã–π –û—Ä–ª–µ–∞–Ω","NYK":"–ù—å—é-–ô–æ—Ä–∫",
            "OKC":"–û–∫–ª–∞—Ö–æ–º–∞-–°–∏—Ç–∏","ORL":"–û—Ä–ª–∞–Ω–¥–æ","PHI":"–§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è","PHX":"–§–∏–Ω–∏–∫—Å","POR":"–ü–æ—Ä—Ç–ª–µ–Ω–¥",
            "SAC":"–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ","SAS":"–°–∞–Ω-–ê–Ω—Ç–æ–Ω–∏–æ","TOR":"–¢–æ—Ä–æ–Ω—Ç–æ","UTA":"–Æ—Ç–∞","WAS":"–í–∞—à–∏–Ω–≥—Ç–æ–Ω",
          }
          abbrs = sorted(mapping.keys())
          lines = [f'{{EMO:\n({abbr})\n}} {abbr} ‚Äî {ABBR_TO_RU.get(abbr, abbr)}' for abbr in abbrs]
          def u16len(s: str) -> int: return len(s.encode('utf-16-le')) // 2
          pat = re.compile(r"\{\s*EMO:\s*\(([A-Z]{2,3})\)\s*\}")
          def build(text: str):
            entities=[]; out=[]; last=0
            for m in pat.finditer(text):
              abbr=m.group(1)
              out.append(text[last:m.start()])
              start=u16len(''.join(out))
              out.append('‚¨§')
              entities.append({'type':'custom_emoji','offset':start,'length':1,'custom_emoji_id':str(mapping.get(abbr,''))})
              last=m.end()
            out.append(text[last:])
            return ''.join(out), entities
          CHUNK=10
          for i in range(0, len(lines), CHUNK):
            text="\n".join(lines[i:i+CHUNK])
            final, entities = build(text)
            r = requests.post(f'https://api.telegram.org/bot{token}/sendMessage',
                              json={'chat_id':chat,'text':final,'parse_mode':'HTML','disable_web_page_preview':True,'entities':entities},
                              timeout=20)
            print('send:', i//CHUNK+1, r.status_code, r.text[:180])
            if r.status_code != 200:
              sys.exit('sendMessage failed')
          print('Done: sent', math.ceil(len(lines)/CHUNK), 'messages')
          PY
