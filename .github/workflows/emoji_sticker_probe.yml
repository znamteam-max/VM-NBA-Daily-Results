name: Emoji Sticker Probe

on:
  workflow_dispatch:
    inputs:
      TEAM_ABBR:
        description: 'Аббревиатура команды для теста (например, BOS). Пусто — взять первую из JSON'
        required: false
        default: ''

jobs:
  probe:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TEAM_EMOJI_JSON: ${{ secrets.TEAM_EMOJI_JSON }}
      TEST_CHAT_ID: ${{ secrets.TEST_CHAT_ID }}
      TEAM_ABBR: ${{ github.event.inputs.TEAM_ABBR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install requests
        run: pip install requests

      - name: Send one logo as STICKER (via file_id)
        run: |
          python - << 'PY'
          import os, json, requests, sys

          token = os.getenv('TELEGRAM_BOT_TOKEN','').strip()
          chat  = os.getenv('TEST_CHAT_ID','').strip()
          raw   = os.getenv('TEAM_EMOJI_JSON','').strip()
          pick  = os.getenv('TEAM_ABBR','').strip().upper()

          if not token: sys.exit('No TELEGRAM_BOT_TOKEN')
          if not chat:  sys.exit('No TEST_CHAT_ID')
          if not raw:   sys.exit('No TEAM_EMOJI_JSON')

          try:
              mapping = json.loads(raw)
              assert isinstance(mapping, dict)
          except Exception as e:
              raise SystemExit(f'Invalid TEAM_EMOJI_JSON: {e}')

          if pick:
              if pick not in mapping:
                  raise SystemExit(f'TEAM_ABBR={pick} not in TEAM_EMOJI_JSON keys')
              ids = [str(mapping[pick])]
              label = pick
          else:
              # берём первый по алфавиту
              abbr_sorted = sorted(mapping.keys())
              if not abbr_sorted:
                  raise SystemExit('Empty mapping in TEAM_EMOJI_JSON')
              label = abbr_sorted[0]
              ids = [str(mapping[label])]

          print('Chosen team:', label, 'custom_emoji_id:', ids[0])

          # 1) Получаем file_id через getCustomEmojiStickers
          url = f'https://api.telegram.org/bot{token}/getCustomEmojiStickers'
          r = requests.post(url, json={'custom_emoji_ids': ids}, timeout=20)
          try:
              j = r.json()
          except Exception:
              print('RAW:', r.text[:500])
              raise SystemExit('Telegram answer is not JSON')

          if not j.get('ok') or not j.get('result'):
              print('getCustomEmojiStickers error:', j)
              raise SystemExit('getCustomEmojiStickers failed')

          st = j['result'][0]
          file_id = st.get('file_id')
          set_name = st.get('set_name')
          print('Sticker set:', set_name or '<unknown>')
          print('file_id:', file_id)

          if not file_id:
              raise SystemExit('No file_id in getCustomEmojiStickers result')

          # 2) Отправляем этот же ресурс как STICKER
          send_url = f'https://api.telegram.org/bot{token}/sendSticker'
          rr = requests.post(send_url, json={'chat_id': chat, 'sticker': file_id}, timeout=20)
          print('sendSticker:', rr.status_code, rr.text[:300])
          if rr.status_code != 200:
              raise SystemExit('sendSticker failed')

          print('OK: sticker sent')
          PY
