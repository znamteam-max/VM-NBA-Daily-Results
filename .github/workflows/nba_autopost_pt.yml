name: NBA Auto Post (PT day complete)

on:
  schedule:
    # Проверяем каждые 10 минут
    - cron: "*/10 * * * *"
  workflow_dispatch:
    inputs:
      pt_date:
        description: "Принудительная PT-дата YYYY-MM-DD (опционально)"
        required: false
        default: ""

permissions:
  contents: write  # чтобы коммитить маркер .posted/pt-YYYYMMDD.done

concurrency:
  group: nba-autopost-pt
  cancel-in-progress: true

jobs:
  autopost:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
      TEAM_EMOJI_JSON:    ${{ secrets.TEAM_EMOJI_JSON }}
      FORCE_PT_DATE:      ${{ github.event.inputs.pt_date }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # нужно для git pull --rebase и пуша

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install requests beautifulsoup4

      - name: Resolve PT day and check ESPN completeness
        id: check
        run: |
          python - << 'PY'
          import os, sys, requests
          from datetime import datetime, timedelta
          from zoneinfo import ZoneInfo
          from pathlib import Path

          tz_pt = ZoneInfo("America/Los_Angeles")
          tz_et = ZoneInfo("America/New_York")

          # 1) Выбор PT-даты: входной параметр или "сегодня до 06:00 -> вчера"
          force = os.getenv("FORCE_PT_DATE","").strip()
          if force:
            try:
              base_pt = datetime.fromisoformat(force).date()
            except Exception:
              print("Invalid pt_date input, must be YYYY-MM-DD"); sys.exit(1)
          else:
            now_pt = datetime.now(tz_pt)
            base_pt = now_pt.date() if now_pt.hour >= 6 else (now_pt.date() - timedelta(days=1))

          ymd_pt = base_pt.strftime("%Y-%m-%d")
          print("PT day:", ymd_pt)

          # 2) Маркер, чтобы не постить повторно
          marker = Path(".posted") / f"pt-{base_pt.strftime('%Y%m%d')}.done"
          if marker.exists():
            print(f"Already posted for PT {ymd_pt}, skip.")
            with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write("ready=false\n")
              fh.write(f"pt_ymd={ymd_pt}\n")
            sys.exit(0)

          # 3) Какие ET-даты покрывают PT-день
          start_pt = datetime(base_pt.year, base_pt.month, base_pt.day, 0, 0, tzinfo=tz_pt)
          end_pt   = datetime(base_pt.year, base_pt.month, base_pt.day, 23, 59, tzinfo=tz_pt)
          et_dates = sorted({ start_pt.astimezone(tz_et).date(), end_pt.astimezone(tz_et).date() })
          print("Covers ET dates:", [d.isoformat() for d in et_dates])

          # 4) Грузим ESPN и оставляем только события PT-дня
          def fetch_et(d):
            url = f"https://site.api.espn.com/apis/site/v2/sports/basketball/nba/scoreboard?dates={d.strftime('%Y%m%d')}"
            r = requests.get(url, timeout=20); r.raise_for_status()
            return r.json().get("events") or []

          events = []
          for d in et_dates:
            events += fetch_et(d)

          def ev_pt_date(ev):
            # ev["date"] — ISO UTC. Конвертим в PT.
            dt = datetime.fromisoformat(ev["date"].replace("Z","+00:00")).astimezone(tz_pt)
            return dt.date()

          events_pt = [ev for ev in events if ev_pt_date(ev) == base_pt]
          print(f"ESPN events for PT {ymd_pt}: {len(events_pt)}")

          def is_completed(ev):
            t = ((ev or {}).get("status") or {}).get("type") or {}
            return bool(t.get("completed", False))

          all_done = bool(events_pt) and all(is_completed(ev) for ev in events_pt)
          print("all_completed:", all_done)

          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
            fh.write(f"ready={'true' if all_done else 'false'}\n")
            fh.write(f"pt_ymd={ymd_pt}\n")
          PY

      - name: Run bot for that PT day
        if: steps.check.outputs.ready == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          TEAM_EMOJI_JSON:    ${{ secrets.TEAM_EMOJI_JSON }}
          REPORT_DATE_PT:     ${{ steps.check.outputs.pt_ymd }}  # <-- важно
        run: python3 nba_daily_results_bot.py

      - name: Mark PT day as posted (with rebase & retry)
        if: steps.check.outputs.ready == 'true'
        run: |
          set -e
          mkdir -p .posted
          PTYMD="${{ steps.check.outputs.pt_ymd }}"
          MARK=".posted/pt-${PTYMD//-/}.done"
          echo "posted at $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > "$MARK"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          BRANCH="${GITHUB_REF_NAME:-main}"
          git add "$MARK"

          attempt=0
          until [ $attempt -ge 3 ]
          do
            git fetch origin "$BRANCH" || true
            git pull --rebase origin "$BRANCH" || true
            if git commit -m "NBA posted for PT $PTYMD"; then
              if git push origin "HEAD:$BRANCH"; then
                echo "Marker pushed"; exit 0
              fi
            else
              echo "Nothing to commit (marker may already exist)"; exit 0
            fi
            attempt=$((attempt+1))
            echo "Retry push ($attempt)..."
            sleep 2
          done

          echo "Failed to push marker after retries" >&2
          exit 1
